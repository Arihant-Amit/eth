
ETH1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c3c  080105e0  080105e0  000205e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801321c  0801321c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801321c  0801321c  0002321c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013224  08013224  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013224  08013224  00023224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013228  08013228  00023228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801322c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a88  20000078  080132a4  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b00  080132a4  00038b00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e09c  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000540f  00000000  00000000  0004e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00053558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  00054950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003388e  00000000  00000000  00055c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002594a  00000000  00000000  00089516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b5a6  00000000  00000000  000aee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ba406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f4  00000000  00000000  001ba458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080105c8 	.word	0x080105c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080105c8 	.word	0x080105c8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b56      	ldr	r3, [pc, #344]	; (8000754 <MX_GPIO_Init+0x170>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a55      	ldr	r2, [pc, #340]	; (8000754 <MX_GPIO_Init+0x170>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <MX_GPIO_Init+0x170>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b50      	ldr	r3, [pc, #320]	; (8000754 <MX_GPIO_Init+0x170>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a4f      	ldr	r2, [pc, #316]	; (8000754 <MX_GPIO_Init+0x170>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b4d      	ldr	r3, [pc, #308]	; (8000754 <MX_GPIO_Init+0x170>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <MX_GPIO_Init+0x170>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a49      	ldr	r2, [pc, #292]	; (8000754 <MX_GPIO_Init+0x170>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b47      	ldr	r3, [pc, #284]	; (8000754 <MX_GPIO_Init+0x170>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b44      	ldr	r3, [pc, #272]	; (8000754 <MX_GPIO_Init+0x170>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a43      	ldr	r2, [pc, #268]	; (8000754 <MX_GPIO_Init+0x170>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <MX_GPIO_Init+0x170>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <MX_GPIO_Init+0x170>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a3d      	ldr	r2, [pc, #244]	; (8000754 <MX_GPIO_Init+0x170>)
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <MX_GPIO_Init+0x170>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <MX_GPIO_Init+0x170>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a37      	ldr	r2, [pc, #220]	; (8000754 <MX_GPIO_Init+0x170>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b35      	ldr	r3, [pc, #212]	; (8000754 <MX_GPIO_Init+0x170>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000690:	4831      	ldr	r0, [pc, #196]	; (8000758 <MX_GPIO_Init+0x174>)
 8000692:	f002 f8a5 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2140      	movs	r1, #64	; 0x40
 800069a:	4830      	ldr	r0, [pc, #192]	; (800075c <MX_GPIO_Init+0x178>)
 800069c:	f002 f8a0 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	482a      	ldr	r0, [pc, #168]	; (8000760 <MX_GPIO_Init+0x17c>)
 80006b8:	f001 fee6 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80006bc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4820      	ldr	r0, [pc, #128]	; (8000758 <MX_GPIO_Init+0x174>)
 80006d6:	f001 fed7 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	481a      	ldr	r0, [pc, #104]	; (800075c <MX_GPIO_Init+0x178>)
 80006f2:	f001 fec9 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4814      	ldr	r0, [pc, #80]	; (800075c <MX_GPIO_Init+0x178>)
 800070a:	f001 febd 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800070e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000720:	230a      	movs	r3, #10
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MX_GPIO_Init+0x180>)
 800072c:	f001 feac 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <MX_GPIO_Init+0x180>)
 8000746:	f001 fe9f 	bl	8002488 <HAL_GPIO_Init>

}
 800074a:	bf00      	nop
 800074c:	3730      	adds	r7, #48	; 0x30
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400
 800075c:	40021800 	.word	0x40021800
 8000760:	40020800 	.word	0x40020800
 8000764:	40020000 	.word	0x40020000

08000768 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000772:	f3bf 8f6f 	isb	sy
}
 8000776:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <SCB_EnableICache+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000780:	f3bf 8f4f 	dsb	sy
}
 8000784:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000786:	f3bf 8f6f 	isb	sy
}
 800078a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <SCB_EnableICache+0x48>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <SCB_EnableICache+0x48>)
 8000792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000796:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000798:	f3bf 8f4f 	dsb	sy
}
 800079c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800079e:	f3bf 8f6f 	isb	sy
}
 80007a2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <SCB_EnableDCache+0x84>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007c2:	f3bf 8f4f 	dsb	sy
}
 80007c6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <SCB_EnableDCache+0x84>)
 80007ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ce:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	0b5b      	lsrs	r3, r3, #13
 80007d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007d8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007e2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	015a      	lsls	r2, r3, #5
 80007e8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007ec:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007f2:	4911      	ldr	r1, [pc, #68]	; (8000838 <SCB_EnableDCache+0x84>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1ef      	bne.n	80007e4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	60fa      	str	r2, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1e5      	bne.n	80007da <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800080e:	f3bf 8f4f 	dsb	sy
}
 8000812:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <SCB_EnableDCache+0x84>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <SCB_EnableDCache+0x84>)
 800081a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800081e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000826:	f3bf 8f6f 	isb	sy
}
 800082a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000840:	f7ff ff92 	bl	8000768 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000844:	f7ff ffb6 	bl	80007b4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fb10 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f810 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff fec8 	bl	80005e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000854:	f000 fa36 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000858:	f003 fe2e 	bl	80044b8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  udpServer_init();
 800085c:	f000 f9b2 	bl	8000bc4 <udpServer_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <main+0x30>)
 8000862:	f004 fa19 	bl	8004c98 <ethernetif_input>

	 	  sys_check_timeouts();
 8000866:	f00b fb3b 	bl	800bee0 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 800086a:	e7f9      	b.n	8000860 <main+0x24>
 800086c:	20000120 	.word	0x20000120

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2234      	movs	r2, #52	; 0x34
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f00e fc96 	bl	800f1b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000894:	f001 ffbe 	bl	8002814 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <SystemClock_Config+0xd8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <SystemClock_Config+0xd8>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <SystemClock_Config+0xd8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <SystemClock_Config+0xdc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a25      	ldr	r2, [pc, #148]	; (800094c <SystemClock_Config+0xdc>)
 80008b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <SystemClock_Config+0xdc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008e0:	23d8      	movs	r3, #216	; 0xd8
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008e8:	2309      	movs	r3, #9
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 ffed 	bl	80028d4 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000900:	f000 f826 	bl	8000950 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000904:	f001 ff96 	bl	8002834 <HAL_PWREx_EnableOverDrive>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800090e:	f000 f81f 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	230f      	movs	r3, #15
 8000914:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2302      	movs	r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800091e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2107      	movs	r1, #7
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fa7d 	bl	8002e30 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800093c:	f000 f808 	bl	8000950 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3750      	adds	r7, #80	; 0x50
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 fa82 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <ETH_IRQHandler+0x10>)
 80009fe:	f000 ffab 	bl	8001958 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000320c 	.word	0x2000320c

08000a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	return 1;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_kill>:

int _kill(int pid, int sig)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <_kill+0x20>)
 8000a28:	2216      	movs	r2, #22
 8000a2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20008af0 	.word	0x20008af0

08000a40 <_exit>:

void _exit (int status)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffe5 	bl	8000a1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a52:	e7fe      	b.n	8000a52 <_exit+0x12>

08000a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e00a      	b.n	8000a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a66:	f3af 8000 	nop.w
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf0      	blt.n	8000a66 <_read+0x12>
	}

return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e009      	b.n	8000ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf1      	blt.n	8000aa0 <_write+0x12>
	}
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_close>:

int _close(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aee:	605a      	str	r2, [r3, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_isatty>:

int _isatty(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	return 1;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d205      	bcs.n	8000b6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <_sbrk+0x6c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	20080000 	.word	0x20080000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000094 	.word	0x20000094
 8000b98:	20008b00 	.word	0x20008b00
 8000b9c:	20008af0 	.word	0x20008af0

08000ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000bca:	f00b fef7 	bl	800c9bc <udp_new>
 8000bce:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 0);
 8000bd0:	f64a 03c0 	movw	r3, #43200	; 0xa8c0
 8000bd4:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 1);  // 7 is the server UDP port
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4619      	mov	r1, r3
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f00b fd6d 	bl	800c6bc <udp_bind>
 8000be2:	4603      	mov	r3, r0
 8000be4:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000be6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d105      	bne.n	8000bfa <udpServer_init+0x36>
   {

	   udp_recv(upcb, udp_receive_callback, NULL);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4905      	ldr	r1, [pc, #20]	; (8000c08 <udpServer_init+0x44>)
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f00b fe80 	bl	800c8f8 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000bf8:	e002      	b.n	8000c00 <udpServer_init+0x3c>
	   udp_remove(upcb);
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f00b fe9c 	bl	800c938 <udp_remove>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08000c0d 	.word	0x08000c0d

08000c0c <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ba      	sub	sp, #232	; 0xe8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 8000c1a:	6838      	ldr	r0, [r7, #0]
 8000c1c:	f00d fac8 	bl	800e1b0 <ip4addr_ntoa>
 8000c20:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	char *Data  ;
	char buf[100];
	char buffer[100];

     //strncpy(buffer,(char*)p->payload,p->len);
     pbuf_copy_partial(p, buffer, p->len, 0);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	895a      	ldrh	r2, [r3, #10]
 8000c28:	f107 0114 	add.w	r1, r7, #20
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f005 fdbc 	bl	80067ac <pbuf_copy_partial>

     print(buffer);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f8d3 	bl	8000de4 <print>





	 int len = sprintf (buf,"Data from UDP SERVER %s", buffer);
 8000c3e:	f107 0214 	add.w	r2, r7, #20
 8000c42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c46:	491e      	ldr	r1, [pc, #120]	; (8000cc0 <udp_receive_callback+0xb4>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f00e fb0f 	bl	800f26c <siprintf>
 8000c4e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0



	 //allocate pbuf from RAM
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2036      	movs	r0, #54	; 0x36
 8000c60:	f005 f8c6 	bl	8005df0 <pbuf_alloc>
 8000c64:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	 //copy the data into the buffer
	pbuf_take(txBuf, buf, len);
 8000c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c72:	4619      	mov	r1, r3
 8000c74:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000c78:	f005 fe0a 	bl	8006890 <pbuf_take>

	 //Connect to the remote client
	udp_connect(upcb, addr, port);
 8000c7c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8000c80:	461a      	mov	r2, r3
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	68b8      	ldr	r0, [r7, #8]
 8000c86:	f00b fda1 	bl	800c7cc <udp_connect>

	 //Send a Reply to the Client
	udp_send(upcb, txBuf);
 8000c8a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f00b fb2a 	bl	800c2e8 <udp_send>

	 //free the UDP connection, so we can accept new clients
	udp_disconnect(upcb);
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f00b fe07 	bl	800c8a8 <udp_disconnect>

	 //Free the p_tx buffer
	pbuf_free(txBuf);
 8000c9a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000c9e:	f005 fb8b 	bl	80063b8 <pbuf_free>

	// Free the p buffer
	pbuf_free(p);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f005 fb88 	bl	80063b8 <pbuf_free>
	 memset(buffer,0,100);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2264      	movs	r2, #100	; 0x64
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00e fa7d 	bl	800f1b0 <memset>
}
 8000cb6:	bf00      	nop
 8000cb8:	37e8      	adds	r7, #232	; 0xe8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	080105e0 	.word	0x080105e0

08000cc4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART3_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART3_UART_Init+0x58>)
 8000d08:	f002 fee0 	bl	8003acc <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f7ff fe1d 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000098 	.word	0x20000098
 8000d20:	40004800 	.word	0x40004800

08000d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0ae      	sub	sp, #184	; 0xb8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2290      	movs	r2, #144	; 0x90
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00e fa33 	bl	800f1b0 <memset>
  if(uartHandle->Instance==USART3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d13c      	bne.n	8000dce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fa8a 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6e:	f7ff fdef 	bl	8000950 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0xbc>)
 8000dca:	f001 fb5d 	bl	8002488 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	37b8      	adds	r7, #184	; 0xb8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004800 	.word	0x40004800
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020c00 	.word	0x40020c00

08000de4 <print>:
}

/* USER CODE BEGIN 1 */

void print(char *s)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

       while(*s!='\0')
 8000dec:	e008      	b.n	8000e00 <print+0x1c>
       {

                     HAL_UART_Transmit(&huart3, (uint8_t*)s,1,1);
 8000dee:	2301      	movs	r3, #1
 8000df0:	2201      	movs	r2, #1
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <print+0x30>)
 8000df6:	f002 feb7 	bl	8003b68 <HAL_UART_Transmit>
                     s++;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
       while(*s!='\0')
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f2      	bne.n	8000dee <print+0xa>



       }

}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000098 	.word	0x20000098

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
	  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e42:	f7ff fead 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f00e f957 	bl	800f0f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fcf7 	bl	800083c <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e5c:	0801322c 	.word	0x0801322c
	  ldr r2, =_sbss
 8000e60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e64:	20008b00 	.word	0x20008b00

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x28>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f94f 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd68 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f967 	bl	800118a <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f92f 	bl	8001136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2000011c 	.word	0x2000011c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000011c 	.word	0x2000011c

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	05fa0000 	.word	0x05fa0000

08000fc8 <__NVIC_GetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80011b4:	4ba0      	ldr	r3, [pc, #640]	; (8001438 <HAL_ETH_Init+0x294>)
 80011b6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e180      	b.n	80014cc <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d106      	bne.n	80011e4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f003 fa9c 	bl	800471c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b95      	ldr	r3, [pc, #596]	; (800143c <HAL_ETH_Init+0x298>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_ETH_Init+0x298>)
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	6453      	str	r3, [r2, #68]	; 0x44
 80011f0:	4b92      	ldr	r3, [pc, #584]	; (800143c <HAL_ETH_Init+0x298>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011fc:	4b90      	ldr	r3, [pc, #576]	; (8001440 <HAL_ETH_Init+0x29c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a8f      	ldr	r2, [pc, #572]	; (8001440 <HAL_ETH_Init+0x29c>)
 8001202:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001206:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001208:	4b8d      	ldr	r3, [pc, #564]	; (8001440 <HAL_ETH_Init+0x29c>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	498b      	ldr	r1, [pc, #556]	; (8001440 <HAL_ETH_Init+0x29c>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800122c:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800122e:	f7ff fe77 	bl	8000f20 <HAL_GetTick>
 8001232:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001234:	e011      	b.n	800125a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001236:	f7ff fe73 	bl	8000f20 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001244:	d909      	bls.n	800125a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e138      	b.n	80014cc <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e4      	bne.n	8001236 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f023 031c 	bic.w	r3, r3, #28
 800127a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800127c:	f001 ffca 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8001280:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4a6f      	ldr	r2, [pc, #444]	; (8001444 <HAL_ETH_Init+0x2a0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d908      	bls.n	800129c <HAL_ETH_Init+0xf8>
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4a6e      	ldr	r2, [pc, #440]	; (8001448 <HAL_ETH_Init+0x2a4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d804      	bhi.n	800129c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e027      	b.n	80012ec <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4a6a      	ldr	r2, [pc, #424]	; (8001448 <HAL_ETH_Init+0x2a4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d908      	bls.n	80012b6 <HAL_ETH_Init+0x112>
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	4a64      	ldr	r2, [pc, #400]	; (8001438 <HAL_ETH_Init+0x294>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d204      	bcs.n	80012b6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f043 030c 	orr.w	r3, r3, #12
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e01a      	b.n	80012ec <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4a5f      	ldr	r2, [pc, #380]	; (8001438 <HAL_ETH_Init+0x294>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d303      	bcc.n	80012c6 <HAL_ETH_Init+0x122>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4a62      	ldr	r2, [pc, #392]	; (800144c <HAL_ETH_Init+0x2a8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d911      	bls.n	80012ea <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4a60      	ldr	r2, [pc, #384]	; (800144c <HAL_ETH_Init+0x2a8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d908      	bls.n	80012e0 <HAL_ETH_Init+0x13c>
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <HAL_ETH_Init+0x2ac>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d804      	bhi.n	80012e0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e005      	b.n	80012ec <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	e000      	b.n	80012ec <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012ea:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f8:	2100      	movs	r1, #0
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fc16 	bl	8001b2c <HAL_ETH_WritePHYRegister>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fdcb 	bl	8001ea8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0d6      	b.n	80014cc <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800131e:	20ff      	movs	r0, #255	; 0xff
 8001320:	f7ff fe0a 	bl	8000f38 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a4 	beq.w	8001476 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800132e:	f7ff fdf7 	bl	8000f20 <HAL_GetTick>
 8001332:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	461a      	mov	r2, r3
 800133a:	2101      	movs	r1, #1
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 fb8d 	bl	8001a5c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001342:	f7ff fded 	bl	8000f20 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d90f      	bls.n	8001374 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fda4 	bl	8001ea8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0ab      	b.n	80014cc <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0da      	beq.n	8001334 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800137e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fbd1 	bl	8001b2c <HAL_ETH_WritePHYRegister>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fd86 	bl	8001ea8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013a4:	2301      	movs	r3, #1
 80013a6:	e091      	b.n	80014cc <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013a8:	f7ff fdba 	bl	8000f20 <HAL_GetTick>
 80013ac:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	461a      	mov	r2, r3
 80013b4:	2101      	movs	r1, #1
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fb50 	bl	8001a5c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013bc:	f7ff fdb0 	bl	8000f20 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d90f      	bls.n	80013ee <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013d2:	6939      	ldr	r1, [r7, #16]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fd67 	bl	8001ea8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e06e      	b.n	80014cc <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0da      	beq.n	80013ae <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	461a      	mov	r2, r3
 80013fe:	2110      	movs	r1, #16
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fb2b 	bl	8001a5c <HAL_ETH_ReadPHYRegister>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00b      	beq.n	8001424 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fd48 	bl	8001ea8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001420:	2301      	movs	r3, #1
 8001422:	e053      	b.n	80014cc <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	e010      	b.n	800145a <HAL_ETH_Init+0x2b6>
 8001438:	03938700 	.word	0x03938700
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	01312cff 	.word	0x01312cff
 8001448:	02160ebf 	.word	0x02160ebf
 800144c:	05f5e0ff 	.word	0x05f5e0ff
 8001450:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e026      	b.n	80014ba <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e021      	b.n	80014ba <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001486:	4313      	orrs	r3, r2
 8001488:	b29b      	uxth	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fb4c 	bl	8001b2c <HAL_ETH_WritePHYRegister>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800149e:	6939      	ldr	r1, [r7, #16]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fd01 	bl	8001ea8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00c      	b.n	80014cc <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014b2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014b6:	f7ff fd3f 	bl	8000f38 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014ba:	6939      	ldr	r1, [r7, #16]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fcf3 	bl	8001ea8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ETH_DMATxDescListInit+0x20>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e051      	b.n	8001598 <HAL_ETH_DMATxDescListInit+0xc4>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e030      	b.n	8001572 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001520:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	d208      	bcs.n	8001566 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	015b      	lsls	r3, r3, #5
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	461a      	mov	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	e002      	b.n	800156c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3ca      	bcc.n	8001510 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001584:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_ETH_DMARxDescListInit+0x20>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e055      	b.n	8001670 <HAL_ETH_DMARxDescListInit+0xcc>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e034      	b.n	800164a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	015b      	lsls	r3, r3, #5
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015f0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015f8:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	461a      	mov	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	d208      	bcs.n	800163e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	461a      	mov	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	e002      	b.n	8001644 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3c6      	bcc.n	80015e0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800165c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ETH_TransmitFrame+0x24>
 800169c:	2302      	movs	r3, #2
 800169e:	e0cc      	b.n	800183a <HAL_ETH_TransmitFrame+0x1be>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0b7      	b.n	800183a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da09      	bge.n	80016e8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2212      	movs	r2, #18
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0a8      	b.n	800183a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d915      	bls.n	800171e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_ETH_TransmitFrame+0x1cc>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0a9b      	lsrs	r3, r3, #10
 80016fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_ETH_TransmitFrame+0x1cc>)
 8001702:	fba3 1302 	umull	r1, r3, r3, r2
 8001706:	0a9b      	lsrs	r3, r3, #10
 8001708:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e001      	b.n	8001722 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d11c      	bne.n	8001762 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001736:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001742:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001752:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001760:	e04b      	b.n	80017fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	e044      	b.n	80017f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001776:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d107      	bne.n	800178e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800178c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001796:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3b01      	subs	r3, #1
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d116      	bne.n	80017d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_ETH_TransmitFrame+0x1d0>)
 80017b6:	fb03 f202 	mul.w	r2, r3, r2
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017ce:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	3301      	adds	r3, #1
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3b6      	bcc.n	8001768 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001814:	461a      	mov	r2, r3
 8001816:	2304      	movs	r3, #4
 8001818:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	461a      	mov	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	ac02b00b 	.word	0xac02b00b
 800184c:	fffffa0c 	.word	0xfffffa0c

08001850 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ETH_GetReceivedFrame+0x1a>
 8001866:	2302      	movs	r3, #2
 8001868:	e070      	b.n	800194c <HAL_ETH_GetReceivedFrame+0xfc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db5a      	blt.n	800193a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d030      	beq.n	80018f4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d103      	bne.n	80018ac <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018c0:	3b04      	subs	r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e02b      	b.n	800194c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
 8001922:	e00a      	b.n	800193a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	d112      	bne.n	8001998 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f85e 	bl	8001a34 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	461a      	mov	r2, r3
 8001982:	2340      	movs	r3, #64	; 0x40
 8001984:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001996:	e01a      	b.n	80019ce <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d111      	bne.n	80019ce <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f838 	bl	8001a20 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b8:	461a      	mov	r2, r3
 80019ba:	2301      	movs	r3, #1
 80019bc:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	461a      	mov	r2, r3
 80019d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019dc:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f0:	d112      	bne.n	8001a18 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f828 	bl	8001a48 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	461a      	mov	r2, r3
 8001a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a06:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	460b      	mov	r3, r1
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b82      	cmp	r3, #130	; 0x82
 8001a7c:	d101      	bne.n	8001a82 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e050      	b.n	8001b24 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2282      	movs	r2, #130	; 0x82
 8001a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8a1b      	ldrh	r3, [r3, #16]
 8001a9e:	02db      	lsls	r3, r3, #11
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001aa8:	897b      	ldrh	r3, [r7, #10]
 8001aaa:	019b      	lsls	r3, r3, #6
 8001aac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f023 0302 	bic.w	r3, r3, #2
 8001abc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ace:	f7ff fa27 	bl	8000f20 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad4:	e015      	b.n	8001b02 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001ad6:	f7ff fa23 	bl	8000f20 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d309      	bcc.n	8001afa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e014      	b.n	8001b24 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e4      	bne.n	8001ad6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	460b      	mov	r3, r1
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b42      	cmp	r3, #66	; 0x42
 8001b4c:	d101      	bne.n	8001b52 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e04e      	b.n	8001bf0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2242      	movs	r2, #66	; 0x42
 8001b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 031c 	and.w	r3, r3, #28
 8001b68:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8a1b      	ldrh	r3, [r3, #16]
 8001b6e:	02db      	lsls	r3, r3, #11
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	019b      	lsls	r3, r3, #6
 8001b7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba8:	f7ff f9ba 	bl	8000f20 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bae:	e015      	b.n	8001bdc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bb0:	f7ff f9b6 	bl	8000f20 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	d309      	bcc.n	8001bd4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e00d      	b.n	8001bf0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e4      	bne.n	8001bb0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ETH_Start+0x16>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e01f      	b.n	8001c4e <HAL_ETH_Start+0x56>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fb40 	bl	80022a4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb77 	bl	8002318 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fc06 	bl	800243c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fbab 	bl	800238c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fbd4 	bl	80023e4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_ETH_Stop+0x16>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e01f      	b.n	8001cac <HAL_ETH_Stop+0x56>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fb9b 	bl	80023b8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fbc4 	bl	8002410 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fb62 	bl	8002352 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fbd4 	bl	800243c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb22 	bl	80022de <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_ETH_ConfigMAC+0x1c>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0e4      	b.n	8001e9a <HAL_ETH_ConfigMAC+0x1e6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80b1 	beq.w	8001e4a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d00:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d06:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d0c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d12:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d18:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d1e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d24:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d2a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d30:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d36:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d3c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d42:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff f8ec 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d70:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d76:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d7c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d82:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d88:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d8e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d9a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d9c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff f8c6 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dbc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dc6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001de4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001dea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001df0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001df6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001dfc:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff f88f 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff f87c 	bl	8000f38 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	61da      	str	r2, [r3, #28]
 8001e48:	e01e      	b.n	8001e88 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e58:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff f85c 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	ff20810f 	.word	0xff20810f

08001ea8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0b0      	sub	sp, #192	; 0xc0
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ef4:	e001      	b.n	8001efa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f04:	2300      	movs	r3, #0
 8001f06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f80:	4ba9      	ldr	r3, [pc, #676]	; (8002228 <ETH_MACDMAConfig+0x380>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fa2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fa8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fb0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fb4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fb8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fbc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe ffab 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ff0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ff4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ffa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002000:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002002:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002006:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800200c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002010:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002018:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800201a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002026:	2001      	movs	r0, #1
 8002028:	f7fe ff86 	bl	8000f38 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002034:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800203e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002048:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002054:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002058:	f64f 7341 	movw	r3, #65345	; 0xff41
 800205c:	4013      	ands	r3, r2
 800205e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002066:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002068:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800206c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800206e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002072:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002078:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800207a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800207e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002084:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002086:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002098:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7fe ff47 	bl	8000f38 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7fe ff32 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80020ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002102:	2304      	movs	r3, #4
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800210c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002112:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002122:	2300      	movs	r3, #0
 8002124:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002126:	2300      	movs	r3, #0
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002138:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <ETH_MACDMAConfig+0x384>)
 800213e:	4013      	ands	r3, r2
 8002140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002144:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002146:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002148:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800214a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800214c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800214e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002150:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002152:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002154:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002156:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002158:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800215a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800215c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002160:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002164:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002166:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	461a      	mov	r2, r3
 800217a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800217e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800218e:	2001      	movs	r0, #1
 8002190:	f7fe fed2 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219c:	461a      	mov	r2, r3
 800219e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021a2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021a8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021ac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021b0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021b4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80021b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021ba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80021be:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021cc:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f7fe feab 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	461a      	mov	r2, r3
 80021ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021f0:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10b      	bne.n	8002212 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002202:	69d9      	ldr	r1, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <ETH_MACDMAConfig+0x388>)
 800220a:	430b      	orrs	r3, r1
 800220c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002210:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	461a      	mov	r2, r3
 8002218:	2100      	movs	r1, #0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f80a 	bl	8002234 <ETH_MACAddressConfig>
}
 8002220:	bf00      	nop
 8002222:	37c0      	adds	r7, #192	; 0xc0
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	ff20810f 	.word	0xff20810f
 800222c:	f8de3f23 	.word	0xf8de3f23
 8002230:	00010040 	.word	0x00010040

08002234 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3305      	adds	r3, #5
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	3204      	adds	r2, #4
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <ETH_MACAddressConfig+0x68>)
 8002256:	4413      	add	r3, r2
 8002258:	461a      	mov	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3303      	adds	r3, #3
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	061a      	lsls	r2, r3, #24
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3302      	adds	r3, #2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	4313      	orrs	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <ETH_MACAddressConfig+0x6c>)
 8002286:	4413      	add	r3, r2
 8002288:	461a      	mov	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	6013      	str	r3, [r2, #0]
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40028040 	.word	0x40028040
 80022a0:	40028044 	.word	0x40028044

080022a4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0208 	orr.w	r2, r2, #8
 80022be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7fe fe35 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002302:	2001      	movs	r0, #1
 8002304:	f7fe fe18 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0204 	orr.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233c:	2001      	movs	r0, #1
 800233e:	f7fe fdfb 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0204 	bic.w	r2, r2, #4
 800236c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002376:	2001      	movs	r0, #1
 8002378:	f7fe fdde 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023aa:	6193      	str	r3, [r2, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023d6:	6193      	str	r3, [r2, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002402:	6193      	str	r3, [r2, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	f023 0302 	bic.w	r3, r3, #2
 800242a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800242e:	6193      	str	r3, [r2, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800245a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800245e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800246c:	2001      	movs	r0, #1
 800246e:	f7fe fd63 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	6193      	str	r3, [r2, #24]
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e175      	b.n	8002794 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8164 	bne.w	800278e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x56>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80be 	beq.w	800278e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_GPIO_Init+0x324>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a65      	ldr	r2, [pc, #404]	; (80027ac <HAL_GPIO_Init+0x324>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_GPIO_Init+0x324>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800262a:	4a61      	ldr	r2, [pc, #388]	; (80027b0 <HAL_GPIO_Init+0x328>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_GPIO_Init+0x32c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d037      	beq.n	80026c6 <HAL_GPIO_Init+0x23e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_GPIO_Init+0x330>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_GPIO_Init+0x23a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02b      	beq.n	80026be <HAL_GPIO_Init+0x236>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_GPIO_Init+0x338>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x232>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_GPIO_Init+0x33c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x22e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a53      	ldr	r2, [pc, #332]	; (80027c8 <HAL_GPIO_Init+0x340>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x22a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_GPIO_Init+0x344>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x226>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x348>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x222>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x34c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x21e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x350>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x21a>
 800269e:	2309      	movs	r3, #9
 80026a0:	e012      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026a2:	230a      	movs	r3, #10
 80026a4:	e010      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026a6:	2308      	movs	r3, #8
 80026a8:	e00e      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e00c      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00a      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x240>
 80026c6:	2300      	movs	r3, #0
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_GPIO_Init+0x328>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_GPIO_Init+0x354>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_GPIO_Init+0x354>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_GPIO_Init+0x354>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_GPIO_Init+0x354>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_GPIO_Init+0x354>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275e:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <HAL_GPIO_Init+0x354>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_GPIO_Init+0x354>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_GPIO_Init+0x354>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	f67f ae86 	bls.w	80024a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021400 	.word	0x40021400
 80027cc:	40021800 	.word	0x40021800
 80027d0:	40021c00 	.word	0x40021c00
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40022400 	.word	0x40022400
 80027dc:	40013c00 	.word	0x40013c00

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40007000 	.word	0x40007000

08002834 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002862:	f7fe fb5d 	bl	8000f20 <HAL_GetTick>
 8002866:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002868:	e009      	b.n	800287e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800286a:	f7fe fb59 	bl	8000f20 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002878:	d901      	bls.n	800287e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e022      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d1ee      	bne.n	800286a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002896:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002898:	f7fe fb42 	bl	8000f20 <HAL_GetTick>
 800289c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800289e:	e009      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a0:	f7fe fb3e 	bl	8000f20 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ae:	d901      	bls.n	80028b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e007      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028c0:	d1ee      	bne.n	80028a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e29b      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b96      	ldr	r3, [pc, #600]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002904:	4b93      	ldr	r3, [pc, #588]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d112      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
 8002910:	4b90      	ldr	r3, [pc, #576]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b8d      	ldr	r3, [pc, #564]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x130>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e275      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x7a>
 8002940:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a83      	ldr	r2, [pc, #524]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x9c>
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7e      	ldr	r2, [pc, #504]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7b      	ldr	r2, [pc, #492]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xc0>
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a72      	ldr	r2, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6e      	ldr	r2, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fab4 	bl	8000f20 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fab0 	bl	8000f20 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e229      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xe8>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe faa0 	bl	8000f20 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fa9c 	bl	8000f20 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e215      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x110>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d069      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x190>
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x17a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1e9      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	493d      	ldr	r1, [pc, #244]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e040      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d023      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fa52 	bl	8000f20 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe fa4e 	bl	8000f20 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1c7      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4929      	ldr	r1, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fa2e 	bl	8000f20 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fa2a 	bl	8000f20 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1a3      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d038      	beq.n	8002b64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fa0b 	bl	8000f20 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fa07 	bl	8000f20 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e180      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x23a>
 8002b2c:	e01a      	b.n	8002b64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe f9f1 	bl	8000f20 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b42:	f7fe f9ed 	bl	8000f20 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d903      	bls.n	8002b58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e166      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
 8002b54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a4 	beq.w	8002cba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a88      	ldr	r2, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b86      	ldr	r3, [pc, #536]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	4b83      	ldr	r3, [pc, #524]	; (8002da8 <HAL_RCC_OscConfig+0x4d4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ba6:	4b80      	ldr	r3, [pc, #512]	; (8002da8 <HAL_RCC_OscConfig+0x4d4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7f      	ldr	r2, [pc, #508]	; (8002da8 <HAL_RCC_OscConfig+0x4d4>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe f9b5 	bl	8000f20 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe f9b1 	bl	8000f20 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e12a      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCC_OscConfig+0x4d4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x31a>
 8002be0:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	e02d      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x33c>
 8002bf6:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	e01c      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x35e>
 8002c18:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a61      	ldr	r2, [pc, #388]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e00b      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d015      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe f965 	bl	8000f20 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe f961 	bl	8000f20 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0d8      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCC_OscConfig+0x386>
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f94f 	bl	8000f20 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe f94b 	bl	8000f20 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0c2      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d105      	bne.n	8002cba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80ae 	beq.w	8002e20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d06d      	beq.n	8002dac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d14b      	bne.n	8002d70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f91c 	bl	8000f20 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe f918 	bl	8000f20 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e091      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	071b      	lsls	r3, r3, #28
 8002d36:	491b      	ldr	r1, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f8ea 	bl	8000f20 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe f8e6 	bl	8000f20 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e05f      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x47c>
 8002d6e:	e057      	b.n	8002e20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f8d0 	bl	8000f20 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe f8cc 	bl	8000f20 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e045      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4b0>
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x54c>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_RCC_OscConfig+0x558>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d030      	beq.n	8002e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d129      	bne.n	8002e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d122      	bne.n	8002e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d119      	bne.n	8002e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d10f      	bne.n	8002e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0d0      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 020f 	bic.w	r2, r3, #15
 8002e5e:	4965      	ldr	r1, [pc, #404]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d040      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d115      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e073      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4936      	ldr	r1, [pc, #216]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fd fffc 	bl	8000f20 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fd fff8 	bl	8000f20 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e053      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d210      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1d4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd ff58 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	08012fd8 	.word	0x08012fd8
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b094      	sub	sp, #80	; 0x50
 800300e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
 8003014:	2300      	movs	r3, #0
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003018:	2300      	movs	r3, #0
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003020:	4b79      	ldr	r3, [pc, #484]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	d00d      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x40>
 800302c:	2b08      	cmp	r3, #8
 800302e:	f200 80e1 	bhi.w	80031f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003036:	2b04      	cmp	r3, #4
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x3a>
 800303a:	e0db      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_GetSysClockFreq+0x204>)
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003040:	e0db      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_GetSysClockFreq+0x208>)
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003046:	e0d8      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	2200      	movs	r2, #0
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
 8003068:	63fa      	str	r2, [r7, #60]	; 0x3c
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
 8003072:	2300      	movs	r3, #0
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
 8003076:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308c:	0150      	lsls	r0, r2, #5
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4621      	mov	r1, r4
 8003094:	1a51      	subs	r1, r2, r1
 8003096:	6139      	str	r1, [r7, #16]
 8003098:	4629      	mov	r1, r5
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030ac:	4659      	mov	r1, fp
 80030ae:	018b      	lsls	r3, r1, #6
 80030b0:	4651      	mov	r1, sl
 80030b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b6:	4651      	mov	r1, sl
 80030b8:	018a      	lsls	r2, r1, #6
 80030ba:	4651      	mov	r1, sl
 80030bc:	ebb2 0801 	subs.w	r8, r2, r1
 80030c0:	4659      	mov	r1, fp
 80030c2:	eb63 0901 	sbc.w	r9, r3, r1
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030da:	4690      	mov	r8, r2
 80030dc:	4699      	mov	r9, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	eb18 0303 	adds.w	r3, r8, r3
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	462b      	mov	r3, r5
 80030e8:	eb49 0303 	adc.w	r3, r9, r3
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030fa:	4629      	mov	r1, r5
 80030fc:	024b      	lsls	r3, r1, #9
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003104:	4621      	mov	r1, r4
 8003106:	024a      	lsls	r2, r1, #9
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
 8003112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003118:	f7fd f8e2 	bl	80002e0 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003124:	e058      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	2200      	movs	r2, #0
 800312e:	4618      	mov	r0, r3
 8003130:	4611      	mov	r1, r2
 8003132:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
 800313c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003140:	4642      	mov	r2, r8
 8003142:	464b      	mov	r3, r9
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	0159      	lsls	r1, r3, #5
 800314e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003152:	0150      	lsls	r0, r2, #5
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4641      	mov	r1, r8
 800315a:	ebb2 0a01 	subs.w	sl, r2, r1
 800315e:	4649      	mov	r1, r9
 8003160:	eb63 0b01 	sbc.w	fp, r3, r1
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003178:	ebb2 040a 	subs.w	r4, r2, sl
 800317c:	eb63 050b 	sbc.w	r5, r3, fp
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	00eb      	lsls	r3, r5, #3
 800318a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318e:	00e2      	lsls	r2, r4, #3
 8003190:	4614      	mov	r4, r2
 8003192:	461d      	mov	r5, r3
 8003194:	4643      	mov	r3, r8
 8003196:	18e3      	adds	r3, r4, r3
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	464b      	mov	r3, r9
 800319c:	eb45 0303 	adc.w	r3, r5, r3
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ae:	4629      	mov	r1, r5
 80031b0:	028b      	lsls	r3, r1, #10
 80031b2:	4621      	mov	r1, r4
 80031b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b8:	4621      	mov	r1, r4
 80031ba:	028a      	lsls	r2, r1, #10
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c2:	2200      	movs	r2, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	61fa      	str	r2, [r7, #28]
 80031c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031cc:	f7fd f888 	bl	80002e0 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	3301      	adds	r3, #1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80031e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetSysClockFreq+0x204>)
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3750      	adds	r7, #80	; 0x50
 8003200:	46bd      	mov	sp, r7
 8003202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	00f42400 	.word	0x00f42400
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003230:	f7ff fff0 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	08012fe8 	.word	0x08012fe8

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003258:	f7ff ffdc 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0b5b      	lsrs	r3, r3, #13
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	08012fe8 	.word	0x08012fe8

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032a4:	4b69      	ldr	r3, [pc, #420]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a68      	ldr	r2, [pc, #416]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032ae:	6093      	str	r3, [r2, #8]
 80032b0:	4b66      	ldr	r3, [pc, #408]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	4964      	ldr	r1, [pc, #400]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d017      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d6:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	4959      	ldr	r1, [pc, #356]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f4:	d101      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d017      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003312:	4b4e      	ldr	r3, [pc, #312]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	494a      	ldr	r1, [pc, #296]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003330:	d101      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 808b 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a39      	ldr	r2, [pc, #228]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
 800336c:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a34      	ldr	r2, [pc, #208]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003384:	f7fd fdcc 	bl	8000f20 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fdc8 	bl	8000f20 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e38f      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d035      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d02e      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033d2:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a1a      	ldr	r2, [pc, #104]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d114      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd fd90 	bl	8000f20 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fd fd8c 	bl	8000f20 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e351      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ee      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003432:	d111      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003442:	400b      	ands	r3, r1
 8003444:	4901      	ldr	r1, [pc, #4]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
 800344a:	e00b      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000
 8003454:	0ffffcff 	.word	0x0ffffcff
 8003458:	4bac      	ldr	r3, [pc, #688]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4aab      	ldr	r2, [pc, #684]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003462:	6093      	str	r3, [r2, #8]
 8003464:	4ba9      	ldr	r3, [pc, #676]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	49a6      	ldr	r1, [pc, #664]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	4313      	orrs	r3, r2
 8003474:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003482:	4ba2      	ldr	r3, [pc, #648]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003488:	4aa0      	ldr	r2, [pc, #640]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800348e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003492:	4b9e      	ldr	r3, [pc, #632]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003494:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	499b      	ldr	r1, [pc, #620]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b0:	4b96      	ldr	r3, [pc, #600]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034be:	4993      	ldr	r1, [pc, #588]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d2:	4b8e      	ldr	r3, [pc, #568]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	498a      	ldr	r1, [pc, #552]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f4:	4b85      	ldr	r3, [pc, #532]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	4982      	ldr	r1, [pc, #520]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4979      	ldr	r1, [pc, #484]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003538:	4b74      	ldr	r3, [pc, #464]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4971      	ldr	r1, [pc, #452]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355a:	4b6c      	ldr	r3, [pc, #432]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f023 020c 	bic.w	r2, r3, #12
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	4968      	ldr	r1, [pc, #416]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800357c:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	4960      	ldr	r1, [pc, #384]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800359e:	4b5b      	ldr	r3, [pc, #364]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	4957      	ldr	r1, [pc, #348]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c0:	4b52      	ldr	r3, [pc, #328]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	494f      	ldr	r1, [pc, #316]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035e2:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	4946      	ldr	r1, [pc, #280]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	493e      	ldr	r1, [pc, #248]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	4935      	ldr	r1, [pc, #212]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003656:	492d      	ldr	r1, [pc, #180]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d011      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800366a:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003678:	4924      	ldr	r1, [pc, #144]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	4914      	ldr	r1, [pc, #80]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00f      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003700:	4902      	ldr	r1, [pc, #8]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800371c:	4b8a      	ldr	r3, [pc, #552]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800371e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	4986      	ldr	r1, [pc, #536]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003740:	4b81      	ldr	r3, [pc, #516]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003746:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003750:	497d      	ldr	r1, [pc, #500]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d006      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80d6 	beq.w	8003918 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800376c:	4b76      	ldr	r3, [pc, #472]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a75      	ldr	r2, [pc, #468]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003778:	f7fd fbd2 	bl	8000f20 <HAL_GetTick>
 800377c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003780:	f7fd fbce 	bl	8000f20 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e195      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003792:	4b6d      	ldr	r3, [pc, #436]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d021      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11d      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037b2:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037c0:	4b61      	ldr	r3, [pc, #388]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c6:	0e1b      	lsrs	r3, r3, #24
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	019a      	lsls	r2, r3, #6
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	071b      	lsls	r3, r3, #28
 80037e6:	4958      	ldr	r1, [pc, #352]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02e      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003818:	d129      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800381a:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003828:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	0f1b      	lsrs	r3, r3, #28
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	019a      	lsls	r2, r3, #6
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	061b      	lsls	r3, r3, #24
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	071b      	lsls	r3, r3, #28
 800384e:	493e      	ldr	r1, [pc, #248]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003856:	4b3c      	ldr	r3, [pc, #240]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800385c:	f023 021f 	bic.w	r2, r3, #31
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	3b01      	subs	r3, #1
 8003866:	4938      	ldr	r1, [pc, #224]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01d      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	0e1b      	lsrs	r3, r3, #24
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388e:	0f1b      	lsrs	r3, r3, #28
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	019a      	lsls	r2, r3, #6
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	431a      	orrs	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	061b      	lsls	r3, r3, #24
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	071b      	lsls	r3, r3, #28
 80038ae:	4926      	ldr	r1, [pc, #152]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	019a      	lsls	r2, r3, #6
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	491a      	ldr	r1, [pc, #104]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038e6:	4b18      	ldr	r3, [pc, #96]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f2:	f7fd fb15 	bl	8000f20 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038fa:	f7fd fb11 	bl	8000f20 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0d8      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b01      	cmp	r3, #1
 800391c:	f040 80ce 	bne.w	8003abc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fd faf8 	bl	8000f20 <HAL_GetTick>
 8003930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003932:	e00b      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003934:	f7fd faf4 	bl	8000f20 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d904      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0bb      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800394c:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003958:	d0ec      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02e      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d12a      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003990:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	0f1b      	lsrs	r3, r3, #28
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	019a      	lsls	r2, r3, #6
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	061b      	lsls	r3, r3, #24
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	4944      	ldr	r1, [pc, #272]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	493d      	ldr	r1, [pc, #244]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d022      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ec:	d11d      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039ee:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	0e1b      	lsrs	r3, r3, #24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	0f1b      	lsrs	r3, r3, #28
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	4929      	ldr	r1, [pc, #164]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d028      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	0e1b      	lsrs	r3, r3, #24
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a44:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4917      	ldr	r1, [pc, #92]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0e      	ldr	r2, [pc, #56]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a94:	f7fd fa44 	bl	8000f20 <HAL_GetTick>
 8003a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a9c:	f7fd fa40 	bl	8000f20 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e007      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d1ef      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e040      	b.n	8003b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd f918 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8c0 	bl	8003c90 <UART_SetConfig>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e022      	b.n	8003b60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fb18 	bl	8004158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb9f 	bl	800429c <UART_CheckIdleState>
 8003b5e:	4603      	mov	r3, r0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 8081 	bne.w	8003c84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Transmit+0x26>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e079      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Transmit+0x38>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e072      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2221      	movs	r2, #33	; 0x21
 8003bb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb6:	f7fd f9b3 	bl	8000f20 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd4:	d108      	bne.n	8003be8 <HAL_UART_Transmit+0x80>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d104      	bne.n	8003be8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e003      	b.n	8003bf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bf8:	e02c      	b.n	8003c54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fb92 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e038      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	e007      	b.n	8003c42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1cc      	bne.n	8003bfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb5f 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e005      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4ba6      	ldr	r3, [pc, #664]	; (8003f54 <UART_SetConfig+0x2c4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	6979      	ldr	r1, [r7, #20]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a94      	ldr	r2, [pc, #592]	; (8003f58 <UART_SetConfig+0x2c8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d120      	bne.n	8003d4e <UART_SetConfig+0xbe>
 8003d0c:	4b93      	ldr	r3, [pc, #588]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d816      	bhi.n	8003d48 <UART_SetConfig+0xb8>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <UART_SetConfig+0x90>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d3d 	.word	0x08003d3d
 8003d28:	08003d37 	.word	0x08003d37
 8003d2c:	08003d43 	.word	0x08003d43
 8003d30:	2301      	movs	r3, #1
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e150      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e14d      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e14a      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d42:	2308      	movs	r3, #8
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e147      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e144      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d132      	bne.n	8003dbe <UART_SetConfig+0x12e>
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d828      	bhi.n	8003db8 <UART_SetConfig+0x128>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0xdc>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003db9 	.word	0x08003db9
 8003d74:	08003db9 	.word	0x08003db9
 8003d78:	08003db9 	.word	0x08003db9
 8003d7c:	08003dad 	.word	0x08003dad
 8003d80:	08003db9 	.word	0x08003db9
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003db9 	.word	0x08003db9
 8003d8c:	08003da7 	.word	0x08003da7
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003db9 	.word	0x08003db9
 8003d9c:	08003db3 	.word	0x08003db3
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e118      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e115      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e112      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e10f      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e10c      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a68      	ldr	r2, [pc, #416]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d120      	bne.n	8003e0a <UART_SetConfig+0x17a>
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dd2:	2b30      	cmp	r3, #48	; 0x30
 8003dd4:	d013      	beq.n	8003dfe <UART_SetConfig+0x16e>
 8003dd6:	2b30      	cmp	r3, #48	; 0x30
 8003dd8:	d814      	bhi.n	8003e04 <UART_SetConfig+0x174>
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d009      	beq.n	8003df2 <UART_SetConfig+0x162>
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d810      	bhi.n	8003e04 <UART_SetConfig+0x174>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x15c>
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d006      	beq.n	8003df8 <UART_SetConfig+0x168>
 8003dea:	e00b      	b.n	8003e04 <UART_SetConfig+0x174>
 8003dec:	2300      	movs	r3, #0
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e0f2      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003df2:	2302      	movs	r3, #2
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e0ef      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e0ec      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e0e9      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e0e6      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a56      	ldr	r2, [pc, #344]	; (8003f68 <UART_SetConfig+0x2d8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d120      	bne.n	8003e56 <UART_SetConfig+0x1c6>
 8003e14:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e20:	d013      	beq.n	8003e4a <UART_SetConfig+0x1ba>
 8003e22:	2bc0      	cmp	r3, #192	; 0xc0
 8003e24:	d814      	bhi.n	8003e50 <UART_SetConfig+0x1c0>
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d009      	beq.n	8003e3e <UART_SetConfig+0x1ae>
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d810      	bhi.n	8003e50 <UART_SetConfig+0x1c0>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <UART_SetConfig+0x1a8>
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d006      	beq.n	8003e44 <UART_SetConfig+0x1b4>
 8003e36:	e00b      	b.n	8003e50 <UART_SetConfig+0x1c0>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e0cc      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e0c9      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e44:	2304      	movs	r3, #4
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e0c6      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e0c3      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e50:	2310      	movs	r3, #16
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e0c0      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a44      	ldr	r2, [pc, #272]	; (8003f6c <UART_SetConfig+0x2dc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d125      	bne.n	8003eac <UART_SetConfig+0x21c>
 8003e60:	4b3e      	ldr	r3, [pc, #248]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6e:	d017      	beq.n	8003ea0 <UART_SetConfig+0x210>
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e74:	d817      	bhi.n	8003ea6 <UART_SetConfig+0x216>
 8003e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7a:	d00b      	beq.n	8003e94 <UART_SetConfig+0x204>
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e80:	d811      	bhi.n	8003ea6 <UART_SetConfig+0x216>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <UART_SetConfig+0x1fe>
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d006      	beq.n	8003e9a <UART_SetConfig+0x20a>
 8003e8c:	e00b      	b.n	8003ea6 <UART_SetConfig+0x216>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e0a1      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e94:	2302      	movs	r3, #2
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e09e      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e09b      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e098      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e095      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <UART_SetConfig+0x2e0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d125      	bne.n	8003f02 <UART_SetConfig+0x272>
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ec0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec4:	d017      	beq.n	8003ef6 <UART_SetConfig+0x266>
 8003ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eca:	d817      	bhi.n	8003efc <UART_SetConfig+0x26c>
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d00b      	beq.n	8003eea <UART_SetConfig+0x25a>
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed6:	d811      	bhi.n	8003efc <UART_SetConfig+0x26c>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <UART_SetConfig+0x254>
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d006      	beq.n	8003ef0 <UART_SetConfig+0x260>
 8003ee2:	e00b      	b.n	8003efc <UART_SetConfig+0x26c>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e076      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003eea:	2302      	movs	r3, #2
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e073      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e070      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e06d      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e06a      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <UART_SetConfig+0x2e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d138      	bne.n	8003f7e <UART_SetConfig+0x2ee>
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f1a:	d017      	beq.n	8003f4c <UART_SetConfig+0x2bc>
 8003f1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f20:	d82a      	bhi.n	8003f78 <UART_SetConfig+0x2e8>
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d00b      	beq.n	8003f40 <UART_SetConfig+0x2b0>
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d824      	bhi.n	8003f78 <UART_SetConfig+0x2e8>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <UART_SetConfig+0x2aa>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d006      	beq.n	8003f46 <UART_SetConfig+0x2b6>
 8003f38:	e01e      	b.n	8003f78 <UART_SetConfig+0x2e8>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e04b      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f40:	2302      	movs	r3, #2
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e048      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f46:	2304      	movs	r3, #4
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e045      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e042      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f52:	bf00      	nop
 8003f54:	efff69f3 	.word	0xefff69f3
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40004400 	.word	0x40004400
 8003f64:	40004800 	.word	0x40004800
 8003f68:	40004c00 	.word	0x40004c00
 8003f6c:	40005000 	.word	0x40005000
 8003f70:	40011400 	.word	0x40011400
 8003f74:	40007800 	.word	0x40007800
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e02c      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a72      	ldr	r2, [pc, #456]	; (800414c <UART_SetConfig+0x4bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d125      	bne.n	8003fd4 <UART_SetConfig+0x344>
 8003f88:	4b71      	ldr	r3, [pc, #452]	; (8004150 <UART_SetConfig+0x4c0>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f96:	d017      	beq.n	8003fc8 <UART_SetConfig+0x338>
 8003f98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f9c:	d817      	bhi.n	8003fce <UART_SetConfig+0x33e>
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa2:	d00b      	beq.n	8003fbc <UART_SetConfig+0x32c>
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa8:	d811      	bhi.n	8003fce <UART_SetConfig+0x33e>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <UART_SetConfig+0x326>
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d006      	beq.n	8003fc2 <UART_SetConfig+0x332>
 8003fb4:	e00b      	b.n	8003fce <UART_SetConfig+0x33e>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e00d      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e00a      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e007      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e004      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fce:	2310      	movs	r3, #16
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e001      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe0:	d15b      	bne.n	800409a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fe2:	7ffb      	ldrb	r3, [r7, #31]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d828      	bhi.n	800403a <UART_SetConfig+0x3aa>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x360>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7ff f90a 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8004018:	61b8      	str	r0, [r7, #24]
        break;
 800401a:	e013      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7ff f91a 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <UART_SetConfig+0x4c4>)
 8004026:	61bb      	str	r3, [r7, #24]
        break;
 8004028:	e00c      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe ffed 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 800402e:	61b8      	str	r0, [r7, #24]
        break;
 8004030:	e008      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61bb      	str	r3, [r7, #24]
        break;
 8004038:	e004      	b.n	8004044 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	77bb      	strb	r3, [r7, #30]
        break;
 8004042:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d074      	beq.n	8004134 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	005a      	lsls	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d916      	bls.n	8004094 <UART_SetConfig+0x404>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d212      	bcs.n	8004094 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f023 030f 	bic.w	r3, r3, #15
 8004076:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	b29a      	uxth	r2, r3
 8004084:	89fb      	ldrh	r3, [r7, #14]
 8004086:	4313      	orrs	r3, r2
 8004088:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	89fa      	ldrh	r2, [r7, #14]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e04f      	b.n	8004134 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	77bb      	strb	r3, [r7, #30]
 8004098:	e04c      	b.n	8004134 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d828      	bhi.n	80040f2 <UART_SetConfig+0x462>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x418>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080040f3 	.word	0x080040f3
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080040f3 	.word	0x080040f3
 80040c4:	080040f3 	.word	0x080040f3
 80040c8:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7ff f8ae 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80040d0:	61b8      	str	r0, [r7, #24]
        break;
 80040d2:	e013      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7ff f8be 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e00f      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <UART_SetConfig+0x4c4>)
 80040de:	61bb      	str	r3, [r7, #24]
        break;
 80040e0:	e00c      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe ff91 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 80040e6:	61b8      	str	r0, [r7, #24]
        break;
 80040e8:	e008      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e004      	b.n	80040fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	77bb      	strb	r3, [r7, #30]
        break;
 80040fa:	bf00      	nop
    }

    if (pclk != 0U)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085a      	lsrs	r2, r3, #1
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	441a      	add	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d909      	bls.n	8004130 <UART_SetConfig+0x4a0>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d205      	bcs.n	8004130 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	e001      	b.n	8004134 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004140:	7fbb      	ldrb	r3, [r7, #30]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40007c00 	.word	0x40007c00
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400

08004158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01a      	beq.n	800426e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d10a      	bne.n	800426e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042ac:	f7fc fe38 	bl	8000f20 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10e      	bne.n	80042de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f82d 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e023      	b.n	8004326 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d10e      	bne.n	800430a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f817 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00d      	b.n	8004326 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b09c      	sub	sp, #112	; 0x70
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433e:	e0a5      	b.n	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	f000 80a1 	beq.w	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fc fde9 	bl	8000f20 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <UART_WaitOnFlagUntilTimeout+0x32>
 800435a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435c:	2b00      	cmp	r3, #0
 800435e:	d13e      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004374:	667b      	str	r3, [r7, #100]	; 0x64
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800438c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e6      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	663b      	str	r3, [r7, #96]	; 0x60
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e067      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d04f      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fa:	d147      	bne.n	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004404:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800441a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
 8004426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	613b      	str	r3, [r7, #16]
   return(result);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004458:	623a      	str	r2, [r7, #32]
 800445a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	61bb      	str	r3, [r7, #24]
   return(result);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e010      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f43f af4a 	beq.w	8004340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3770      	adds	r7, #112	; 0x70
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80044be:	4b8d      	ldr	r3, [pc, #564]	; (80046f4 <MX_LWIP_Init+0x23c>)
 80044c0:	22c0      	movs	r2, #192	; 0xc0
 80044c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80044c4:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <MX_LWIP_Init+0x23c>)
 80044c6:	22a8      	movs	r2, #168	; 0xa8
 80044c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80044ca:	4b8a      	ldr	r3, [pc, #552]	; (80046f4 <MX_LWIP_Init+0x23c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 80044d0:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <MX_LWIP_Init+0x23c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80044d6:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <MX_LWIP_Init+0x240>)
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80044dc:	4b86      	ldr	r3, [pc, #536]	; (80046f8 <MX_LWIP_Init+0x240>)
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80044e2:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <MX_LWIP_Init+0x240>)
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80044e8:	4b83      	ldr	r3, [pc, #524]	; (80046f8 <MX_LWIP_Init+0x240>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80044ee:	4b83      	ldr	r3, [pc, #524]	; (80046fc <MX_LWIP_Init+0x244>)
 80044f0:	22c0      	movs	r2, #192	; 0xc0
 80044f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80044f4:	4b81      	ldr	r3, [pc, #516]	; (80046fc <MX_LWIP_Init+0x244>)
 80044f6:	22a8      	movs	r2, #168	; 0xa8
 80044f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80044fa:	4b80      	ldr	r3, [pc, #512]	; (80046fc <MX_LWIP_Init+0x244>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004500:	4b7e      	ldr	r3, [pc, #504]	; (80046fc <MX_LWIP_Init+0x244>)
 8004502:	2201      	movs	r2, #1
 8004504:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004506:	f000 fcd1 	bl	8004eac <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <MX_LWIP_Init+0x23c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	061a      	lsls	r2, r3, #24
 8004510:	4b78      	ldr	r3, [pc, #480]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	4b76      	ldr	r3, [pc, #472]	; (80046f4 <MX_LWIP_Init+0x23c>)
 800451a:	789b      	ldrb	r3, [r3, #2]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	4313      	orrs	r3, r2
 8004520:	4a74      	ldr	r2, [pc, #464]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004522:	78d2      	ldrb	r2, [r2, #3]
 8004524:	4313      	orrs	r3, r2
 8004526:	061a      	lsls	r2, r3, #24
 8004528:	4b72      	ldr	r3, [pc, #456]	; (80046f4 <MX_LWIP_Init+0x23c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	0619      	lsls	r1, r3, #24
 800452e:	4b71      	ldr	r3, [pc, #452]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	4319      	orrs	r1, r3
 8004536:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004538:	789b      	ldrb	r3, [r3, #2]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	430b      	orrs	r3, r1
 800453e:	496d      	ldr	r1, [pc, #436]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004540:	78c9      	ldrb	r1, [r1, #3]
 8004542:	430b      	orrs	r3, r1
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800454a:	431a      	orrs	r2, r3
 800454c:	4b69      	ldr	r3, [pc, #420]	; (80046f4 <MX_LWIP_Init+0x23c>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	0619      	lsls	r1, r3, #24
 8004552:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	4319      	orrs	r1, r3
 800455a:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <MX_LWIP_Init+0x23c>)
 800455c:	789b      	ldrb	r3, [r3, #2]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	430b      	orrs	r3, r1
 8004562:	4964      	ldr	r1, [pc, #400]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004564:	78c9      	ldrb	r1, [r1, #3]
 8004566:	430b      	orrs	r3, r1
 8004568:	0a1b      	lsrs	r3, r3, #8
 800456a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800456e:	431a      	orrs	r2, r3
 8004570:	4b60      	ldr	r3, [pc, #384]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	0619      	lsls	r1, r3, #24
 8004576:	4b5f      	ldr	r3, [pc, #380]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	4319      	orrs	r1, r3
 800457e:	4b5d      	ldr	r3, [pc, #372]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004580:	789b      	ldrb	r3, [r3, #2]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	430b      	orrs	r3, r1
 8004586:	495b      	ldr	r1, [pc, #364]	; (80046f4 <MX_LWIP_Init+0x23c>)
 8004588:	78c9      	ldrb	r1, [r1, #3]
 800458a:	430b      	orrs	r3, r1
 800458c:	0e1b      	lsrs	r3, r3, #24
 800458e:	4313      	orrs	r3, r2
 8004590:	4a5b      	ldr	r2, [pc, #364]	; (8004700 <MX_LWIP_Init+0x248>)
 8004592:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004594:	4b58      	ldr	r3, [pc, #352]	; (80046f8 <MX_LWIP_Init+0x240>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	061a      	lsls	r2, r3, #24
 800459a:	4b57      	ldr	r3, [pc, #348]	; (80046f8 <MX_LWIP_Init+0x240>)
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	431a      	orrs	r2, r3
 80045a2:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045a4:	789b      	ldrb	r3, [r3, #2]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4a53      	ldr	r2, [pc, #332]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045ac:	78d2      	ldrb	r2, [r2, #3]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	061a      	lsls	r2, r3, #24
 80045b2:	4b51      	ldr	r3, [pc, #324]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	0619      	lsls	r1, r3, #24
 80045b8:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	4319      	orrs	r1, r3
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045c2:	789b      	ldrb	r3, [r3, #2]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	430b      	orrs	r3, r1
 80045c8:	494b      	ldr	r1, [pc, #300]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045ca:	78c9      	ldrb	r1, [r1, #3]
 80045cc:	430b      	orrs	r3, r1
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045d4:	431a      	orrs	r2, r3
 80045d6:	4b48      	ldr	r3, [pc, #288]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	0619      	lsls	r1, r3, #24
 80045dc:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	4319      	orrs	r1, r3
 80045e4:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	430b      	orrs	r3, r1
 80045ec:	4942      	ldr	r1, [pc, #264]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045ee:	78c9      	ldrb	r1, [r1, #3]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045f8:	431a      	orrs	r2, r3
 80045fa:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <MX_LWIP_Init+0x240>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	0619      	lsls	r1, r3, #24
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <MX_LWIP_Init+0x240>)
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	4319      	orrs	r1, r3
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <MX_LWIP_Init+0x240>)
 800460a:	789b      	ldrb	r3, [r3, #2]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	430b      	orrs	r3, r1
 8004610:	4939      	ldr	r1, [pc, #228]	; (80046f8 <MX_LWIP_Init+0x240>)
 8004612:	78c9      	ldrb	r1, [r1, #3]
 8004614:	430b      	orrs	r3, r1
 8004616:	0e1b      	lsrs	r3, r3, #24
 8004618:	4313      	orrs	r3, r2
 800461a:	4a3a      	ldr	r2, [pc, #232]	; (8004704 <MX_LWIP_Init+0x24c>)
 800461c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <MX_LWIP_Init+0x244>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	061a      	lsls	r2, r3, #24
 8004624:	4b35      	ldr	r3, [pc, #212]	; (80046fc <MX_LWIP_Init+0x244>)
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	4b33      	ldr	r3, [pc, #204]	; (80046fc <MX_LWIP_Init+0x244>)
 800462e:	789b      	ldrb	r3, [r3, #2]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	4313      	orrs	r3, r2
 8004634:	4a31      	ldr	r2, [pc, #196]	; (80046fc <MX_LWIP_Init+0x244>)
 8004636:	78d2      	ldrb	r2, [r2, #3]
 8004638:	4313      	orrs	r3, r2
 800463a:	061a      	lsls	r2, r3, #24
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <MX_LWIP_Init+0x244>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	0619      	lsls	r1, r3, #24
 8004642:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <MX_LWIP_Init+0x244>)
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	4319      	orrs	r1, r3
 800464a:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <MX_LWIP_Init+0x244>)
 800464c:	789b      	ldrb	r3, [r3, #2]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	430b      	orrs	r3, r1
 8004652:	492a      	ldr	r1, [pc, #168]	; (80046fc <MX_LWIP_Init+0x244>)
 8004654:	78c9      	ldrb	r1, [r1, #3]
 8004656:	430b      	orrs	r3, r1
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800465e:	431a      	orrs	r2, r3
 8004660:	4b26      	ldr	r3, [pc, #152]	; (80046fc <MX_LWIP_Init+0x244>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	0619      	lsls	r1, r3, #24
 8004666:	4b25      	ldr	r3, [pc, #148]	; (80046fc <MX_LWIP_Init+0x244>)
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	4319      	orrs	r1, r3
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <MX_LWIP_Init+0x244>)
 8004670:	789b      	ldrb	r3, [r3, #2]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	430b      	orrs	r3, r1
 8004676:	4921      	ldr	r1, [pc, #132]	; (80046fc <MX_LWIP_Init+0x244>)
 8004678:	78c9      	ldrb	r1, [r1, #3]
 800467a:	430b      	orrs	r3, r1
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004682:	431a      	orrs	r2, r3
 8004684:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <MX_LWIP_Init+0x244>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	0619      	lsls	r1, r3, #24
 800468a:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <MX_LWIP_Init+0x244>)
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	4319      	orrs	r1, r3
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <MX_LWIP_Init+0x244>)
 8004694:	789b      	ldrb	r3, [r3, #2]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	430b      	orrs	r3, r1
 800469a:	4918      	ldr	r1, [pc, #96]	; (80046fc <MX_LWIP_Init+0x244>)
 800469c:	78c9      	ldrb	r1, [r1, #3]
 800469e:	430b      	orrs	r3, r1
 80046a0:	0e1b      	lsrs	r3, r3, #24
 80046a2:	4313      	orrs	r3, r2
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <MX_LWIP_Init+0x250>)
 80046a6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80046a8:	4b18      	ldr	r3, [pc, #96]	; (800470c <MX_LWIP_Init+0x254>)
 80046aa:	9302      	str	r3, [sp, #8]
 80046ac:	4b18      	ldr	r3, [pc, #96]	; (8004710 <MX_LWIP_Init+0x258>)
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	4b14      	ldr	r3, [pc, #80]	; (8004708 <MX_LWIP_Init+0x250>)
 80046b6:	4a13      	ldr	r2, [pc, #76]	; (8004704 <MX_LWIP_Init+0x24c>)
 80046b8:	4911      	ldr	r1, [pc, #68]	; (8004700 <MX_LWIP_Init+0x248>)
 80046ba:	4816      	ldr	r0, [pc, #88]	; (8004714 <MX_LWIP_Init+0x25c>)
 80046bc:	f001 f89c 	bl	80057f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80046c0:	4814      	ldr	r0, [pc, #80]	; (8004714 <MX_LWIP_Init+0x25c>)
 80046c2:	f001 fa4b 	bl	8005b5c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <MX_LWIP_Init+0x25c>)
 80046c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80046d8:	480e      	ldr	r0, [pc, #56]	; (8004714 <MX_LWIP_Init+0x25c>)
 80046da:	f001 fa4f 	bl	8005b7c <netif_set_up>
 80046de:	e002      	b.n	80046e6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80046e0:	480c      	ldr	r0, [pc, #48]	; (8004714 <MX_LWIP_Init+0x25c>)
 80046e2:	f001 fab7 	bl	8005c54 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80046e6:	490c      	ldr	r1, [pc, #48]	; (8004718 <MX_LWIP_Init+0x260>)
 80046e8:	480a      	ldr	r0, [pc, #40]	; (8004714 <MX_LWIP_Init+0x25c>)
 80046ea:	f001 fae5 	bl	8005cb8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000160 	.word	0x20000160
 80046f8:	20000164 	.word	0x20000164
 80046fc:	20000168 	.word	0x20000168
 8004700:	20000154 	.word	0x20000154
 8004704:	20000158 	.word	0x20000158
 8004708:	2000015c 	.word	0x2000015c
 800470c:	0800ef4d 	.word	0x0800ef4d
 8004710:	08004cd9 	.word	0x08004cd9
 8004714:	20000120 	.word	0x20000120
 8004718:	08004d45 	.word	0x08004d45

0800471c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	; 0x38
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a52      	ldr	r2, [pc, #328]	; (8004884 <HAL_ETH_MspInit+0x168>)
 800473a:	4293      	cmp	r3, r2
 800473c:	f040 809e 	bne.w	800487c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004740:	4b51      	ldr	r3, [pc, #324]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	4a50      	ldr	r2, [pc, #320]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 8004746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800474a:	6313      	str	r3, [r2, #48]	; 0x30
 800474c:	4b4e      	ldr	r3, [pc, #312]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	4a4a      	ldr	r2, [pc, #296]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 800475e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004762:	6313      	str	r3, [r2, #48]	; 0x30
 8004764:	4b48      	ldr	r3, [pc, #288]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4b45      	ldr	r3, [pc, #276]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	4a44      	ldr	r2, [pc, #272]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 8004776:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800477a:	6313      	str	r3, [r2, #48]	; 0x30
 800477c:	4b42      	ldr	r3, [pc, #264]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004788:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4a3e      	ldr	r2, [pc, #248]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6313      	str	r3, [r2, #48]	; 0x30
 8004794:	4b3c      	ldr	r3, [pc, #240]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a0:	4b39      	ldr	r3, [pc, #228]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	4a38      	ldr	r2, [pc, #224]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6313      	str	r3, [r2, #48]	; 0x30
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b8:	4b33      	ldr	r3, [pc, #204]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	4a32      	ldr	r2, [pc, #200]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	6313      	str	r3, [r2, #48]	; 0x30
 80047c4:	4b30      	ldr	r3, [pc, #192]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047da:	6313      	str	r3, [r2, #48]	; 0x30
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_ETH_MspInit+0x16c>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80047e8:	2332      	movs	r3, #50	; 0x32
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047f8:	230b      	movs	r3, #11
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004800:	4619      	mov	r1, r3
 8004802:	4822      	ldr	r0, [pc, #136]	; (800488c <HAL_ETH_MspInit+0x170>)
 8004804:	f7fd fe40 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004808:	2386      	movs	r3, #134	; 0x86
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004814:	2303      	movs	r3, #3
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004818:	230b      	movs	r3, #11
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004820:	4619      	mov	r1, r3
 8004822:	481b      	ldr	r0, [pc, #108]	; (8004890 <HAL_ETH_MspInit+0x174>)
 8004824:	f7fd fe30 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482e:	2302      	movs	r3, #2
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004836:	2303      	movs	r3, #3
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800483a:	230b      	movs	r3, #11
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800483e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004842:	4619      	mov	r1, r3
 8004844:	4813      	ldr	r0, [pc, #76]	; (8004894 <HAL_ETH_MspInit+0x178>)
 8004846:	f7fd fe1f 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800484a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2302      	movs	r3, #2
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800485c:	230b      	movs	r3, #11
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004864:	4619      	mov	r1, r3
 8004866:	480c      	ldr	r0, [pc, #48]	; (8004898 <HAL_ETH_MspInit+0x17c>)
 8004868:	f7fd fe0e 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800486c:	2200      	movs	r2, #0
 800486e:	2100      	movs	r1, #0
 8004870:	203d      	movs	r0, #61	; 0x3d
 8004872:	f7fc fc60 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004876:	203d      	movs	r0, #61	; 0x3d
 8004878:	f7fc fc79 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800487c:	bf00      	nop
 800487e:	3738      	adds	r7, #56	; 0x38
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40028000 	.word	0x40028000
 8004888:	40023800 	.word	0x40023800
 800488c:	40020800 	.word	0x40020800
 8004890:	40020000 	.word	0x40020000
 8004894:	40020400 	.word	0x40020400
 8004898:	40021800 	.word	0x40021800

0800489c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80048a8:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <low_level_init+0x144>)
 80048aa:	4a4e      	ldr	r2, [pc, #312]	; (80049e4 <low_level_init+0x148>)
 80048ac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80048ae:	4b4c      	ldr	r3, [pc, #304]	; (80049e0 <low_level_init+0x144>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80048b4:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <low_level_init+0x144>)
 80048b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048ba:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80048bc:	4b48      	ldr	r3, [pc, #288]	; (80049e0 <low_level_init+0x144>)
 80048be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80048c4:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <low_level_init+0x144>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80048ca:	2300      	movs	r3, #0
 80048cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80048d2:	23e1      	movs	r3, #225	; 0xe1
 80048d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80048d6:	2300      	movs	r3, #0
 80048d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80048da:	2300      	movs	r3, #0
 80048dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80048de:	2300      	movs	r3, #0
 80048e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80048e2:	4a3f      	ldr	r2, [pc, #252]	; (80049e0 <low_level_init+0x144>)
 80048e4:	f107 0308 	add.w	r3, r7, #8
 80048e8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80048ea:	4b3d      	ldr	r3, [pc, #244]	; (80049e0 <low_level_init+0x144>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <low_level_init+0x144>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80048f6:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <low_level_init+0x144>)
 80048f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048fc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048fe:	4838      	ldr	r0, [pc, #224]	; (80049e0 <low_level_init+0x144>)
 8004900:	f7fc fc50 	bl	80011a4 <HAL_ETH_Init>
 8004904:	4603      	mov	r3, r0
 8004906:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	b2da      	uxtb	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004920:	2304      	movs	r3, #4
 8004922:	4a31      	ldr	r2, [pc, #196]	; (80049e8 <low_level_init+0x14c>)
 8004924:	4931      	ldr	r1, [pc, #196]	; (80049ec <low_level_init+0x150>)
 8004926:	482e      	ldr	r0, [pc, #184]	; (80049e0 <low_level_init+0x144>)
 8004928:	f7fc fdd4 	bl	80014d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800492c:	2304      	movs	r3, #4
 800492e:	4a30      	ldr	r2, [pc, #192]	; (80049f0 <low_level_init+0x154>)
 8004930:	4930      	ldr	r1, [pc, #192]	; (80049f4 <low_level_init+0x158>)
 8004932:	482b      	ldr	r0, [pc, #172]	; (80049e0 <low_level_init+0x144>)
 8004934:	f7fc fe36 	bl	80015a4 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2206      	movs	r2, #6
 800493c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <low_level_init+0x144>)
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800494c:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <low_level_init+0x144>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	785a      	ldrb	r2, [r3, #1]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004958:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <low_level_init+0x144>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	789a      	ldrb	r2, [r3, #2]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <low_level_init+0x144>)
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	78da      	ldrb	r2, [r3, #3]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <low_level_init+0x144>)
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	791a      	ldrb	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800497c:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <low_level_init+0x144>)
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	795a      	ldrb	r2, [r3, #5]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800498e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004996:	f043 030a 	orr.w	r3, r3, #10
 800499a:	b2da      	uxtb	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80049a2:	480f      	ldr	r0, [pc, #60]	; (80049e0 <low_level_init+0x144>)
 80049a4:	f7fd f928 	bl	8001bf8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80049a8:	f107 0310 	add.w	r3, r7, #16
 80049ac:	461a      	mov	r2, r3
 80049ae:	211d      	movs	r1, #29
 80049b0:	480b      	ldr	r0, [pc, #44]	; (80049e0 <low_level_init+0x144>)
 80049b2:	f7fd f853 	bl	8001a5c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f043 030b 	orr.w	r3, r3, #11
 80049bc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	461a      	mov	r2, r3
 80049c2:	211d      	movs	r1, #29
 80049c4:	4806      	ldr	r0, [pc, #24]	; (80049e0 <low_level_init+0x144>)
 80049c6:	f7fd f8b1 	bl	8001b2c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	461a      	mov	r2, r3
 80049d0:	211d      	movs	r1, #29
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <low_level_init+0x144>)
 80049d4:	f7fd f842 	bl	8001a5c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80049d8:	bf00      	nop
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	2000320c 	.word	0x2000320c
 80049e4:	40028000 	.word	0x40028000
 80049e8:	20001a3c 	.word	0x20001a3c
 80049ec:	200001ec 	.word	0x200001ec
 80049f0:	2000026c 	.word	0x2000026c
 80049f4:	2000016c 	.word	0x2000016c

080049f8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004a02:	4b4b      	ldr	r3, [pc, #300]	; (8004b30 <low_level_output+0x138>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004a1a:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <low_level_output+0x138>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	e05a      	b.n	8004ae0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da03      	bge.n	8004a3a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004a32:	23f8      	movs	r3, #248	; 0xf8
 8004a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004a38:	e05c      	b.n	8004af4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	895b      	ldrh	r3, [r3, #10]
 8004a3e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a44:	e02f      	b.n	8004aa6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	18d0      	adds	r0, r2, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	18d1      	adds	r1, r2, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f00a fb7f 	bl	800f160 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da03      	bge.n	8004a78 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a70:	23f8      	movs	r3, #248	; 0xf8
 8004a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004a76:	e03d      	b.n	8004af4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a88:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a94:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004aa0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d8c8      	bhi.n	8004a46 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	18d0      	adds	r0, r2, r3
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f00a fb4b 	bl	800f160 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1a1      	bne.n	8004a2a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004ae6:	6979      	ldr	r1, [r7, #20]
 8004ae8:	4811      	ldr	r0, [pc, #68]	; (8004b30 <low_level_output+0x138>)
 8004aea:	f7fc fdc7 	bl	800167c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <low_level_output+0x138>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <low_level_output+0x138>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2320      	movs	r3, #32
 8004b12:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <low_level_output+0x138>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8004b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3728      	adds	r7, #40	; 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	2000320c 	.word	0x2000320c

08004b34 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	; 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004b58:	484e      	ldr	r0, [pc, #312]	; (8004c94 <low_level_input+0x160>)
 8004b5a:	f7fc fe79 	bl	8001850 <HAL_ETH_GetReceivedFrame>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <low_level_input+0x34>

    return NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e091      	b.n	8004c8c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <low_level_input+0x160>)
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004b6e:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <low_level_input+0x160>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004b80:	4619      	mov	r1, r3
 8004b82:	2000      	movs	r0, #0
 8004b84:	f001 f934 	bl	8005df0 <pbuf_alloc>
 8004b88:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d04b      	beq.n	8004c28 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b90:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <low_level_input+0x160>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9e:	e040      	b.n	8004c22 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	895b      	ldrh	r3, [r3, #10]
 8004ba4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004baa:	e021      	b.n	8004bf0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	18d0      	adds	r0, r2, r3
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	18d1      	adds	r1, r2, r3
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f00a facc 	bl	800f160 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004bde:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004bea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d8d6      	bhi.n	8004bac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	18d0      	adds	r0, r2, r3
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f00a faa6 	bl	800f160 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1bb      	bne.n	8004ba0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <low_level_input+0x160>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e00b      	b.n	8004c4c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <low_level_input+0x160>)
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d3ee      	bcc.n	8004c34 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <low_level_input+0x160>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <low_level_input+0x160>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <low_level_input+0x160>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c76:	461a      	mov	r2, r3
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <low_level_input+0x160>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3730      	adds	r7, #48	; 0x30
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	2000320c 	.word	0x2000320c

08004c98 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff47 	bl	8004b34 <low_level_input>
 8004ca6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	4798      	blx	r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004cbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d006      	beq.n	8004cd2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f001 fb77 	bl	80063b8 <pbuf_free>
    p = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e000      	b.n	8004cd2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004cd0:	bf00      	nop
  }
}
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <ethernetif_init+0x1c>
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <ethernetif_init+0x48>)
 8004ce8:	f240 221d 	movw	r2, #541	; 0x21d
 8004cec:	490d      	ldr	r1, [pc, #52]	; (8004d24 <ethernetif_init+0x4c>)
 8004cee:	480e      	ldr	r0, [pc, #56]	; (8004d28 <ethernetif_init+0x50>)
 8004cf0:	f00a fa66 	bl	800f1c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2273      	movs	r2, #115	; 0x73
 8004cf8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2274      	movs	r2, #116	; 0x74
 8004d00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <ethernetif_init+0x54>)
 8004d08:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <ethernetif_init+0x58>)
 8004d0e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff fdc3 	bl	800489c <low_level_init>

  return ERR_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	080105f8 	.word	0x080105f8
 8004d24:	08010614 	.word	0x08010614
 8004d28:	08010624 	.word	0x08010624
 8004d2c:	0800d2e5 	.word	0x0800d2e5
 8004d30:	080049f9 	.word	0x080049f9

08004d34 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d38:	f7fc f8f2 	bl	8000f20 <HAL_GetTick>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d05d      	beq.n	8004e22 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d66:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03f      	beq.n	8004dee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d72:	2100      	movs	r1, #0
 8004d74:	4830      	ldr	r0, [pc, #192]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004d76:	f7fc fed9 	bl	8001b2c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004d7a:	f7fc f8d1 	bl	8000f20 <HAL_GetTick>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	461a      	mov	r2, r3
 8004d88:	2101      	movs	r1, #1
 8004d8a:	482b      	ldr	r0, [pc, #172]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004d8c:	f7fc fe66 	bl	8001a5c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004d90:	f7fc f8c6 	bl	8000f20 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d9e:	d828      	bhi.n	8004df2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0eb      	beq.n	8004d82 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	461a      	mov	r2, r3
 8004db0:	2110      	movs	r1, #16
 8004db2:	4821      	ldr	r0, [pc, #132]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004db4:	f7fc fe52 	bl	8001a5c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	e002      	b.n	8004dd2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004ddc:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	e016      	b.n	8004e12 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004de4:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	e011      	b.n	8004e12 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <ethernetif_update_config+0xb0>
          goto error;
 8004df2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004e04:	4313      	orrs	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	480a      	ldr	r0, [pc, #40]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004e0e:	f7fc fe8d 	bl	8001b2c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004e12:	2100      	movs	r1, #0
 8004e14:	4808      	ldr	r0, [pc, #32]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004e16:	f7fc ff4d 	bl	8001cb4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004e1a:	4807      	ldr	r0, [pc, #28]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004e1c:	f7fc feec 	bl	8001bf8 <HAL_ETH_Start>
 8004e20:	e002      	b.n	8004e28 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004e22:	4805      	ldr	r0, [pc, #20]	; (8004e38 <ethernetif_update_config+0xf4>)
 8004e24:	f7fc ff17 	bl	8001c56 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f807 	bl	8004e3c <ethernetif_notify_conn_changed>
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000320c 	.word	0x2000320c

08004e3c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	b21a      	sxth	r2, r3
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	b21b      	sxth	r3, r3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	b29b      	uxth	r3, r3
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	061a      	lsls	r2, r3, #24
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	0e1b      	lsrs	r3, r3, #24
 8004e9e:	4313      	orrs	r3, r2
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004eb6:	f000 f8d5 	bl	8005064 <mem_init>
  memp_init();
 8004eba:	f000 fbdb 	bl	8005674 <memp_init>
  pbuf_init();
  netif_init();
 8004ebe:	f000 fc93 	bl	80057e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004ec2:	f007 f84f 	bl	800bf64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004ec6:	f001 fda7 	bl	8006a18 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004eca:	f006 ffc1 	bl	800be50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <ptr_to_mem+0x20>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4413      	add	r3, r2
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20005a80 	.word	0x20005a80

08004efc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <mem_to_ptr+0x20>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	b29b      	uxth	r3, r3
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20005a80 	.word	0x20005a80

08004f20 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004f28:	4b45      	ldr	r3, [pc, #276]	; (8005040 <plug_holes+0x120>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d206      	bcs.n	8004f40 <plug_holes+0x20>
 8004f32:	4b44      	ldr	r3, [pc, #272]	; (8005044 <plug_holes+0x124>)
 8004f34:	f240 12df 	movw	r2, #479	; 0x1df
 8004f38:	4943      	ldr	r1, [pc, #268]	; (8005048 <plug_holes+0x128>)
 8004f3a:	4844      	ldr	r0, [pc, #272]	; (800504c <plug_holes+0x12c>)
 8004f3c:	f00a f940 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004f40:	4b43      	ldr	r3, [pc, #268]	; (8005050 <plug_holes+0x130>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d306      	bcc.n	8004f58 <plug_holes+0x38>
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <plug_holes+0x124>)
 8004f4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004f50:	4940      	ldr	r1, [pc, #256]	; (8005054 <plug_holes+0x134>)
 8004f52:	483e      	ldr	r0, [pc, #248]	; (800504c <plug_holes+0x12c>)
 8004f54:	f00a f934 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <plug_holes+0x4e>
 8004f60:	4b38      	ldr	r3, [pc, #224]	; (8005044 <plug_holes+0x124>)
 8004f62:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004f66:	493c      	ldr	r1, [pc, #240]	; (8005058 <plug_holes+0x138>)
 8004f68:	4838      	ldr	r0, [pc, #224]	; (800504c <plug_holes+0x12c>)
 8004f6a:	f00a f929 	bl	800f1c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f76:	d906      	bls.n	8004f86 <plug_holes+0x66>
 8004f78:	4b32      	ldr	r3, [pc, #200]	; (8005044 <plug_holes+0x124>)
 8004f7a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004f7e:	4937      	ldr	r1, [pc, #220]	; (800505c <plug_holes+0x13c>)
 8004f80:	4832      	ldr	r0, [pc, #200]	; (800504c <plug_holes+0x12c>)
 8004f82:	f00a f91d 	bl	800f1c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ffa4 	bl	8004ed8 <ptr_to_mem>
 8004f90:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d024      	beq.n	8004fe4 <plug_holes+0xc4>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	791b      	ldrb	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d120      	bne.n	8004fe4 <plug_holes+0xc4>
 8004fa2:	4b2b      	ldr	r3, [pc, #172]	; (8005050 <plug_holes+0x130>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d01b      	beq.n	8004fe4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <plug_holes+0x140>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d102      	bne.n	8004fbc <plug_holes+0x9c>
      lfree = mem;
 8004fb6:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <plug_holes+0x140>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	881a      	ldrh	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004fcc:	d00a      	beq.n	8004fe4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff ff80 	bl	8004ed8 <ptr_to_mem>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ff8e 	bl	8004efc <mem_to_ptr>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	885b      	ldrh	r3, [r3, #2]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff75 	bl	8004ed8 <ptr_to_mem>
 8004fee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d01f      	beq.n	8005038 <plug_holes+0x118>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	791b      	ldrb	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d11b      	bne.n	8005038 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005000:	4b17      	ldr	r3, [pc, #92]	; (8005060 <plug_holes+0x140>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d102      	bne.n	8005010 <plug_holes+0xf0>
      lfree = pmem;
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <plug_holes+0x140>)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005020:	d00a      	beq.n	8005038 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ff56 	bl	8004ed8 <ptr_to_mem>
 800502c:	4604      	mov	r4, r0
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f7ff ff64 	bl	8004efc <mem_to_ptr>
 8005034:	4603      	mov	r3, r0
 8005036:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}
 8005040:	20005a80 	.word	0x20005a80
 8005044:	0801064c 	.word	0x0801064c
 8005048:	0801067c 	.word	0x0801067c
 800504c:	08010694 	.word	0x08010694
 8005050:	20005a84 	.word	0x20005a84
 8005054:	080106bc 	.word	0x080106bc
 8005058:	080106d8 	.word	0x080106d8
 800505c:	080106f4 	.word	0x080106f4
 8005060:	20005a88 	.word	0x20005a88

08005064 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <mem_init+0x68>)
 800506c:	3303      	adds	r3, #3
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	461a      	mov	r2, r3
 8005074:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <mem_init+0x6c>)
 8005076:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <mem_init+0x6c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005084:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005092:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005096:	f7ff ff1f 	bl	8004ed8 <ptr_to_mem>
 800509a:	4603      	mov	r3, r0
 800509c:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <mem_init+0x70>)
 800509e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <mem_init+0x70>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <mem_init+0x70>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80050b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <mem_init+0x70>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80050ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <mem_init+0x6c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <mem_init+0x74>)
 80050c2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	2000326c 	.word	0x2000326c
 80050d0:	20005a80 	.word	0x20005a80
 80050d4:	20005a84 	.word	0x20005a84
 80050d8:	20005a88 	.word	0x20005a88

080050dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff ff09 	bl	8004efc <mem_to_ptr>
 80050ea:	4603      	mov	r3, r0
 80050ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fef0 	bl	8004ed8 <ptr_to_mem>
 80050f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	885b      	ldrh	r3, [r3, #2]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff feea 	bl	8004ed8 <ptr_to_mem>
 8005104:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800510e:	d818      	bhi.n	8005142 <mem_link_valid+0x66>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	885b      	ldrh	r3, [r3, #2]
 8005114:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005118:	d813      	bhi.n	8005142 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800511e:	8afa      	ldrh	r2, [r7, #22]
 8005120:	429a      	cmp	r2, r3
 8005122:	d004      	beq.n	800512e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	8afa      	ldrh	r2, [r7, #22]
 800512a:	429a      	cmp	r2, r3
 800512c:	d109      	bne.n	8005142 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <mem_link_valid+0x74>)
 8005130:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	429a      	cmp	r2, r3
 8005136:	d006      	beq.n	8005146 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	885b      	ldrh	r3, [r3, #2]
 800513c:	8afa      	ldrh	r2, [r7, #22]
 800513e:	429a      	cmp	r2, r3
 8005140:	d001      	beq.n	8005146 <mem_link_valid+0x6a>
    return 0;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <mem_link_valid+0x6c>
  }
  return 1;
 8005146:	2301      	movs	r3, #1
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20005a84 	.word	0x20005a84

08005154 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d04c      	beq.n	80051fc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800516c:	4b25      	ldr	r3, [pc, #148]	; (8005204 <mem_free+0xb0>)
 800516e:	f240 2273 	movw	r2, #627	; 0x273
 8005172:	4925      	ldr	r1, [pc, #148]	; (8005208 <mem_free+0xb4>)
 8005174:	4825      	ldr	r0, [pc, #148]	; (800520c <mem_free+0xb8>)
 8005176:	f00a f823 	bl	800f1c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800517a:	e040      	b.n	80051fe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3b08      	subs	r3, #8
 8005180:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005182:	4b23      	ldr	r3, [pc, #140]	; (8005210 <mem_free+0xbc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d306      	bcc.n	800519a <mem_free+0x46>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f103 020c 	add.w	r2, r3, #12
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <mem_free+0xc0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d907      	bls.n	80051aa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <mem_free+0xb0>)
 800519c:	f240 227f 	movw	r2, #639	; 0x27f
 80051a0:	491d      	ldr	r1, [pc, #116]	; (8005218 <mem_free+0xc4>)
 80051a2:	481a      	ldr	r0, [pc, #104]	; (800520c <mem_free+0xb8>)
 80051a4:	f00a f80c 	bl	800f1c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80051a8:	e029      	b.n	80051fe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	791b      	ldrb	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <mem_free+0xb0>)
 80051b4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80051b8:	4918      	ldr	r1, [pc, #96]	; (800521c <mem_free+0xc8>)
 80051ba:	4814      	ldr	r0, [pc, #80]	; (800520c <mem_free+0xb8>)
 80051bc:	f00a f800 	bl	800f1c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80051c0:	e01d      	b.n	80051fe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff ff8a 	bl	80050dc <mem_link_valid>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d107      	bne.n	80051de <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <mem_free+0xb0>)
 80051d0:	f240 2295 	movw	r2, #661	; 0x295
 80051d4:	4912      	ldr	r1, [pc, #72]	; (8005220 <mem_free+0xcc>)
 80051d6:	480d      	ldr	r0, [pc, #52]	; (800520c <mem_free+0xb8>)
 80051d8:	f009 fff2 	bl	800f1c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80051dc:	e00f      	b.n	80051fe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <mem_free+0xd0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d202      	bcs.n	80051f4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <mem_free+0xd0>)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff fe93 	bl	8004f20 <plug_holes>
 80051fa:	e000      	b.n	80051fe <mem_free+0xaa>
    return;
 80051fc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	0801064c 	.word	0x0801064c
 8005208:	08010720 	.word	0x08010720
 800520c:	08010694 	.word	0x08010694
 8005210:	20005a80 	.word	0x20005a80
 8005214:	20005a84 	.word	0x20005a84
 8005218:	08010744 	.word	0x08010744
 800521c:	08010760 	.word	0x08010760
 8005220:	08010788 	.word	0x08010788
 8005224:	20005a88 	.word	0x20005a88

08005228 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005234:	887b      	ldrh	r3, [r7, #2]
 8005236:	3303      	adds	r3, #3
 8005238:	b29b      	uxth	r3, r3
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005240:	8bfb      	ldrh	r3, [r7, #30]
 8005242:	2b0b      	cmp	r3, #11
 8005244:	d801      	bhi.n	800524a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005246:	230c      	movs	r3, #12
 8005248:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800524a:	8bfb      	ldrh	r3, [r7, #30]
 800524c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005250:	d803      	bhi.n	800525a <mem_trim+0x32>
 8005252:	8bfa      	ldrh	r2, [r7, #30]
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	429a      	cmp	r2, r3
 8005258:	d201      	bcs.n	800525e <mem_trim+0x36>
    return NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	e0cc      	b.n	80053f8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800525e:	4b68      	ldr	r3, [pc, #416]	; (8005400 <mem_trim+0x1d8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d304      	bcc.n	8005272 <mem_trim+0x4a>
 8005268:	4b66      	ldr	r3, [pc, #408]	; (8005404 <mem_trim+0x1dc>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d306      	bcc.n	8005280 <mem_trim+0x58>
 8005272:	4b65      	ldr	r3, [pc, #404]	; (8005408 <mem_trim+0x1e0>)
 8005274:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005278:	4964      	ldr	r1, [pc, #400]	; (800540c <mem_trim+0x1e4>)
 800527a:	4865      	ldr	r0, [pc, #404]	; (8005410 <mem_trim+0x1e8>)
 800527c:	f009 ffa0 	bl	800f1c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005280:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <mem_trim+0x1d8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d304      	bcc.n	8005294 <mem_trim+0x6c>
 800528a:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <mem_trim+0x1dc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d301      	bcc.n	8005298 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	e0af      	b.n	80053f8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3b08      	subs	r3, #8
 800529c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800529e:	69b8      	ldr	r0, [r7, #24]
 80052a0:	f7ff fe2c 	bl	8004efc <mem_to_ptr>
 80052a4:	4603      	mov	r3, r0
 80052a6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	881a      	ldrh	r2, [r3, #0]
 80052ac:	8afb      	ldrh	r3, [r7, #22]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b08      	subs	r3, #8
 80052b4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80052b6:	8bfa      	ldrh	r2, [r7, #30]
 80052b8:	8abb      	ldrh	r3, [r7, #20]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d906      	bls.n	80052cc <mem_trim+0xa4>
 80052be:	4b52      	ldr	r3, [pc, #328]	; (8005408 <mem_trim+0x1e0>)
 80052c0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80052c4:	4953      	ldr	r1, [pc, #332]	; (8005414 <mem_trim+0x1ec>)
 80052c6:	4852      	ldr	r0, [pc, #328]	; (8005410 <mem_trim+0x1e8>)
 80052c8:	f009 ff7a 	bl	800f1c0 <iprintf>
  if (newsize > size) {
 80052cc:	8bfa      	ldrh	r2, [r7, #30]
 80052ce:	8abb      	ldrh	r3, [r7, #20]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d901      	bls.n	80052d8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e08f      	b.n	80053f8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80052d8:	8bfa      	ldrh	r2, [r7, #30]
 80052da:	8abb      	ldrh	r3, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d101      	bne.n	80052e4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	e089      	b.n	80053f8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fdf5 	bl	8004ed8 <ptr_to_mem>
 80052ee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	791b      	ldrb	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d13f      	bne.n	8005378 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005300:	d106      	bne.n	8005310 <mem_trim+0xe8>
 8005302:	4b41      	ldr	r3, [pc, #260]	; (8005408 <mem_trim+0x1e0>)
 8005304:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005308:	4943      	ldr	r1, [pc, #268]	; (8005418 <mem_trim+0x1f0>)
 800530a:	4841      	ldr	r0, [pc, #260]	; (8005410 <mem_trim+0x1e8>)
 800530c:	f009 ff58 	bl	800f1c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005316:	8afa      	ldrh	r2, [r7, #22]
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	4413      	add	r3, r2
 800531c:	b29b      	uxth	r3, r3
 800531e:	3308      	adds	r3, #8
 8005320:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005322:	4b3e      	ldr	r3, [pc, #248]	; (800541c <mem_trim+0x1f4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	429a      	cmp	r2, r3
 800532a:	d106      	bne.n	800533a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fdd2 	bl	8004ed8 <ptr_to_mem>
 8005334:	4603      	mov	r3, r0
 8005336:	4a39      	ldr	r2, [pc, #228]	; (800541c <mem_trim+0x1f4>)
 8005338:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fdcb 	bl	8004ed8 <ptr_to_mem>
 8005342:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2200      	movs	r2, #0
 8005348:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	89ba      	ldrh	r2, [r7, #12]
 800534e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	8afa      	ldrh	r2, [r7, #22]
 8005354:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	89fa      	ldrh	r2, [r7, #14]
 800535a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005364:	d047      	beq.n	80053f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fdb4 	bl	8004ed8 <ptr_to_mem>
 8005370:	4602      	mov	r2, r0
 8005372:	89fb      	ldrh	r3, [r7, #14]
 8005374:	8053      	strh	r3, [r2, #2]
 8005376:	e03e      	b.n	80053f6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005378:	8bfb      	ldrh	r3, [r7, #30]
 800537a:	f103 0214 	add.w	r2, r3, #20
 800537e:	8abb      	ldrh	r3, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d838      	bhi.n	80053f6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	8bfb      	ldrh	r3, [r7, #30]
 8005388:	4413      	add	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	3308      	adds	r3, #8
 800538e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005398:	d106      	bne.n	80053a8 <mem_trim+0x180>
 800539a:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <mem_trim+0x1e0>)
 800539c:	f240 3216 	movw	r2, #790	; 0x316
 80053a0:	491d      	ldr	r1, [pc, #116]	; (8005418 <mem_trim+0x1f0>)
 80053a2:	481b      	ldr	r0, [pc, #108]	; (8005410 <mem_trim+0x1e8>)
 80053a4:	f009 ff0c 	bl	800f1c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fd94 	bl	8004ed8 <ptr_to_mem>
 80053b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <mem_trim+0x1f4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d202      	bcs.n	80053c2 <mem_trim+0x19a>
      lfree = mem2;
 80053bc:	4a17      	ldr	r2, [pc, #92]	; (800541c <mem_trim+0x1f4>)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2200      	movs	r2, #0
 80053c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	881a      	ldrh	r2, [r3, #0]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	8afa      	ldrh	r2, [r7, #22]
 80053d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	89fa      	ldrh	r2, [r7, #14]
 80053da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80053e4:	d007      	beq.n	80053f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fd74 	bl	8004ed8 <ptr_to_mem>
 80053f0:	4602      	mov	r2, r0
 80053f2:	89fb      	ldrh	r3, [r7, #14]
 80053f4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80053f6:	687b      	ldr	r3, [r7, #4]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20005a80 	.word	0x20005a80
 8005404:	20005a84 	.word	0x20005a84
 8005408:	0801064c 	.word	0x0801064c
 800540c:	080107bc 	.word	0x080107bc
 8005410:	08010694 	.word	0x08010694
 8005414:	080107d4 	.word	0x080107d4
 8005418:	080107f4 	.word	0x080107f4
 800541c:	20005a88 	.word	0x20005a88

08005420 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <mem_malloc+0x14>
    return NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	e0d9      	b.n	80055e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	3303      	adds	r3, #3
 8005438:	b29b      	uxth	r3, r3
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005440:	8bbb      	ldrh	r3, [r7, #28]
 8005442:	2b0b      	cmp	r3, #11
 8005444:	d801      	bhi.n	800544a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005446:	230c      	movs	r3, #12
 8005448:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800544a:	8bbb      	ldrh	r3, [r7, #28]
 800544c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005450:	d803      	bhi.n	800545a <mem_malloc+0x3a>
 8005452:	8bba      	ldrh	r2, [r7, #28]
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	429a      	cmp	r2, r3
 8005458:	d201      	bcs.n	800545e <mem_malloc+0x3e>
    return NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	e0c4      	b.n	80055e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800545e:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <mem_malloc+0x1d0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fd4a 	bl	8004efc <mem_to_ptr>
 8005468:	4603      	mov	r3, r0
 800546a:	83fb      	strh	r3, [r7, #30]
 800546c:	e0b4      	b.n	80055d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800546e:	8bfb      	ldrh	r3, [r7, #30]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fd31 	bl	8004ed8 <ptr_to_mem>
 8005476:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f040 80a4 	bne.w	80055ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	8bfb      	ldrh	r3, [r7, #30]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f1a3 0208 	sub.w	r2, r3, #8
 8005490:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005492:	429a      	cmp	r2, r3
 8005494:	f0c0 8099 	bcc.w	80055ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	8bfb      	ldrh	r3, [r7, #30]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f1a3 0208 	sub.w	r2, r3, #8
 80054a6:	8bbb      	ldrh	r3, [r7, #28]
 80054a8:	3314      	adds	r3, #20
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d333      	bcc.n	8005516 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80054ae:	8bfa      	ldrh	r2, [r7, #30]
 80054b0:	8bbb      	ldrh	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3308      	adds	r3, #8
 80054b8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80054ba:	8a7b      	ldrh	r3, [r7, #18]
 80054bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80054c0:	d106      	bne.n	80054d0 <mem_malloc+0xb0>
 80054c2:	4b4c      	ldr	r3, [pc, #304]	; (80055f4 <mem_malloc+0x1d4>)
 80054c4:	f240 3287 	movw	r2, #903	; 0x387
 80054c8:	494b      	ldr	r1, [pc, #300]	; (80055f8 <mem_malloc+0x1d8>)
 80054ca:	484c      	ldr	r0, [pc, #304]	; (80055fc <mem_malloc+0x1dc>)
 80054cc:	f009 fe78 	bl	800f1c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80054d0:	8a7b      	ldrh	r3, [r7, #18]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fd00 	bl	8004ed8 <ptr_to_mem>
 80054d8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8bfa      	ldrh	r2, [r7, #30]
 80054ec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	8a7a      	ldrh	r2, [r7, #18]
 80054f2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2201      	movs	r2, #1
 80054f8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005502:	d00b      	beq.n	800551c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fce5 	bl	8004ed8 <ptr_to_mem>
 800550e:	4602      	mov	r2, r0
 8005510:	8a7b      	ldrh	r3, [r7, #18]
 8005512:	8053      	strh	r3, [r2, #2]
 8005514:	e002      	b.n	800551c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2201      	movs	r2, #1
 800551a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800551c:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <mem_malloc+0x1d0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	429a      	cmp	r2, r3
 8005524:	d127      	bne.n	8005576 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005526:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <mem_malloc+0x1d0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800552c:	e005      	b.n	800553a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fcd0 	bl	8004ed8 <ptr_to_mem>
 8005538:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	791b      	ldrb	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d004      	beq.n	800554c <mem_malloc+0x12c>
 8005542:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <mem_malloc+0x1e0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	429a      	cmp	r2, r3
 800554a:	d1f0      	bne.n	800552e <mem_malloc+0x10e>
          }
          lfree = cur;
 800554c:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <mem_malloc+0x1d0>)
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <mem_malloc+0x1d0>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <mem_malloc+0x1e0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d00b      	beq.n	8005576 <mem_malloc+0x156>
 800555e:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <mem_malloc+0x1d0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <mem_malloc+0x156>
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <mem_malloc+0x1d4>)
 800556a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800556e:	4925      	ldr	r1, [pc, #148]	; (8005604 <mem_malloc+0x1e4>)
 8005570:	4822      	ldr	r0, [pc, #136]	; (80055fc <mem_malloc+0x1dc>)
 8005572:	f009 fe25 	bl	800f1c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005576:	8bba      	ldrh	r2, [r7, #28]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	3308      	adds	r3, #8
 800557e:	4a20      	ldr	r2, [pc, #128]	; (8005600 <mem_malloc+0x1e0>)
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	4293      	cmp	r3, r2
 8005584:	d906      	bls.n	8005594 <mem_malloc+0x174>
 8005586:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <mem_malloc+0x1d4>)
 8005588:	f240 32b9 	movw	r2, #953	; 0x3b9
 800558c:	491e      	ldr	r1, [pc, #120]	; (8005608 <mem_malloc+0x1e8>)
 800558e:	481b      	ldr	r0, [pc, #108]	; (80055fc <mem_malloc+0x1dc>)
 8005590:	f009 fe16 	bl	800f1c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d006      	beq.n	80055ac <mem_malloc+0x18c>
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <mem_malloc+0x1d4>)
 80055a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80055a4:	4919      	ldr	r1, [pc, #100]	; (800560c <mem_malloc+0x1ec>)
 80055a6:	4815      	ldr	r0, [pc, #84]	; (80055fc <mem_malloc+0x1dc>)
 80055a8:	f009 fe0a 	bl	800f1c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <mem_malloc+0x1a4>
 80055b6:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <mem_malloc+0x1d4>)
 80055b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80055bc:	4914      	ldr	r1, [pc, #80]	; (8005610 <mem_malloc+0x1f0>)
 80055be:	480f      	ldr	r0, [pc, #60]	; (80055fc <mem_malloc+0x1dc>)
 80055c0:	f009 fdfe 	bl	800f1c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	3308      	adds	r3, #8
 80055c8:	e00e      	b.n	80055e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80055ca:	8bfb      	ldrh	r3, [r7, #30]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fc83 	bl	8004ed8 <ptr_to_mem>
 80055d2:	4603      	mov	r3, r0
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80055d8:	8bfa      	ldrh	r2, [r7, #30]
 80055da:	8bbb      	ldrh	r3, [r7, #28]
 80055dc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80055e0:	429a      	cmp	r2, r3
 80055e2:	f4ff af44 	bcc.w	800546e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20005a88 	.word	0x20005a88
 80055f4:	0801064c 	.word	0x0801064c
 80055f8:	080107f4 	.word	0x080107f4
 80055fc:	08010694 	.word	0x08010694
 8005600:	20005a84 	.word	0x20005a84
 8005604:	08010808 	.word	0x08010808
 8005608:	08010824 	.word	0x08010824
 800560c:	08010854 	.word	0x08010854
 8005610:	08010884 	.word	0x08010884

08005614 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	3303      	adds	r3, #3
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e011      	b.n	800565a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4413      	add	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	885b      	ldrh	r3, [r3, #2]
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4293      	cmp	r3, r2
 8005664:	dbe7      	blt.n	8005636 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800567a:	2300      	movs	r3, #0
 800567c:	80fb      	strh	r3, [r7, #6]
 800567e:	e009      	b.n	8005694 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <memp_init+0x30>)
 8005684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff ffc3 	bl	8005614 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	3301      	adds	r3, #1
 8005692:	80fb      	strh	r3, [r7, #6]
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d9f2      	bls.n	8005680 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	0801305c 	.word	0x0801305c

080056a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d012      	beq.n	80056e4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	6812      	ldr	r2, [r2, #0]
 80056c6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d006      	beq.n	80056e0 <do_memp_malloc_pool+0x38>
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <do_memp_malloc_pool+0x48>)
 80056d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80056d8:	4906      	ldr	r1, [pc, #24]	; (80056f4 <do_memp_malloc_pool+0x4c>)
 80056da:	4807      	ldr	r0, [pc, #28]	; (80056f8 <do_memp_malloc_pool+0x50>)
 80056dc:	f009 fd70 	bl	800f1c0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	e000      	b.n	80056e6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	080108a8 	.word	0x080108a8
 80056f4:	080108d8 	.word	0x080108d8
 80056f8:	080108fc 	.word	0x080108fc

080056fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d908      	bls.n	800571e <memp_malloc+0x22>
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <memp_malloc+0x3c>)
 800570e:	f240 1257 	movw	r2, #343	; 0x157
 8005712:	490a      	ldr	r1, [pc, #40]	; (800573c <memp_malloc+0x40>)
 8005714:	480a      	ldr	r0, [pc, #40]	; (8005740 <memp_malloc+0x44>)
 8005716:	f009 fd53 	bl	800f1c0 <iprintf>
 800571a:	2300      	movs	r3, #0
 800571c:	e008      	b.n	8005730 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <memp_malloc+0x48>)
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ffbe 	bl	80056a8 <do_memp_malloc_pool>
 800572c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800572e:	68fb      	ldr	r3, [r7, #12]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	080108a8 	.word	0x080108a8
 800573c:	08010938 	.word	0x08010938
 8005740:	080108fc 	.word	0x080108fc
 8005744:	0801305c 	.word	0x0801305c

08005748 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d006      	beq.n	800576a <do_memp_free_pool+0x22>
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <do_memp_free_pool+0x40>)
 800575e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005762:	490a      	ldr	r1, [pc, #40]	; (800578c <do_memp_free_pool+0x44>)
 8005764:	480a      	ldr	r0, [pc, #40]	; (8005790 <do_memp_free_pool+0x48>)
 8005766:	f009 fd2b 	bl	800f1c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	080108a8 	.word	0x080108a8
 800578c:	08010958 	.word	0x08010958
 8005790:	080108fc 	.word	0x080108fc

08005794 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d907      	bls.n	80057b6 <memp_free+0x22>
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <memp_free+0x44>)
 80057a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80057ac:	490b      	ldr	r1, [pc, #44]	; (80057dc <memp_free+0x48>)
 80057ae:	480c      	ldr	r0, [pc, #48]	; (80057e0 <memp_free+0x4c>)
 80057b0:	f009 fd06 	bl	800f1c0 <iprintf>
 80057b4:	e00c      	b.n	80057d0 <memp_free+0x3c>

  if (mem == NULL) {
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <memp_free+0x50>)
 80057c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ffbe 	bl	8005748 <do_memp_free_pool>
 80057cc:	e000      	b.n	80057d0 <memp_free+0x3c>
    return;
 80057ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	080108a8 	.word	0x080108a8
 80057dc:	08010978 	.word	0x08010978
 80057e0:	080108fc 	.word	0x080108fc
 80057e4:	0801305c 	.word	0x0801305c

080057e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d108      	bne.n	800581e <netif_add+0x26>
 800580c:	4b57      	ldr	r3, [pc, #348]	; (800596c <netif_add+0x174>)
 800580e:	f240 1227 	movw	r2, #295	; 0x127
 8005812:	4957      	ldr	r1, [pc, #348]	; (8005970 <netif_add+0x178>)
 8005814:	4857      	ldr	r0, [pc, #348]	; (8005974 <netif_add+0x17c>)
 8005816:	f009 fcd3 	bl	800f1c0 <iprintf>
 800581a:	2300      	movs	r3, #0
 800581c:	e0a2      	b.n	8005964 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <netif_add+0x3e>
 8005824:	4b51      	ldr	r3, [pc, #324]	; (800596c <netif_add+0x174>)
 8005826:	f44f 7294 	mov.w	r2, #296	; 0x128
 800582a:	4953      	ldr	r1, [pc, #332]	; (8005978 <netif_add+0x180>)
 800582c:	4851      	ldr	r0, [pc, #324]	; (8005974 <netif_add+0x17c>)
 800582e:	f009 fcc7 	bl	800f1c0 <iprintf>
 8005832:	2300      	movs	r3, #0
 8005834:	e096      	b.n	8005964 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800583c:	4b4f      	ldr	r3, [pc, #316]	; (800597c <netif_add+0x184>)
 800583e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005846:	4b4d      	ldr	r3, [pc, #308]	; (800597c <netif_add+0x184>)
 8005848:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005850:	4b4a      	ldr	r3, [pc, #296]	; (800597c <netif_add+0x184>)
 8005852:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a45      	ldr	r2, [pc, #276]	; (8005980 <netif_add+0x188>)
 800586a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005886:	4b3f      	ldr	r3, [pc, #252]	; (8005984 <netif_add+0x18c>)
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005894:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f913 	bl	8005ac8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	4798      	blx	r3
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <netif_add+0xba>
    return NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e058      	b.n	8005964 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058b8:	2bff      	cmp	r3, #255	; 0xff
 80058ba:	d103      	bne.n	80058c4 <netif_add+0xcc>
        netif->num = 0;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <netif_add+0x190>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e02b      	b.n	8005928 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d106      	bne.n	80058e6 <netif_add+0xee>
 80058d8:	4b24      	ldr	r3, [pc, #144]	; (800596c <netif_add+0x174>)
 80058da:	f240 128b 	movw	r2, #395	; 0x18b
 80058de:	492b      	ldr	r1, [pc, #172]	; (800598c <netif_add+0x194>)
 80058e0:	4824      	ldr	r0, [pc, #144]	; (8005974 <netif_add+0x17c>)
 80058e2:	f009 fc6d 	bl	800f1c0 <iprintf>
        num_netifs++;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	3301      	adds	r3, #1
 80058ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2bff      	cmp	r3, #255	; 0xff
 80058f0:	dd06      	ble.n	8005900 <netif_add+0x108>
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <netif_add+0x174>)
 80058f4:	f240 128d 	movw	r2, #397	; 0x18d
 80058f8:	4925      	ldr	r1, [pc, #148]	; (8005990 <netif_add+0x198>)
 80058fa:	481e      	ldr	r0, [pc, #120]	; (8005974 <netif_add+0x17c>)
 80058fc:	f009 fc60 	bl	800f1c0 <iprintf>
        if (netif2->num == netif->num) {
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800590c:	429a      	cmp	r2, r3
 800590e:	d108      	bne.n	8005922 <netif_add+0x12a>
          netif->num++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005916:	3301      	adds	r3, #1
 8005918:	b2da      	uxtb	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005920:	e005      	b.n	800592e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1d0      	bne.n	80058d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1be      	bne.n	80058b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800593a:	2bfe      	cmp	r3, #254	; 0xfe
 800593c:	d103      	bne.n	8005946 <netif_add+0x14e>
    netif_num = 0;
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <netif_add+0x18c>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e006      	b.n	8005954 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800594c:	3301      	adds	r3, #1
 800594e:	b2da      	uxtb	r2, r3
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <netif_add+0x18c>)
 8005952:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <netif_add+0x190>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800595c:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <netif_add+0x190>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	08010994 	.word	0x08010994
 8005970:	08010a28 	.word	0x08010a28
 8005974:	080109e4 	.word	0x080109e4
 8005978:	08010a44 	.word	0x08010a44
 800597c:	080130c0 	.word	0x080130c0
 8005980:	08005cdb 	.word	0x08005cdb
 8005984:	20008980 	.word	0x20008980
 8005988:	20008978 	.word	0x20008978
 800598c:	08010a68 	.word	0x08010a68
 8005990:	08010a7c 	.word	0x08010a7c

08005994 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f002 fb81 	bl	80080a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f007 f81f 	bl	800c9ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <netif_do_set_ipaddr+0x20>
 80059ca:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <netif_do_set_ipaddr+0x88>)
 80059cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80059d0:	491c      	ldr	r1, [pc, #112]	; (8005a44 <netif_do_set_ipaddr+0x8c>)
 80059d2:	481d      	ldr	r0, [pc, #116]	; (8005a48 <netif_do_set_ipaddr+0x90>)
 80059d4:	f009 fbf4 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <netif_do_set_ipaddr+0x34>
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <netif_do_set_ipaddr+0x88>)
 80059e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80059e4:	4917      	ldr	r1, [pc, #92]	; (8005a44 <netif_do_set_ipaddr+0x8c>)
 80059e6:	4818      	ldr	r0, [pc, #96]	; (8005a48 <netif_do_set_ipaddr+0x90>)
 80059e8:	f009 fbea 	bl	800f1c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3304      	adds	r3, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d01c      	beq.n	8005a34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3304      	adds	r3, #4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ffbf 	bl	8005994 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <netif_do_set_ipaddr+0x6a>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	e000      	b.n	8005a24 <netif_do_set_ipaddr+0x6c>
 8005a22:	2300      	movs	r3, #0
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005a28:	2101      	movs	r1, #1
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f8d2 	bl	8005bd4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	08010994 	.word	0x08010994
 8005a44:	08010aac 	.word	0x08010aac
 8005a48:	080109e4 	.word	0x080109e4

08005a4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d00a      	beq.n	8005a7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <netif_do_set_netmask+0x26>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	e000      	b.n	8005a74 <netif_do_set_netmask+0x28>
 8005a72:	2300      	movs	r3, #0
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d00a      	beq.n	8005aba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <netif_do_set_gw+0x26>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	e000      	b.n	8005ab2 <netif_do_set_gw+0x28>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <netif_set_addr+0x90>)
 8005ae6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <netif_set_addr+0x90>)
 8005af0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005af8:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <netif_set_addr+0x90>)
 8005afa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <netif_set_addr+0x42>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <netif_set_addr+0x46>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <netif_set_addr+0x48>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d006      	beq.n	8005b26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005b18:	f107 0310 	add.w	r3, r7, #16
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff ff49 	bl	80059b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff ff8e 	bl	8005a4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ffa8 	bl	8005a8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	461a      	mov	r2, r3
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff ff35 	bl	80059b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005b4e:	bf00      	nop
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	080130c0 	.word	0x080130c0

08005b5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005b64:	4a04      	ldr	r2, [pc, #16]	; (8005b78 <netif_set_default+0x1c>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	2000897c 	.word	0x2000897c

08005b7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <netif_set_up+0x1e>
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <netif_set_up+0x4c>)
 8005b8c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005b90:	490e      	ldr	r1, [pc, #56]	; (8005bcc <netif_set_up+0x50>)
 8005b92:	480f      	ldr	r0, [pc, #60]	; (8005bd0 <netif_set_up+0x54>)
 8005b94:	f009 fb14 	bl	800f1c0 <iprintf>
 8005b98:	e013      	b.n	8005bc2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005bba:	2103      	movs	r1, #3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f809 	bl	8005bd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	08010994 	.word	0x08010994
 8005bcc:	08010b1c 	.word	0x08010b1c
 8005bd0:	080109e4 	.word	0x080109e4

08005bd4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <netif_issue_reports+0x20>
 8005be6:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <netif_issue_reports+0x74>)
 8005be8:	f240 326d 	movw	r2, #877	; 0x36d
 8005bec:	4917      	ldr	r1, [pc, #92]	; (8005c4c <netif_issue_reports+0x78>)
 8005bee:	4818      	ldr	r0, [pc, #96]	; (8005c50 <netif_issue_reports+0x7c>)
 8005bf0:	f009 fae6 	bl	800f1c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01e      	beq.n	8005c40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d017      	beq.n	8005c40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d013      	beq.n	8005c42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f007 fe41 	bl	800d8c0 <etharp_request>
 8005c3e:	e000      	b.n	8005c42 <netif_issue_reports+0x6e>
    return;
 8005c40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08010994 	.word	0x08010994
 8005c4c:	08010b38 	.word	0x08010b38
 8005c50:	080109e4 	.word	0x080109e4

08005c54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d107      	bne.n	8005c72 <netif_set_down+0x1e>
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <netif_set_down+0x58>)
 8005c64:	f240 329b 	movw	r2, #923	; 0x39b
 8005c68:	4911      	ldr	r1, [pc, #68]	; (8005cb0 <netif_set_down+0x5c>)
 8005c6a:	4812      	ldr	r0, [pc, #72]	; (8005cb4 <netif_set_down+0x60>)
 8005c6c:	f009 faa8 	bl	800f1c0 <iprintf>
 8005c70:	e019      	b.n	8005ca6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f007 f9cb 	bl	800d03c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	08010994 	.word	0x08010994
 8005cb0:	08010b5c 	.word	0x08010b5c
 8005cb4:	080109e4 	.word	0x080109e4

08005cb8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	61da      	str	r2, [r3, #28]
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005ce6:	f06f 030b 	mvn.w	r3, #11
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005d08:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <netif_get_by_index+0x48>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e00c      	b.n	8005d2a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d16:	3301      	adds	r3, #1
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	79fa      	ldrb	r2, [r7, #7]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d101      	bne.n	8005d24 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e006      	b.n	8005d32 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ef      	bne.n	8005d10 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20008978 	.word	0x20008978

08005d44 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <pbuf_free_ooseq+0x38>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <pbuf_free_ooseq+0x3c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	e00a      	b.n	8005d6e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 f9df 	bl	8008124 <tcp_free_ooseq>
      return;
 8005d66:	e005      	b.n	8005d74 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f1      	bne.n	8005d58 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20008981 	.word	0x20008981
 8005d80:	20008990 	.word	0x20008990

08005d84 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <pbuf_pool_is_empty+0x14>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d8e:	bf00      	nop
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	20008981 	.word	0x20008981

08005d9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	460b      	mov	r3, r1
 8005dac:	80fb      	strh	r3, [r7, #6]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	88ba      	ldrh	r2, [r7, #4]
 8005dc8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005dca:	8b3b      	ldrh	r3, [r7, #24]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	7f3a      	ldrb	r2, [r7, #28]
 8005dd6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	73da      	strb	r2, [r3, #15]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08c      	sub	sp, #48	; 0x30
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	80bb      	strh	r3, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005e0c:	d07f      	beq.n	8005f0e <pbuf_alloc+0x11e>
 8005e0e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005e12:	f300 80c8 	bgt.w	8005fa6 <pbuf_alloc+0x1b6>
 8005e16:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005e1a:	d010      	beq.n	8005e3e <pbuf_alloc+0x4e>
 8005e1c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005e20:	f300 80c1 	bgt.w	8005fa6 <pbuf_alloc+0x1b6>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d002      	beq.n	8005e2e <pbuf_alloc+0x3e>
 8005e28:	2b41      	cmp	r3, #65	; 0x41
 8005e2a:	f040 80bc 	bne.w	8005fa6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	88bb      	ldrh	r3, [r7, #4]
 8005e32:	4619      	mov	r1, r3
 8005e34:	2000      	movs	r0, #0
 8005e36:	f000 f8d1 	bl	8005fdc <pbuf_alloc_reference>
 8005e3a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005e3c:	e0bd      	b.n	8005fba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005e46:	88bb      	ldrh	r3, [r7, #4]
 8005e48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005e4a:	2008      	movs	r0, #8
 8005e4c:	f7ff fc56 	bl	80056fc <memp_malloc>
 8005e50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005e58:	f7ff ff94 	bl	8005d84 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e64:	f000 faa8 	bl	80063b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e0a7      	b.n	8005fbc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005e6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e6e:	3303      	adds	r3, #3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8b7a      	ldrh	r2, [r7, #26]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	bf28      	it	cs
 8005e84:	4613      	movcs	r3, r2
 8005e86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e8a:	3310      	adds	r3, #16
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3303      	adds	r3, #3
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	4618      	mov	r0, r3
 8005e98:	89f9      	ldrh	r1, [r7, #14]
 8005e9a:	8b7a      	ldrh	r2, [r7, #26]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	887b      	ldrh	r3, [r7, #2]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	6938      	ldr	r0, [r7, #16]
 8005eaa:	f7ff ff77 	bl	8005d9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <pbuf_alloc+0xd8>
 8005eba:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <pbuf_alloc+0x1d4>)
 8005ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ec0:	4941      	ldr	r1, [pc, #260]	; (8005fc8 <pbuf_alloc+0x1d8>)
 8005ec2:	4842      	ldr	r0, [pc, #264]	; (8005fcc <pbuf_alloc+0x1dc>)
 8005ec4:	f009 f97c 	bl	800f1c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005eca:	3303      	adds	r3, #3
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005ed4:	d106      	bne.n	8005ee4 <pbuf_alloc+0xf4>
 8005ed6:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <pbuf_alloc+0x1d4>)
 8005ed8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005edc:	493c      	ldr	r1, [pc, #240]	; (8005fd0 <pbuf_alloc+0x1e0>)
 8005ede:	483b      	ldr	r0, [pc, #236]	; (8005fcc <pbuf_alloc+0x1dc>)
 8005ee0:	f009 f96e 	bl	800f1c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
 8005eee:	e002      	b.n	8005ef6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005efa:	8b7a      	ldrh	r2, [r7, #26]
 8005efc:	89fb      	ldrh	r3, [r7, #14]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005f06:	8b7b      	ldrh	r3, [r7, #26]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d19e      	bne.n	8005e4a <pbuf_alloc+0x5a>
      break;
 8005f0c:	e055      	b.n	8005fba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f10:	3303      	adds	r3, #3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f023 0303 	bic.w	r3, r3, #3
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	88bb      	ldrh	r3, [r7, #4]
 8005f1c:	3303      	adds	r3, #3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f023 0303 	bic.w	r3, r3, #3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	4413      	add	r3, r2
 8005f28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005f2a:	8b3b      	ldrh	r3, [r7, #24]
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005f30:	8b3a      	ldrh	r2, [r7, #24]
 8005f32:	88bb      	ldrh	r3, [r7, #4]
 8005f34:	3303      	adds	r3, #3
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d306      	bcc.n	8005f4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005f3e:	8afa      	ldrh	r2, [r7, #22]
 8005f40:	88bb      	ldrh	r3, [r7, #4]
 8005f42:	3303      	adds	r3, #3
 8005f44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d201      	bcs.n	8005f50 <pbuf_alloc+0x160>
        return NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e035      	b.n	8005fbc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005f50:	8afb      	ldrh	r3, [r7, #22]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fa64 	bl	8005420 <mem_malloc>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <pbuf_alloc+0x174>
        return NULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e02b      	b.n	8005fbc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f66:	3310      	adds	r3, #16
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3303      	adds	r3, #3
 8005f6e:	f023 0303 	bic.w	r3, r3, #3
 8005f72:	4618      	mov	r0, r3
 8005f74:	88b9      	ldrh	r1, [r7, #4]
 8005f76:	88ba      	ldrh	r2, [r7, #4]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	460b      	mov	r3, r1
 8005f82:	4601      	mov	r1, r0
 8005f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f86:	f7ff ff09 	bl	8005d9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d010      	beq.n	8005fb8 <pbuf_alloc+0x1c8>
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <pbuf_alloc+0x1d4>)
 8005f98:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005f9c:	490d      	ldr	r1, [pc, #52]	; (8005fd4 <pbuf_alloc+0x1e4>)
 8005f9e:	480b      	ldr	r0, [pc, #44]	; (8005fcc <pbuf_alloc+0x1dc>)
 8005fa0:	f009 f90e 	bl	800f1c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005fa4:	e008      	b.n	8005fb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <pbuf_alloc+0x1d4>)
 8005fa8:	f240 1227 	movw	r2, #295	; 0x127
 8005fac:	490a      	ldr	r1, [pc, #40]	; (8005fd8 <pbuf_alloc+0x1e8>)
 8005fae:	4807      	ldr	r0, [pc, #28]	; (8005fcc <pbuf_alloc+0x1dc>)
 8005fb0:	f009 f906 	bl	800f1c0 <iprintf>
      return NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e001      	b.n	8005fbc <pbuf_alloc+0x1cc>
      break;
 8005fb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3728      	adds	r7, #40	; 0x28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08010bc4 	.word	0x08010bc4
 8005fc8:	08010bf4 	.word	0x08010bf4
 8005fcc:	08010c24 	.word	0x08010c24
 8005fd0:	08010c4c 	.word	0x08010c4c
 8005fd4:	08010c80 	.word	0x08010c80
 8005fd8:	08010cac 	.word	0x08010cac

08005fdc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	807b      	strh	r3, [r7, #2]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005fec:	883b      	ldrh	r3, [r7, #0]
 8005fee:	2b41      	cmp	r3, #65	; 0x41
 8005ff0:	d009      	beq.n	8006006 <pbuf_alloc_reference+0x2a>
 8005ff2:	883b      	ldrh	r3, [r7, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d006      	beq.n	8006006 <pbuf_alloc_reference+0x2a>
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <pbuf_alloc_reference+0x5c>)
 8005ffa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005ffe:	490f      	ldr	r1, [pc, #60]	; (800603c <pbuf_alloc_reference+0x60>)
 8006000:	480f      	ldr	r0, [pc, #60]	; (8006040 <pbuf_alloc_reference+0x64>)
 8006002:	f009 f8dd 	bl	800f1c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006006:	2007      	movs	r0, #7
 8006008:	f7ff fb78 	bl	80056fc <memp_malloc>
 800600c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	e00b      	b.n	8006030 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006018:	8879      	ldrh	r1, [r7, #2]
 800601a:	887a      	ldrh	r2, [r7, #2]
 800601c:	2300      	movs	r3, #0
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	883b      	ldrh	r3, [r7, #0]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	460b      	mov	r3, r1
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff feb7 	bl	8005d9c <pbuf_init_alloced_pbuf>
  return p;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	08010bc4 	.word	0x08010bc4
 800603c:	08010cc8 	.word	0x08010cc8
 8006040:	08010c24 	.word	0x08010c24

08006044 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8
 800604a:	607b      	str	r3, [r7, #4]
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	460b      	mov	r3, r1
 8006052:	81bb      	strh	r3, [r7, #12]
 8006054:	4613      	mov	r3, r2
 8006056:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800605c:	8a7b      	ldrh	r3, [r7, #18]
 800605e:	3303      	adds	r3, #3
 8006060:	f023 0203 	bic.w	r2, r3, #3
 8006064:	89bb      	ldrh	r3, [r7, #12]
 8006066:	441a      	add	r2, r3
 8006068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800606a:	429a      	cmp	r2, r3
 800606c:	d901      	bls.n	8006072 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	e018      	b.n	80060a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006078:	8a7b      	ldrh	r3, [r7, #18]
 800607a:	3303      	adds	r3, #3
 800607c:	f023 0303 	bic.w	r3, r3, #3
 8006080:	6a3a      	ldr	r2, [r7, #32]
 8006082:	4413      	add	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e001      	b.n	800608c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	89b9      	ldrh	r1, [r7, #12]
 8006090:	89ba      	ldrh	r2, [r7, #12]
 8006092:	2302      	movs	r3, #2
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	897b      	ldrh	r3, [r7, #10]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	460b      	mov	r3, r1
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	f7ff fe7d 	bl	8005d9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80060a2:	687b      	ldr	r3, [r7, #4]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <pbuf_realloc+0x20>
 80060be:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <pbuf_realloc+0xfc>)
 80060c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80060c4:	4939      	ldr	r1, [pc, #228]	; (80061ac <pbuf_realloc+0x100>)
 80060c6:	483a      	ldr	r0, [pc, #232]	; (80061b0 <pbuf_realloc+0x104>)
 80060c8:	f009 f87a 	bl	800f1c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	891b      	ldrh	r3, [r3, #8]
 80060d0:	887a      	ldrh	r2, [r7, #2]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d263      	bcs.n	800619e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	891a      	ldrh	r2, [r3, #8]
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80060e0:	887b      	ldrh	r3, [r7, #2]
 80060e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80060e8:	e018      	b.n	800611c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	895b      	ldrh	r3, [r3, #10]
 80060ee:	897a      	ldrh	r2, [r7, #10]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	891a      	ldrh	r2, [r3, #8]
 80060f8:	893b      	ldrh	r3, [r7, #8]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <pbuf_realloc+0x70>
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <pbuf_realloc+0xfc>)
 8006110:	f240 12af 	movw	r2, #431	; 0x1af
 8006114:	4927      	ldr	r1, [pc, #156]	; (80061b4 <pbuf_realloc+0x108>)
 8006116:	4826      	ldr	r0, [pc, #152]	; (80061b0 <pbuf_realloc+0x104>)
 8006118:	f009 f852 	bl	800f1c0 <iprintf>
  while (rem_len > q->len) {
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	895b      	ldrh	r3, [r3, #10]
 8006120:	897a      	ldrh	r2, [r7, #10]
 8006122:	429a      	cmp	r2, r3
 8006124:	d8e1      	bhi.n	80060ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	7b1b      	ldrb	r3, [r3, #12]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	2b00      	cmp	r3, #0
 8006130:	d121      	bne.n	8006176 <pbuf_realloc+0xca>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	895b      	ldrh	r3, [r3, #10]
 8006136:	897a      	ldrh	r2, [r7, #10]
 8006138:	429a      	cmp	r2, r3
 800613a:	d01c      	beq.n	8006176 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	7b5b      	ldrb	r3, [r3, #13]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d116      	bne.n	8006176 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	b29a      	uxth	r2, r3
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	4413      	add	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	4619      	mov	r1, r3
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff f864 	bl	8005228 <mem_trim>
 8006160:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <pbuf_realloc+0xca>
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <pbuf_realloc+0xfc>)
 800616a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800616e:	4912      	ldr	r1, [pc, #72]	; (80061b8 <pbuf_realloc+0x10c>)
 8006170:	480f      	ldr	r0, [pc, #60]	; (80061b0 <pbuf_realloc+0x104>)
 8006172:	f009 f825 	bl	800f1c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	897a      	ldrh	r2, [r7, #10]
 800617a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	895a      	ldrh	r2, [r3, #10]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f911 	bl	80063b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e000      	b.n	80061a0 <pbuf_realloc+0xf4>
    return;
 800619e:	bf00      	nop

}
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	08010bc4 	.word	0x08010bc4
 80061ac:	08010cdc 	.word	0x08010cdc
 80061b0:	08010c24 	.word	0x08010c24
 80061b4:	08010cf4 	.word	0x08010cf4
 80061b8:	08010d0c 	.word	0x08010d0c

080061bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <pbuf_add_header_impl+0x22>
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <pbuf_add_header_impl+0xc4>)
 80061d2:	f240 12df 	movw	r2, #479	; 0x1df
 80061d6:	492b      	ldr	r1, [pc, #172]	; (8006284 <pbuf_add_header_impl+0xc8>)
 80061d8:	482b      	ldr	r0, [pc, #172]	; (8006288 <pbuf_add_header_impl+0xcc>)
 80061da:	f008 fff1 	bl	800f1c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <pbuf_add_header_impl+0x30>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ea:	d301      	bcc.n	80061f0 <pbuf_add_header_impl+0x34>
    return 1;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e043      	b.n	8006278 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <pbuf_add_header_impl+0x3e>
    return 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e03e      	b.n	8006278 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	891a      	ldrh	r2, [r3, #8]
 8006202:	8a7b      	ldrh	r3, [r7, #18]
 8006204:	4413      	add	r3, r2
 8006206:	b29b      	uxth	r3, r3
 8006208:	8a7a      	ldrh	r2, [r7, #18]
 800620a:	429a      	cmp	r2, r3
 800620c:	d901      	bls.n	8006212 <pbuf_add_header_impl+0x56>
    return 1;
 800620e:	2301      	movs	r3, #1
 8006210:	e032      	b.n	8006278 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	7b1b      	ldrb	r3, [r3, #12]
 8006216:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006218:	8a3b      	ldrh	r3, [r7, #16]
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00c      	beq.n	800623c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	425b      	negs	r3, r3
 800622a:	4413      	add	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3310      	adds	r3, #16
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	429a      	cmp	r2, r3
 8006236:	d20d      	bcs.n	8006254 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006238:	2301      	movs	r3, #1
 800623a:	e01d      	b.n	8006278 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d006      	beq.n	8006250 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	425b      	negs	r3, r3
 800624a:	4413      	add	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e001      	b.n	8006254 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006250:	2301      	movs	r3, #1
 8006252:	e011      	b.n	8006278 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	895a      	ldrh	r2, [r3, #10]
 800625e:	8a7b      	ldrh	r3, [r7, #18]
 8006260:	4413      	add	r3, r2
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	891a      	ldrh	r2, [r3, #8]
 800626c:	8a7b      	ldrh	r3, [r7, #18]
 800626e:	4413      	add	r3, r2
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	811a      	strh	r2, [r3, #8]


  return 0;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	08010bc4 	.word	0x08010bc4
 8006284:	08010d28 	.word	0x08010d28
 8006288:	08010c24 	.word	0x08010c24

0800628c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006296:	2200      	movs	r2, #0
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff ff8e 	bl	80061bc <pbuf_add_header_impl>
 80062a0:	4603      	mov	r3, r0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <pbuf_remove_header+0x1e>
 80062bc:	4b20      	ldr	r3, [pc, #128]	; (8006340 <pbuf_remove_header+0x94>)
 80062be:	f240 224b 	movw	r2, #587	; 0x24b
 80062c2:	4920      	ldr	r1, [pc, #128]	; (8006344 <pbuf_remove_header+0x98>)
 80062c4:	4820      	ldr	r0, [pc, #128]	; (8006348 <pbuf_remove_header+0x9c>)
 80062c6:	f008 ff7b 	bl	800f1c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <pbuf_remove_header+0x2c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d301      	bcc.n	80062dc <pbuf_remove_header+0x30>
    return 1;
 80062d8:	2301      	movs	r3, #1
 80062da:	e02c      	b.n	8006336 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <pbuf_remove_header+0x3a>
    return 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e027      	b.n	8006336 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	895b      	ldrh	r3, [r3, #10]
 80062ee:	89fa      	ldrh	r2, [r7, #14]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d908      	bls.n	8006306 <pbuf_remove_header+0x5a>
 80062f4:	4b12      	ldr	r3, [pc, #72]	; (8006340 <pbuf_remove_header+0x94>)
 80062f6:	f240 2255 	movw	r2, #597	; 0x255
 80062fa:	4914      	ldr	r1, [pc, #80]	; (800634c <pbuf_remove_header+0xa0>)
 80062fc:	4812      	ldr	r0, [pc, #72]	; (8006348 <pbuf_remove_header+0x9c>)
 80062fe:	f008 ff5f 	bl	800f1c0 <iprintf>
 8006302:	2301      	movs	r3, #1
 8006304:	e017      	b.n	8006336 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	895a      	ldrh	r2, [r3, #10]
 800631c:	89fb      	ldrh	r3, [r7, #14]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	891a      	ldrh	r2, [r3, #8]
 800632a:	89fb      	ldrh	r3, [r7, #14]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	08010bc4 	.word	0x08010bc4
 8006344:	08010d28 	.word	0x08010d28
 8006348:	08010c24 	.word	0x08010c24
 800634c:	08010d34 	.word	0x08010d34

08006350 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
 800635c:	4613      	mov	r3, r2
 800635e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006364:	2b00      	cmp	r3, #0
 8006366:	da08      	bge.n	800637a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800636c:	425b      	negs	r3, r3
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff ff9b 	bl	80062ac <pbuf_remove_header>
 8006376:	4603      	mov	r3, r0
 8006378:	e007      	b.n	800638a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800637a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800637e:	787a      	ldrb	r2, [r7, #1]
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff ff1a 	bl	80061bc <pbuf_add_header_impl>
 8006388:	4603      	mov	r3, r0
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800639e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063a2:	2201      	movs	r2, #1
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff ffd2 	bl	8006350 <pbuf_header_impl>
 80063ac:	4603      	mov	r3, r0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <pbuf_free+0x22>
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <pbuf_free+0xf8>)
 80063ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80063d2:	4938      	ldr	r1, [pc, #224]	; (80064b4 <pbuf_free+0xfc>)
 80063d4:	4838      	ldr	r0, [pc, #224]	; (80064b8 <pbuf_free+0x100>)
 80063d6:	f008 fef3 	bl	800f1c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	e063      	b.n	80064a6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80063e2:	e05c      	b.n	800649e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7b9b      	ldrb	r3, [r3, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <pbuf_free+0x42>
 80063ec:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <pbuf_free+0xf8>)
 80063ee:	f240 22f1 	movw	r2, #753	; 0x2f1
 80063f2:	4932      	ldr	r1, [pc, #200]	; (80064bc <pbuf_free+0x104>)
 80063f4:	4830      	ldr	r0, [pc, #192]	; (80064b8 <pbuf_free+0x100>)
 80063f6:	f008 fee3 	bl	800f1c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	7b9b      	ldrb	r3, [r3, #14]
 80063fe:	3b01      	subs	r3, #1
 8006400:	b2da      	uxtb	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	739a      	strb	r2, [r3, #14]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7b9b      	ldrb	r3, [r3, #14]
 800640a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800640c:	7dbb      	ldrb	r3, [r7, #22]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d143      	bne.n	800649a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7b1b      	ldrb	r3, [r3, #12]
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7b5b      	ldrb	r3, [r3, #13]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d011      	beq.n	8006452 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <pbuf_free+0x90>
 800643a:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <pbuf_free+0xf8>)
 800643c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006440:	491f      	ldr	r1, [pc, #124]	; (80064c0 <pbuf_free+0x108>)
 8006442:	481d      	ldr	r0, [pc, #116]	; (80064b8 <pbuf_free+0x100>)
 8006444:	f008 febc 	bl	800f1c0 <iprintf>
        pc->custom_free_function(p);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	e01d      	b.n	800648e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d104      	bne.n	8006462 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	2008      	movs	r0, #8
 800645c:	f7ff f99a 	bl	8005794 <memp_free>
 8006460:	e015      	b.n	800648e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d104      	bne.n	8006472 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	2007      	movs	r0, #7
 800646c:	f7ff f992 	bl	8005794 <memp_free>
 8006470:	e00d      	b.n	800648e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <pbuf_free+0xc8>
          mem_free(p);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fe fe6b 	bl	8005154 <mem_free>
 800647e:	e006      	b.n	800648e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <pbuf_free+0xf8>)
 8006482:	f240 320f 	movw	r2, #783	; 0x30f
 8006486:	490f      	ldr	r1, [pc, #60]	; (80064c4 <pbuf_free+0x10c>)
 8006488:	480b      	ldr	r0, [pc, #44]	; (80064b8 <pbuf_free+0x100>)
 800648a:	f008 fe99 	bl	800f1c0 <iprintf>
        }
      }
      count++;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	3301      	adds	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	e001      	b.n	800649e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d19f      	bne.n	80063e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	08010bc4 	.word	0x08010bc4
 80064b4:	08010d28 	.word	0x08010d28
 80064b8:	08010c24 	.word	0x08010c24
 80064bc:	08010d54 	.word	0x08010d54
 80064c0:	08010d6c 	.word	0x08010d6c
 80064c4:	08010d90 	.word	0x08010d90

080064c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80064d4:	e005      	b.n	80064e2 <pbuf_clen+0x1a>
    ++len;
 80064d6:	89fb      	ldrh	r3, [r7, #14]
 80064d8:	3301      	adds	r3, #1
 80064da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f6      	bne.n	80064d6 <pbuf_clen+0xe>
  }
  return len;
 80064e8:	89fb      	ldrh	r3, [r7, #14]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7b9b      	ldrb	r3, [r3, #14]
 800650a:	3301      	adds	r3, #1
 800650c:	b2da      	uxtb	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7b9b      	ldrb	r3, [r3, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <pbuf_ref+0x30>
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <pbuf_ref+0x38>)
 800651c:	f240 3242 	movw	r2, #834	; 0x342
 8006520:	4904      	ldr	r1, [pc, #16]	; (8006534 <pbuf_ref+0x3c>)
 8006522:	4805      	ldr	r0, [pc, #20]	; (8006538 <pbuf_ref+0x40>)
 8006524:	f008 fe4c 	bl	800f1c0 <iprintf>
  }
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	08010bc4 	.word	0x08010bc4
 8006534:	08010da4 	.word	0x08010da4
 8006538:	08010c24 	.word	0x08010c24

0800653c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <pbuf_cat+0x16>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d107      	bne.n	8006562 <pbuf_cat+0x26>
 8006552:	4b20      	ldr	r3, [pc, #128]	; (80065d4 <pbuf_cat+0x98>)
 8006554:	f240 3259 	movw	r2, #857	; 0x359
 8006558:	491f      	ldr	r1, [pc, #124]	; (80065d8 <pbuf_cat+0x9c>)
 800655a:	4820      	ldr	r0, [pc, #128]	; (80065dc <pbuf_cat+0xa0>)
 800655c:	f008 fe30 	bl	800f1c0 <iprintf>
 8006560:	e034      	b.n	80065cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e00a      	b.n	800657e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	891a      	ldrh	r2, [r3, #8]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	891b      	ldrh	r3, [r3, #8]
 8006570:	4413      	add	r3, r2
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	891a      	ldrh	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	895b      	ldrh	r3, [r3, #10]
 800658e:	429a      	cmp	r2, r3
 8006590:	d006      	beq.n	80065a0 <pbuf_cat+0x64>
 8006592:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <pbuf_cat+0x98>)
 8006594:	f240 3262 	movw	r2, #866	; 0x362
 8006598:	4911      	ldr	r1, [pc, #68]	; (80065e0 <pbuf_cat+0xa4>)
 800659a:	4810      	ldr	r0, [pc, #64]	; (80065dc <pbuf_cat+0xa0>)
 800659c:	f008 fe10 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d006      	beq.n	80065b6 <pbuf_cat+0x7a>
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <pbuf_cat+0x98>)
 80065aa:	f240 3263 	movw	r2, #867	; 0x363
 80065ae:	490d      	ldr	r1, [pc, #52]	; (80065e4 <pbuf_cat+0xa8>)
 80065b0:	480a      	ldr	r0, [pc, #40]	; (80065dc <pbuf_cat+0xa0>)
 80065b2:	f008 fe05 	bl	800f1c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	891a      	ldrh	r2, [r3, #8]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	891b      	ldrh	r3, [r3, #8]
 80065be:	4413      	add	r3, r2
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	08010bc4 	.word	0x08010bc4
 80065d8:	08010db8 	.word	0x08010db8
 80065dc:	08010c24 	.word	0x08010c24
 80065e0:	08010df0 	.word	0x08010df0
 80065e4:	08010e20 	.word	0x08010e20

080065e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ffa1 	bl	800653c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80065fa:	6838      	ldr	r0, [r7, #0]
 80065fc:	f7ff ff7c 	bl	80064f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <pbuf_copy+0x2a>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <pbuf_copy+0x2a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	891a      	ldrh	r2, [r3, #8]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	891b      	ldrh	r3, [r3, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	d209      	bcs.n	8006646 <pbuf_copy+0x3e>
 8006632:	4b57      	ldr	r3, [pc, #348]	; (8006790 <pbuf_copy+0x188>)
 8006634:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006638:	4956      	ldr	r1, [pc, #344]	; (8006794 <pbuf_copy+0x18c>)
 800663a:	4857      	ldr	r0, [pc, #348]	; (8006798 <pbuf_copy+0x190>)
 800663c:	f008 fdc0 	bl	800f1c0 <iprintf>
 8006640:	f06f 030f 	mvn.w	r3, #15
 8006644:	e09f      	b.n	8006786 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	895b      	ldrh	r3, [r3, #10]
 800664a:	461a      	mov	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	895b      	ldrh	r3, [r3, #10]
 8006654:	4619      	mov	r1, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1acb      	subs	r3, r1, r3
 800665a:	429a      	cmp	r2, r3
 800665c:	d306      	bcc.n	800666c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	895b      	ldrh	r3, [r3, #10]
 8006662:	461a      	mov	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e005      	b.n	8006678 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	895b      	ldrh	r3, [r3, #10]
 8006670:	461a      	mov	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	18d0      	adds	r0, r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4619      	mov	r1, r3
 800668c:	f008 fd68 	bl	800f160 <memcpy>
    offset_to += len;
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	895b      	ldrh	r3, [r3, #10]
 80066a4:	461a      	mov	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d906      	bls.n	80066ba <pbuf_copy+0xb2>
 80066ac:	4b38      	ldr	r3, [pc, #224]	; (8006790 <pbuf_copy+0x188>)
 80066ae:	f240 32d9 	movw	r2, #985	; 0x3d9
 80066b2:	493a      	ldr	r1, [pc, #232]	; (800679c <pbuf_copy+0x194>)
 80066b4:	4838      	ldr	r0, [pc, #224]	; (8006798 <pbuf_copy+0x190>)
 80066b6:	f008 fd83 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	895b      	ldrh	r3, [r3, #10]
 80066be:	461a      	mov	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d906      	bls.n	80066d4 <pbuf_copy+0xcc>
 80066c6:	4b32      	ldr	r3, [pc, #200]	; (8006790 <pbuf_copy+0x188>)
 80066c8:	f240 32da 	movw	r2, #986	; 0x3da
 80066cc:	4934      	ldr	r1, [pc, #208]	; (80067a0 <pbuf_copy+0x198>)
 80066ce:	4832      	ldr	r0, [pc, #200]	; (8006798 <pbuf_copy+0x190>)
 80066d0:	f008 fd76 	bl	800f1c0 <iprintf>
    if (offset_from >= p_from->len) {
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	461a      	mov	r2, r3
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4293      	cmp	r3, r2
 80066de:	d304      	bcc.n	80066ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	895b      	ldrh	r3, [r3, #10]
 80066ee:	461a      	mov	r2, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d114      	bne.n	8006720 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10c      	bne.n	8006720 <pbuf_copy+0x118>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <pbuf_copy+0x118>
 800670c:	4b20      	ldr	r3, [pc, #128]	; (8006790 <pbuf_copy+0x188>)
 800670e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006712:	4924      	ldr	r1, [pc, #144]	; (80067a4 <pbuf_copy+0x19c>)
 8006714:	4820      	ldr	r0, [pc, #128]	; (8006798 <pbuf_copy+0x190>)
 8006716:	f008 fd53 	bl	800f1c0 <iprintf>
 800671a:	f06f 030f 	mvn.w	r3, #15
 800671e:	e032      	b.n	8006786 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d013      	beq.n	800674e <pbuf_copy+0x146>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	895a      	ldrh	r2, [r3, #10]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	891b      	ldrh	r3, [r3, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d10d      	bne.n	800674e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <pbuf_copy+0x146>
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <pbuf_copy+0x188>)
 800673c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006740:	4919      	ldr	r1, [pc, #100]	; (80067a8 <pbuf_copy+0x1a0>)
 8006742:	4815      	ldr	r0, [pc, #84]	; (8006798 <pbuf_copy+0x190>)
 8006744:	f008 fd3c 	bl	800f1c0 <iprintf>
 8006748:	f06f 0305 	mvn.w	r3, #5
 800674c:	e01b      	b.n	8006786 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d013      	beq.n	800677c <pbuf_copy+0x174>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	895a      	ldrh	r2, [r3, #10]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	891b      	ldrh	r3, [r3, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d10d      	bne.n	800677c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d009      	beq.n	800677c <pbuf_copy+0x174>
 8006768:	4b09      	ldr	r3, [pc, #36]	; (8006790 <pbuf_copy+0x188>)
 800676a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800676e:	490e      	ldr	r1, [pc, #56]	; (80067a8 <pbuf_copy+0x1a0>)
 8006770:	4809      	ldr	r0, [pc, #36]	; (8006798 <pbuf_copy+0x190>)
 8006772:	f008 fd25 	bl	800f1c0 <iprintf>
 8006776:	f06f 0305 	mvn.w	r3, #5
 800677a:	e004      	b.n	8006786 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f47f af61 	bne.w	8006646 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	08010bc4 	.word	0x08010bc4
 8006794:	08010e6c 	.word	0x08010e6c
 8006798:	08010c24 	.word	0x08010c24
 800679c:	08010e9c 	.word	0x08010e9c
 80067a0:	08010eb4 	.word	0x08010eb4
 80067a4:	08010ed0 	.word	0x08010ed0
 80067a8:	08010ee0 	.word	0x08010ee0

080067ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	460b      	mov	r3, r1
 80067bc:	80fb      	strh	r3, [r7, #6]
 80067be:	4613      	mov	r3, r2
 80067c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <pbuf_copy_partial+0x36>
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <pbuf_copy_partial+0xd4>)
 80067d2:	f240 420a 	movw	r2, #1034	; 0x40a
 80067d6:	492b      	ldr	r1, [pc, #172]	; (8006884 <pbuf_copy_partial+0xd8>)
 80067d8:	482b      	ldr	r0, [pc, #172]	; (8006888 <pbuf_copy_partial+0xdc>)
 80067da:	f008 fcf1 	bl	800f1c0 <iprintf>
 80067de:	2300      	movs	r3, #0
 80067e0:	e04a      	b.n	8006878 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d108      	bne.n	80067fa <pbuf_copy_partial+0x4e>
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <pbuf_copy_partial+0xd4>)
 80067ea:	f240 420b 	movw	r2, #1035	; 0x40b
 80067ee:	4927      	ldr	r1, [pc, #156]	; (800688c <pbuf_copy_partial+0xe0>)
 80067f0:	4825      	ldr	r0, [pc, #148]	; (8006888 <pbuf_copy_partial+0xdc>)
 80067f2:	f008 fce5 	bl	800f1c0 <iprintf>
 80067f6:	2300      	movs	r3, #0
 80067f8:	e03e      	b.n	8006878 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e034      	b.n	800686a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006800:	88bb      	ldrh	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <pbuf_copy_partial+0x70>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	895b      	ldrh	r3, [r3, #10]
 800680a:	88ba      	ldrh	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d305      	bcc.n	800681c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	895b      	ldrh	r3, [r3, #10]
 8006814:	88ba      	ldrh	r2, [r7, #4]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	80bb      	strh	r3, [r7, #4]
 800681a:	e023      	b.n	8006864 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	895a      	ldrh	r2, [r3, #10]
 8006820:	88bb      	ldrh	r3, [r7, #4]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006826:	8b3a      	ldrh	r2, [r7, #24]
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	429a      	cmp	r2, r3
 800682c:	d901      	bls.n	8006832 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006832:	8b7b      	ldrh	r3, [r7, #26]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	18d0      	adds	r0, r2, r3
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	88bb      	ldrh	r3, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	8b3a      	ldrh	r2, [r7, #24]
 8006842:	4619      	mov	r1, r3
 8006844:	f008 fc8c 	bl	800f160 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006848:	8afa      	ldrh	r2, [r7, #22]
 800684a:	8b3b      	ldrh	r3, [r7, #24]
 800684c:	4413      	add	r3, r2
 800684e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006850:	8b7a      	ldrh	r2, [r7, #26]
 8006852:	8b3b      	ldrh	r3, [r7, #24]
 8006854:	4413      	add	r3, r2
 8006856:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	8b3b      	ldrh	r3, [r7, #24]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <pbuf_copy_partial+0xca>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1c4      	bne.n	8006800 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006876:	8afb      	ldrh	r3, [r7, #22]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	08010bc4 	.word	0x08010bc4
 8006884:	08010f0c 	.word	0x08010f0c
 8006888:	08010c24 	.word	0x08010c24
 800688c:	08010f2c 	.word	0x08010f2c

08006890 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <pbuf_take+0x30>
 80068ac:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <pbuf_take+0x108>)
 80068ae:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80068b2:	493a      	ldr	r1, [pc, #232]	; (800699c <pbuf_take+0x10c>)
 80068b4:	483a      	ldr	r0, [pc, #232]	; (80069a0 <pbuf_take+0x110>)
 80068b6:	f008 fc83 	bl	800f1c0 <iprintf>
 80068ba:	f06f 030f 	mvn.w	r3, #15
 80068be:	e067      	b.n	8006990 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <pbuf_take+0x4a>
 80068c6:	4b34      	ldr	r3, [pc, #208]	; (8006998 <pbuf_take+0x108>)
 80068c8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80068cc:	4935      	ldr	r1, [pc, #212]	; (80069a4 <pbuf_take+0x114>)
 80068ce:	4834      	ldr	r0, [pc, #208]	; (80069a0 <pbuf_take+0x110>)
 80068d0:	f008 fc76 	bl	800f1c0 <iprintf>
 80068d4:	f06f 030f 	mvn.w	r3, #15
 80068d8:	e05a      	b.n	8006990 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	891b      	ldrh	r3, [r3, #8]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d909      	bls.n	80068f8 <pbuf_take+0x68>
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <pbuf_take+0x108>)
 80068e6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80068ea:	492f      	ldr	r1, [pc, #188]	; (80069a8 <pbuf_take+0x118>)
 80068ec:	482c      	ldr	r0, [pc, #176]	; (80069a0 <pbuf_take+0x110>)
 80068ee:	f008 fc67 	bl	800f1c0 <iprintf>
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e04b      	b.n	8006990 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <pbuf_take+0x7e>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <pbuf_take+0x7e>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	891b      	ldrh	r3, [r3, #8]
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	429a      	cmp	r2, r3
 800690c:	d902      	bls.n	8006914 <pbuf_take+0x84>
    return ERR_ARG;
 800690e:	f06f 030f 	mvn.w	r3, #15
 8006912:	e03d      	b.n	8006990 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e028      	b.n	800696c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <pbuf_take+0x9e>
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <pbuf_take+0x108>)
 8006922:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006926:	4921      	ldr	r1, [pc, #132]	; (80069ac <pbuf_take+0x11c>)
 8006928:	481d      	ldr	r0, [pc, #116]	; (80069a0 <pbuf_take+0x110>)
 800692a:	f008 fc49 	bl	800f1c0 <iprintf>
    buf_copy_len = total_copy_len;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	895b      	ldrh	r3, [r3, #10]
 8006936:	461a      	mov	r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	4293      	cmp	r3, r2
 800693c:	d902      	bls.n	8006944 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	895b      	ldrh	r3, [r3, #10]
 8006942:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	6858      	ldr	r0, [r3, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4413      	add	r3, r2
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4619      	mov	r1, r3
 8006952:	f008 fc05 	bl	800f160 <memcpy>
    total_copy_len -= buf_copy_len;
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	4413      	add	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1d3      	bne.n	800691a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <pbuf_take+0xf0>
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	429a      	cmp	r2, r3
 800697e:	d006      	beq.n	800698e <pbuf_take+0xfe>
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <pbuf_take+0x108>)
 8006982:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006986:	490a      	ldr	r1, [pc, #40]	; (80069b0 <pbuf_take+0x120>)
 8006988:	4805      	ldr	r0, [pc, #20]	; (80069a0 <pbuf_take+0x110>)
 800698a:	f008 fc19 	bl	800f1c0 <iprintf>
  return ERR_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	08010bc4 	.word	0x08010bc4
 800699c:	08010f9c 	.word	0x08010f9c
 80069a0:	08010c24 	.word	0x08010c24
 80069a4:	08010fb4 	.word	0x08010fb4
 80069a8:	08010fd0 	.word	0x08010fd0
 80069ac:	08010ff0 	.word	0x08010ff0
 80069b0:	08011008 	.word	0x08011008

080069b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	603a      	str	r2, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
 80069c0:	460b      	mov	r3, r1
 80069c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	8919      	ldrh	r1, [r3, #8]
 80069c8:	88ba      	ldrh	r2, [r7, #4]
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff fa0f 	bl	8005df0 <pbuf_alloc>
 80069d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <pbuf_clone+0x2a>
    return NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	e011      	b.n	8006a02 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff fe11 	bl	8006608 <pbuf_copy>
 80069e6:	4603      	mov	r3, r0
 80069e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80069ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <pbuf_clone+0x4c>
 80069f2:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <pbuf_clone+0x58>)
 80069f4:	f240 5224 	movw	r2, #1316	; 0x524
 80069f8:	4905      	ldr	r1, [pc, #20]	; (8006a10 <pbuf_clone+0x5c>)
 80069fa:	4806      	ldr	r0, [pc, #24]	; (8006a14 <pbuf_clone+0x60>)
 80069fc:	f008 fbe0 	bl	800f1c0 <iprintf>
  return q;
 8006a00:	68fb      	ldr	r3, [r7, #12]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08010bc4 	.word	0x08010bc4
 8006a10:	08011038 	.word	0x08011038
 8006a14:	08010c24 	.word	0x08010c24

08006a18 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006a1c:	f008 fbe8 	bl	800f1f0 <rand>
 8006a20:	4603      	mov	r3, r0
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	4b01      	ldr	r3, [pc, #4]	; (8006a38 <tcp_init+0x20>)
 8006a32:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006a34:	bf00      	nop
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	2000000a 	.word	0x2000000a

08006a3c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7d1b      	ldrb	r3, [r3, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d105      	bne.n	8006a58 <tcp_free+0x1c>
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <tcp_free+0x2c>)
 8006a4e:	22d4      	movs	r2, #212	; 0xd4
 8006a50:	4906      	ldr	r1, [pc, #24]	; (8006a6c <tcp_free+0x30>)
 8006a52:	4807      	ldr	r0, [pc, #28]	; (8006a70 <tcp_free+0x34>)
 8006a54:	f008 fbb4 	bl	800f1c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f7fe fe9a 	bl	8005794 <memp_free>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	080110c4 	.word	0x080110c4
 8006a6c:	080110f4 	.word	0x080110f4
 8006a70:	08011108 	.word	0x08011108

08006a74 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7d1b      	ldrb	r3, [r3, #20]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d105      	bne.n	8006a90 <tcp_free_listen+0x1c>
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <tcp_free_listen+0x2c>)
 8006a86:	22df      	movs	r2, #223	; 0xdf
 8006a88:	4906      	ldr	r1, [pc, #24]	; (8006aa4 <tcp_free_listen+0x30>)
 8006a8a:	4807      	ldr	r0, [pc, #28]	; (8006aa8 <tcp_free_listen+0x34>)
 8006a8c:	f008 fb98 	bl	800f1c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	2002      	movs	r0, #2
 8006a94:	f7fe fe7e 	bl	8005794 <memp_free>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	080110c4 	.word	0x080110c4
 8006aa4:	08011130 	.word	0x08011130
 8006aa8:	08011108 	.word	0x08011108

08006aac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006ab0:	f000 fea2 	bl	80077f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <tcp_tmr+0x28>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <tcp_tmr+0x28>)
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <tcp_tmr+0x28>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006acc:	f000 fb54 	bl	8007178 <tcp_slowtmr>
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20008999 	.word	0x20008999

08006ad8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <tcp_remove_listener+0x1c>
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <tcp_remove_listener+0x48>)
 8006aea:	22ff      	movs	r2, #255	; 0xff
 8006aec:	490d      	ldr	r1, [pc, #52]	; (8006b24 <tcp_remove_listener+0x4c>)
 8006aee:	480e      	ldr	r0, [pc, #56]	; (8006b28 <tcp_remove_listener+0x50>)
 8006af0:	f008 fb66 	bl	800f1c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e00a      	b.n	8006b10 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d102      	bne.n	8006b0a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f1      	bne.n	8006afa <tcp_remove_listener+0x22>
    }
  }
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	080110c4 	.word	0x080110c4
 8006b24:	0801114c 	.word	0x0801114c
 8006b28:	08011108 	.word	0x08011108

08006b2c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <tcp_listen_closed+0x1c>
 8006b3a:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <tcp_listen_closed+0x60>)
 8006b3c:	f240 1211 	movw	r2, #273	; 0x111
 8006b40:	4913      	ldr	r1, [pc, #76]	; (8006b90 <tcp_listen_closed+0x64>)
 8006b42:	4814      	ldr	r0, [pc, #80]	; (8006b94 <tcp_listen_closed+0x68>)
 8006b44:	f008 fb3c 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7d1b      	ldrb	r3, [r3, #20]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d006      	beq.n	8006b5e <tcp_listen_closed+0x32>
 8006b50:	4b0e      	ldr	r3, [pc, #56]	; (8006b8c <tcp_listen_closed+0x60>)
 8006b52:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006b56:	4910      	ldr	r1, [pc, #64]	; (8006b98 <tcp_listen_closed+0x6c>)
 8006b58:	480e      	ldr	r0, [pc, #56]	; (8006b94 <tcp_listen_closed+0x68>)
 8006b5a:	f008 fb31 	bl	800f1c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b5e:	2301      	movs	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e00b      	b.n	8006b7c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006b64:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <tcp_listen_closed+0x70>)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff ffb1 	bl	8006ad8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d9f0      	bls.n	8006b64 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	080110c4 	.word	0x080110c4
 8006b90:	08011174 	.word	0x08011174
 8006b94:	08011108 	.word	0x08011108
 8006b98:	08011180 	.word	0x08011180
 8006b9c:	08013098 	.word	0x08013098

08006ba0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af04      	add	r7, sp, #16
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <tcp_close_shutdown+0x20>
 8006bb2:	4b63      	ldr	r3, [pc, #396]	; (8006d40 <tcp_close_shutdown+0x1a0>)
 8006bb4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006bb8:	4962      	ldr	r1, [pc, #392]	; (8006d44 <tcp_close_shutdown+0x1a4>)
 8006bba:	4863      	ldr	r0, [pc, #396]	; (8006d48 <tcp_close_shutdown+0x1a8>)
 8006bbc:	f008 fb00 	bl	800f1c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d066      	beq.n	8006c94 <tcp_close_shutdown+0xf4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7d1b      	ldrb	r3, [r3, #20]
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d003      	beq.n	8006bd6 <tcp_close_shutdown+0x36>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7d1b      	ldrb	r3, [r3, #20]
 8006bd2:	2b07      	cmp	r3, #7
 8006bd4:	d15e      	bne.n	8006c94 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <tcp_close_shutdown+0x48>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006be6:	d055      	beq.n	8006c94 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8b5b      	ldrh	r3, [r3, #26]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <tcp_close_shutdown+0x62>
 8006bf4:	4b52      	ldr	r3, [pc, #328]	; (8006d40 <tcp_close_shutdown+0x1a0>)
 8006bf6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006bfa:	4954      	ldr	r1, [pc, #336]	; (8006d4c <tcp_close_shutdown+0x1ac>)
 8006bfc:	4852      	ldr	r0, [pc, #328]	; (8006d48 <tcp_close_shutdown+0x1a8>)
 8006bfe:	f008 fadf 	bl	800f1c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006c0a:	687d      	ldr	r5, [r7, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	8ad2      	ldrh	r2, [r2, #22]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	8b09      	ldrh	r1, [r1, #24]
 8006c18:	9102      	str	r1, [sp, #8]
 8006c1a:	9201      	str	r2, [sp, #4]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	462b      	mov	r3, r5
 8006c20:	4622      	mov	r2, r4
 8006c22:	4601      	mov	r1, r0
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f004 fe91 	bl	800b94c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f8c6 	bl	8007dbc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006c30:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <tcp_close_shutdown+0x1b0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d105      	bne.n	8006c46 <tcp_close_shutdown+0xa6>
 8006c3a:	4b45      	ldr	r3, [pc, #276]	; (8006d50 <tcp_close_shutdown+0x1b0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a43      	ldr	r2, [pc, #268]	; (8006d50 <tcp_close_shutdown+0x1b0>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e013      	b.n	8006c6e <tcp_close_shutdown+0xce>
 8006c46:	4b42      	ldr	r3, [pc, #264]	; (8006d50 <tcp_close_shutdown+0x1b0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e00c      	b.n	8006c68 <tcp_close_shutdown+0xc8>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d104      	bne.n	8006c62 <tcp_close_shutdown+0xc2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	60da      	str	r2, [r3, #12]
 8006c60:	e005      	b.n	8006c6e <tcp_close_shutdown+0xce>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1ef      	bne.n	8006c4e <tcp_close_shutdown+0xae>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	60da      	str	r2, [r3, #12]
 8006c74:	4b37      	ldr	r3, [pc, #220]	; (8006d54 <tcp_close_shutdown+0x1b4>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006c7a:	4b37      	ldr	r3, [pc, #220]	; (8006d58 <tcp_close_shutdown+0x1b8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d102      	bne.n	8006c8a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006c84:	f003 fd5e 	bl	800a744 <tcp_trigger_input_pcb_close>
 8006c88:	e002      	b.n	8006c90 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fed6 	bl	8006a3c <tcp_free>
      }
      return ERR_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e050      	b.n	8006d36 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7d1b      	ldrb	r3, [r3, #20]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d03b      	beq.n	8006d14 <tcp_close_shutdown+0x174>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	dc44      	bgt.n	8006d2a <tcp_close_shutdown+0x18a>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <tcp_close_shutdown+0x10a>
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d02a      	beq.n	8006cfe <tcp_close_shutdown+0x15e>
 8006ca8:	e03f      	b.n	8006d2a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8adb      	ldrh	r3, [r3, #22]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d021      	beq.n	8006cf6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <tcp_close_shutdown+0x1bc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d105      	bne.n	8006cc8 <tcp_close_shutdown+0x128>
 8006cbc:	4b27      	ldr	r3, [pc, #156]	; (8006d5c <tcp_close_shutdown+0x1bc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4a26      	ldr	r2, [pc, #152]	; (8006d5c <tcp_close_shutdown+0x1bc>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e013      	b.n	8006cf0 <tcp_close_shutdown+0x150>
 8006cc8:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <tcp_close_shutdown+0x1bc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	e00c      	b.n	8006cea <tcp_close_shutdown+0x14a>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d104      	bne.n	8006ce4 <tcp_close_shutdown+0x144>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	e005      	b.n	8006cf0 <tcp_close_shutdown+0x150>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ef      	bne.n	8006cd0 <tcp_close_shutdown+0x130>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fea0 	bl	8006a3c <tcp_free>
      break;
 8006cfc:	e01a      	b.n	8006d34 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff14 	bl	8006b2c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4816      	ldr	r0, [pc, #88]	; (8006d60 <tcp_close_shutdown+0x1c0>)
 8006d08:	f001 f8a8 	bl	8007e5c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff feb1 	bl	8006a74 <tcp_free_listen>
      break;
 8006d12:	e00f      	b.n	8006d34 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	480e      	ldr	r0, [pc, #56]	; (8006d50 <tcp_close_shutdown+0x1b0>)
 8006d18:	f001 f8a0 	bl	8007e5c <tcp_pcb_remove>
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <tcp_close_shutdown+0x1b4>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fe8a 	bl	8006a3c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006d28:	e004      	b.n	8006d34 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f81a 	bl	8006d64 <tcp_close_shutdown_fin>
 8006d30:	4603      	mov	r3, r0
 8006d32:	e000      	b.n	8006d36 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	080110c4 	.word	0x080110c4
 8006d44:	08011198 	.word	0x08011198
 8006d48:	08011108 	.word	0x08011108
 8006d4c:	080111b8 	.word	0x080111b8
 8006d50:	20008990 	.word	0x20008990
 8006d54:	20008998 	.word	0x20008998
 8006d58:	200089d0 	.word	0x200089d0
 8006d5c:	20008988 	.word	0x20008988
 8006d60:	2000898c 	.word	0x2000898c

08006d64 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <tcp_close_shutdown_fin+0x1c>
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <tcp_close_shutdown_fin+0xc8>)
 8006d74:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006d78:	492d      	ldr	r1, [pc, #180]	; (8006e30 <tcp_close_shutdown_fin+0xcc>)
 8006d7a:	482e      	ldr	r0, [pc, #184]	; (8006e34 <tcp_close_shutdown_fin+0xd0>)
 8006d7c:	f008 fa20 	bl	800f1c0 <iprintf>

  switch (pcb->state) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7d1b      	ldrb	r3, [r3, #20]
 8006d84:	2b07      	cmp	r3, #7
 8006d86:	d020      	beq.n	8006dca <tcp_close_shutdown_fin+0x66>
 8006d88:	2b07      	cmp	r3, #7
 8006d8a:	dc2b      	bgt.n	8006de4 <tcp_close_shutdown_fin+0x80>
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d002      	beq.n	8006d96 <tcp_close_shutdown_fin+0x32>
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d00d      	beq.n	8006db0 <tcp_close_shutdown_fin+0x4c>
 8006d94:	e026      	b.n	8006de4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f003 fee6 	bl	800ab68 <tcp_send_fin>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11f      	bne.n	8006de8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2205      	movs	r2, #5
 8006dac:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006dae:	e01b      	b.n	8006de8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f003 fed9 	bl	800ab68 <tcp_send_fin>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d114      	bne.n	8006dec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006dc8:	e010      	b.n	8006dec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f003 fecc 	bl	800ab68 <tcp_send_fin>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d109      	bne.n	8006df0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2209      	movs	r2, #9
 8006de0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006de2:	e005      	b.n	8006df0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e01c      	b.n	8006e22 <tcp_close_shutdown_fin+0xbe>
      break;
 8006de8:	bf00      	nop
 8006dea:	e002      	b.n	8006df2 <tcp_close_shutdown_fin+0x8e>
      break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <tcp_close_shutdown_fin+0x8e>
      break;
 8006df0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f003 fff2 	bl	800ade4 <tcp_output>
 8006e00:	e00d      	b.n	8006e1e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d108      	bne.n	8006e1e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8b5b      	ldrh	r3, [r3, #26]
 8006e10:	f043 0308 	orr.w	r3, r3, #8
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e001      	b.n	8006e22 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	080110c4 	.word	0x080110c4
 8006e30:	08011174 	.word	0x08011174
 8006e34:	08011108 	.word	0x08011108

08006e38 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <tcp_close+0x22>
 8006e46:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <tcp_close+0x4c>)
 8006e48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006e4c:	490e      	ldr	r1, [pc, #56]	; (8006e88 <tcp_close+0x50>)
 8006e4e:	480f      	ldr	r0, [pc, #60]	; (8006e8c <tcp_close+0x54>)
 8006e50:	f008 f9b6 	bl	800f1c0 <iprintf>
 8006e54:	f06f 030f 	mvn.w	r3, #15
 8006e58:	e00f      	b.n	8006e7a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7d1b      	ldrb	r3, [r3, #20]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d006      	beq.n	8006e70 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	8b5b      	ldrh	r3, [r3, #26]
 8006e66:	f043 0310 	orr.w	r3, r3, #16
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006e70:	2101      	movs	r1, #1
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fe94 	bl	8006ba0 <tcp_close_shutdown>
 8006e78:	4603      	mov	r3, r0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	080110c4 	.word	0x080110c4
 8006e88:	080111d4 	.word	0x080111d4
 8006e8c:	08011108 	.word	0x08011108

08006e90 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08e      	sub	sp, #56	; 0x38
 8006e94:	af04      	add	r7, sp, #16
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <tcp_abandon+0x20>
 8006ea0:	4b52      	ldr	r3, [pc, #328]	; (8006fec <tcp_abandon+0x15c>)
 8006ea2:	f240 223d 	movw	r2, #573	; 0x23d
 8006ea6:	4952      	ldr	r1, [pc, #328]	; (8006ff0 <tcp_abandon+0x160>)
 8006ea8:	4852      	ldr	r0, [pc, #328]	; (8006ff4 <tcp_abandon+0x164>)
 8006eaa:	f008 f989 	bl	800f1c0 <iprintf>
 8006eae:	e099      	b.n	8006fe4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7d1b      	ldrb	r3, [r3, #20]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d106      	bne.n	8006ec6 <tcp_abandon+0x36>
 8006eb8:	4b4c      	ldr	r3, [pc, #304]	; (8006fec <tcp_abandon+0x15c>)
 8006eba:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006ebe:	494e      	ldr	r1, [pc, #312]	; (8006ff8 <tcp_abandon+0x168>)
 8006ec0:	484c      	ldr	r0, [pc, #304]	; (8006ff4 <tcp_abandon+0x164>)
 8006ec2:	f008 f97d 	bl	800f1c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7d1b      	ldrb	r3, [r3, #20]
 8006eca:	2b0a      	cmp	r3, #10
 8006ecc:	d107      	bne.n	8006ede <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	484a      	ldr	r0, [pc, #296]	; (8006ffc <tcp_abandon+0x16c>)
 8006ed2:	f000 ffc3 	bl	8007e5c <tcp_pcb_remove>
    tcp_free(pcb);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fdb0 	bl	8006a3c <tcp_free>
 8006edc:	e082      	b.n	8006fe4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7d1b      	ldrb	r3, [r3, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d126      	bne.n	8006f56 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8adb      	ldrh	r3, [r3, #22]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d02e      	beq.n	8006f6e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f10:	4b3b      	ldr	r3, [pc, #236]	; (8007000 <tcp_abandon+0x170>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d105      	bne.n	8006f26 <tcp_abandon+0x96>
 8006f1a:	4b39      	ldr	r3, [pc, #228]	; (8007000 <tcp_abandon+0x170>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a37      	ldr	r2, [pc, #220]	; (8007000 <tcp_abandon+0x170>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e013      	b.n	8006f4e <tcp_abandon+0xbe>
 8006f26:	4b36      	ldr	r3, [pc, #216]	; (8007000 <tcp_abandon+0x170>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	e00c      	b.n	8006f48 <tcp_abandon+0xb8>
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d104      	bne.n	8006f42 <tcp_abandon+0xb2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	60da      	str	r2, [r3, #12]
 8006f40:	e005      	b.n	8006f4e <tcp_abandon+0xbe>
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ef      	bne.n	8006f2e <tcp_abandon+0x9e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	60da      	str	r2, [r3, #12]
 8006f54:	e00b      	b.n	8006f6e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8adb      	ldrh	r3, [r3, #22]
 8006f5e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	4828      	ldr	r0, [pc, #160]	; (8007004 <tcp_abandon+0x174>)
 8006f64:	f000 ff7a 	bl	8007e5c <tcp_pcb_remove>
 8006f68:	4b27      	ldr	r3, [pc, #156]	; (8007008 <tcp_abandon+0x178>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fd1c 	bl	80079b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fd13 	bl	80079b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fd0a 	bl	80079b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	8b12      	ldrh	r2, [r2, #24]
 8006fb4:	9202      	str	r2, [sp, #8]
 8006fb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006fb8:	9201      	str	r2, [sp, #4]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	69b9      	ldr	r1, [r7, #24]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f004 fcc2 	bl	800b94c <tcp_rst>
    }
    last_state = pcb->state;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7d1b      	ldrb	r3, [r3, #20]
 8006fcc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff fd34 	bl	8006a3c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <tcp_abandon+0x154>
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f06f 010c 	mvn.w	r1, #12
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	4798      	blx	r3
  }
}
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	080110c4 	.word	0x080110c4
 8006ff0:	08011208 	.word	0x08011208
 8006ff4:	08011108 	.word	0x08011108
 8006ff8:	08011224 	.word	0x08011224
 8006ffc:	20008994 	.word	0x20008994
 8007000:	20008988 	.word	0x20008988
 8007004:	20008990 	.word	0x20008990
 8007008:	20008998 	.word	0x20008998

0800700c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007014:	2101      	movs	r1, #1
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ff3a 	bl	8006e90 <tcp_abandon>
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <tcp_update_rcv_ann_wnd+0x1c>
 8007032:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007034:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007038:	4924      	ldr	r1, [pc, #144]	; (80070cc <tcp_update_rcv_ann_wnd+0xa8>)
 800703a:	4825      	ldr	r0, [pc, #148]	; (80070d0 <tcp_update_rcv_ann_wnd+0xac>)
 800703c:	f008 f8c0 	bl	800f1c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007048:	4413      	add	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007054:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007058:	bf28      	it	cs
 800705a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800705e:	b292      	uxth	r2, r2
 8007060:	4413      	add	r3, r2
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	db08      	blt.n	800707c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	e020      	b.n	80070be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	dd03      	ble.n	8007092 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007090:	e014      	b.n	80070bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a4:	d306      	bcc.n	80070b4 <tcp_update_rcv_ann_wnd+0x90>
 80070a6:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <tcp_update_rcv_ann_wnd+0xa4>)
 80070a8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80070ac:	4909      	ldr	r1, [pc, #36]	; (80070d4 <tcp_update_rcv_ann_wnd+0xb0>)
 80070ae:	4808      	ldr	r0, [pc, #32]	; (80070d0 <tcp_update_rcv_ann_wnd+0xac>)
 80070b0:	f008 f886 	bl	800f1c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80070bc:	2300      	movs	r3, #0
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	080110c4 	.word	0x080110c4
 80070cc:	08011320 	.word	0x08011320
 80070d0:	08011108 	.word	0x08011108
 80070d4:	08011344 	.word	0x08011344

080070d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d107      	bne.n	80070fa <tcp_recved+0x22>
 80070ea:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <tcp_recved+0x90>)
 80070ec:	f240 32cf 	movw	r2, #975	; 0x3cf
 80070f0:	491e      	ldr	r1, [pc, #120]	; (800716c <tcp_recved+0x94>)
 80070f2:	481f      	ldr	r0, [pc, #124]	; (8007170 <tcp_recved+0x98>)
 80070f4:	f008 f864 	bl	800f1c0 <iprintf>
 80070f8:	e032      	b.n	8007160 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7d1b      	ldrb	r3, [r3, #20]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d106      	bne.n	8007110 <tcp_recved+0x38>
 8007102:	4b19      	ldr	r3, [pc, #100]	; (8007168 <tcp_recved+0x90>)
 8007104:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007108:	491a      	ldr	r1, [pc, #104]	; (8007174 <tcp_recved+0x9c>)
 800710a:	4819      	ldr	r0, [pc, #100]	; (8007170 <tcp_recved+0x98>)
 800710c:	f008 f858 	bl	800f1c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007114:	887b      	ldrh	r3, [r7, #2]
 8007116:	4413      	add	r3, r2
 8007118:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800711a:	89fb      	ldrh	r3, [r7, #14]
 800711c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007120:	d804      	bhi.n	800712c <tcp_recved+0x54>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007126:	89fa      	ldrh	r2, [r7, #14]
 8007128:	429a      	cmp	r2, r3
 800712a:	d204      	bcs.n	8007136 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28
 8007134:	e002      	b.n	800713c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	89fa      	ldrh	r2, [r7, #14]
 800713a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff ff71 	bl	8007024 <tcp_update_rcv_ann_wnd>
 8007142:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800714a:	d309      	bcc.n	8007160 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8b5b      	ldrh	r3, [r3, #26]
 8007150:	f043 0302 	orr.w	r3, r3, #2
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f003 fe42 	bl	800ade4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	080110c4 	.word	0x080110c4
 800716c:	08011360 	.word	0x08011360
 8007170:	08011108 	.word	0x08011108
 8007174:	08011378 	.word	0x08011378

08007178 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007178:	b5b0      	push	{r4, r5, r7, lr}
 800717a:	b090      	sub	sp, #64	; 0x40
 800717c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007184:	4b94      	ldr	r3, [pc, #592]	; (80073d8 <tcp_slowtmr+0x260>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a93      	ldr	r2, [pc, #588]	; (80073d8 <tcp_slowtmr+0x260>)
 800718c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800718e:	4b93      	ldr	r3, [pc, #588]	; (80073dc <tcp_slowtmr+0x264>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	4b91      	ldr	r3, [pc, #580]	; (80073dc <tcp_slowtmr+0x264>)
 8007198:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800719e:	4b90      	ldr	r3, [pc, #576]	; (80073e0 <tcp_slowtmr+0x268>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80071a4:	e29d      	b.n	80076e2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	7d1b      	ldrb	r3, [r3, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <tcp_slowtmr+0x44>
 80071ae:	4b8d      	ldr	r3, [pc, #564]	; (80073e4 <tcp_slowtmr+0x26c>)
 80071b0:	f240 42be 	movw	r2, #1214	; 0x4be
 80071b4:	498c      	ldr	r1, [pc, #560]	; (80073e8 <tcp_slowtmr+0x270>)
 80071b6:	488d      	ldr	r0, [pc, #564]	; (80073ec <tcp_slowtmr+0x274>)
 80071b8:	f008 f802 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	7d1b      	ldrb	r3, [r3, #20]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d106      	bne.n	80071d2 <tcp_slowtmr+0x5a>
 80071c4:	4b87      	ldr	r3, [pc, #540]	; (80073e4 <tcp_slowtmr+0x26c>)
 80071c6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80071ca:	4989      	ldr	r1, [pc, #548]	; (80073f0 <tcp_slowtmr+0x278>)
 80071cc:	4887      	ldr	r0, [pc, #540]	; (80073ec <tcp_slowtmr+0x274>)
 80071ce:	f007 fff7 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	7d1b      	ldrb	r3, [r3, #20]
 80071d6:	2b0a      	cmp	r3, #10
 80071d8:	d106      	bne.n	80071e8 <tcp_slowtmr+0x70>
 80071da:	4b82      	ldr	r3, [pc, #520]	; (80073e4 <tcp_slowtmr+0x26c>)
 80071dc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80071e0:	4984      	ldr	r1, [pc, #528]	; (80073f4 <tcp_slowtmr+0x27c>)
 80071e2:	4882      	ldr	r0, [pc, #520]	; (80073ec <tcp_slowtmr+0x274>)
 80071e4:	f007 ffec 	bl	800f1c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	7f9a      	ldrb	r2, [r3, #30]
 80071ec:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <tcp_slowtmr+0x264>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d105      	bne.n	8007200 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80071fe:	e270      	b.n	80076e2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007200:	4b76      	ldr	r3, [pc, #472]	; (80073dc <tcp_slowtmr+0x264>)
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	7d1b      	ldrb	r3, [r3, #20]
 8007218:	2b02      	cmp	r3, #2
 800721a:	d10a      	bne.n	8007232 <tcp_slowtmr+0xba>
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007222:	2b05      	cmp	r3, #5
 8007224:	d905      	bls.n	8007232 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800722a:	3301      	adds	r3, #1
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007230:	e11e      	b.n	8007470 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007238:	2b0b      	cmp	r3, #11
 800723a:	d905      	bls.n	8007248 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007240:	3301      	adds	r3, #1
 8007242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007246:	e113      	b.n	8007470 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800724e:	2b00      	cmp	r3, #0
 8007250:	d075      	beq.n	800733e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <tcp_slowtmr+0xf0>
 800725a:	4b62      	ldr	r3, [pc, #392]	; (80073e4 <tcp_slowtmr+0x26c>)
 800725c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007260:	4965      	ldr	r1, [pc, #404]	; (80073f8 <tcp_slowtmr+0x280>)
 8007262:	4862      	ldr	r0, [pc, #392]	; (80073ec <tcp_slowtmr+0x274>)
 8007264:	f007 ffac 	bl	800f1c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <tcp_slowtmr+0x106>
 8007270:	4b5c      	ldr	r3, [pc, #368]	; (80073e4 <tcp_slowtmr+0x26c>)
 8007272:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007276:	4961      	ldr	r1, [pc, #388]	; (80073fc <tcp_slowtmr+0x284>)
 8007278:	485c      	ldr	r0, [pc, #368]	; (80073ec <tcp_slowtmr+0x274>)
 800727a:	f007 ffa1 	bl	800f1c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007284:	2b0b      	cmp	r3, #11
 8007286:	d905      	bls.n	8007294 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800728c:	3301      	adds	r3, #1
 800728e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007292:	e0ed      	b.n	8007470 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800729a:	3b01      	subs	r3, #1
 800729c:	4a58      	ldr	r2, [pc, #352]	; (8007400 <tcp_slowtmr+0x288>)
 800729e:	5cd3      	ldrb	r3, [r2, r3]
 80072a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072a8:	7c7a      	ldrb	r2, [r7, #17]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d907      	bls.n	80072be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072b4:	3301      	adds	r3, #1
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072c4:	7c7a      	ldrb	r2, [r7, #17]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	f200 80d2 	bhi.w	8007470 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80072cc:	2301      	movs	r3, #1
 80072ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80072da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072dc:	f004 fc2a 	bl	800bb34 <tcp_zero_window_probe>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80072e6:	2300      	movs	r3, #0
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	e011      	b.n	8007310 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072f2:	4619      	mov	r1, r3
 80072f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072f6:	f003 faef 	bl	800a8d8 <tcp_split_unsent_seg>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007302:	f003 fd6f 	bl	800ade4 <tcp_output>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80ac 	beq.w	8007470 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007326:	2b06      	cmp	r3, #6
 8007328:	f200 80a2 	bhi.w	8007470 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007332:	3301      	adds	r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800733c:	e098      	b.n	8007470 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	db0f      	blt.n	8007368 <tcp_slowtmr+0x1f0>
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800734e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007352:	4293      	cmp	r3, r2
 8007354:	d008      	beq.n	8007368 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800735c:	b29b      	uxth	r3, r3
 800735e:	3301      	adds	r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	b21a      	sxth	r2, r3
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007374:	429a      	cmp	r2, r3
 8007376:	db7b      	blt.n	8007470 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800737a:	f004 f825 	bl	800b3c8 <tcp_rexmit_rto_prepare>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <tcp_slowtmr+0x21c>
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	2b00      	cmp	r3, #0
 800738a:	d171      	bne.n	8007470 <tcp_slowtmr+0x2f8>
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d06d      	beq.n	8007470 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	7d1b      	ldrb	r3, [r3, #20]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d03a      	beq.n	8007412 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073a2:	2b0c      	cmp	r3, #12
 80073a4:	bf28      	it	cs
 80073a6:	230c      	movcs	r3, #12
 80073a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80073b0:	10db      	asrs	r3, r3, #3
 80073b2:	b21b      	sxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80073bc:	4413      	add	r3, r2
 80073be:	7efa      	ldrb	r2, [r7, #27]
 80073c0:	4910      	ldr	r1, [pc, #64]	; (8007404 <tcp_slowtmr+0x28c>)
 80073c2:	5c8a      	ldrb	r2, [r1, r2]
 80073c4:	4093      	lsls	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80073ce:	4293      	cmp	r3, r2
 80073d0:	dc1a      	bgt.n	8007408 <tcp_slowtmr+0x290>
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	b21a      	sxth	r2, r3
 80073d6:	e019      	b.n	800740c <tcp_slowtmr+0x294>
 80073d8:	20008984 	.word	0x20008984
 80073dc:	2000899a 	.word	0x2000899a
 80073e0:	20008990 	.word	0x20008990
 80073e4:	080110c4 	.word	0x080110c4
 80073e8:	08011408 	.word	0x08011408
 80073ec:	08011108 	.word	0x08011108
 80073f0:	08011434 	.word	0x08011434
 80073f4:	08011460 	.word	0x08011460
 80073f8:	08011490 	.word	0x08011490
 80073fc:	080114c4 	.word	0x080114c4
 8007400:	08013090 	.word	0x08013090
 8007404:	08013080 	.word	0x08013080
 8007408:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	2200      	movs	r2, #0
 8007416:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007424:	4293      	cmp	r3, r2
 8007426:	bf28      	it	cs
 8007428:	4613      	movcs	r3, r2
 800742a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800742c:	8a7b      	ldrh	r3, [r7, #18]
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	429a      	cmp	r2, r3
 8007448:	d206      	bcs.n	8007458 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	2200      	movs	r2, #0
 8007466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800746a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800746c:	f004 f81c 	bl	800b4a8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	7d1b      	ldrb	r3, [r3, #20]
 8007474:	2b06      	cmp	r3, #6
 8007476:	d111      	bne.n	800749c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	8b5b      	ldrh	r3, [r3, #26]
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007484:	4b9c      	ldr	r3, [pc, #624]	; (80076f8 <tcp_slowtmr+0x580>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b28      	cmp	r3, #40	; 0x28
 8007490:	d904      	bls.n	800749c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007496:	3301      	adds	r3, #1
 8007498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	7a5b      	ldrb	r3, [r3, #9]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d04a      	beq.n	800753e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d003      	beq.n	80074b8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80074b4:	2b07      	cmp	r3, #7
 80074b6:	d142      	bne.n	800753e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074b8:	4b8f      	ldr	r3, [pc, #572]	; (80076f8 <tcp_slowtmr+0x580>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80074c8:	4b8c      	ldr	r3, [pc, #560]	; (80076fc <tcp_slowtmr+0x584>)
 80074ca:	440b      	add	r3, r1
 80074cc:	498c      	ldr	r1, [pc, #560]	; (8007700 <tcp_slowtmr+0x588>)
 80074ce:	fba1 1303 	umull	r1, r3, r1, r3
 80074d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d90a      	bls.n	80074ee <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80074d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074dc:	3301      	adds	r3, #1
 80074de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80074e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074e6:	3301      	adds	r3, #1
 80074e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074ec:	e027      	b.n	800753e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074ee:	4b82      	ldr	r3, [pc, #520]	; (80076f8 <tcp_slowtmr+0x580>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007504:	4618      	mov	r0, r3
 8007506:	4b7f      	ldr	r3, [pc, #508]	; (8007704 <tcp_slowtmr+0x58c>)
 8007508:	fb00 f303 	mul.w	r3, r0, r3
 800750c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800750e:	497c      	ldr	r1, [pc, #496]	; (8007700 <tcp_slowtmr+0x588>)
 8007510:	fba1 1303 	umull	r1, r3, r1, r3
 8007514:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007516:	429a      	cmp	r2, r3
 8007518:	d911      	bls.n	800753e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800751a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800751c:	f004 faca 	bl	800bab4 <tcp_keepalive>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007526:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007534:	3301      	adds	r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007542:	2b00      	cmp	r3, #0
 8007544:	d011      	beq.n	800756a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007546:	4b6c      	ldr	r3, [pc, #432]	; (80076f8 <tcp_slowtmr+0x580>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007556:	4619      	mov	r1, r3
 8007558:	460b      	mov	r3, r1
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	440b      	add	r3, r1
 800755e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007560:	429a      	cmp	r2, r3
 8007562:	d302      	bcc.n	800756a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007566:	f000 fddd 	bl	8008124 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	7d1b      	ldrb	r3, [r3, #20]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d10b      	bne.n	800758a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007572:	4b61      	ldr	r3, [pc, #388]	; (80076f8 <tcp_slowtmr+0x580>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b28      	cmp	r3, #40	; 0x28
 800757e:	d904      	bls.n	800758a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007584:	3301      	adds	r3, #1
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	7d1b      	ldrb	r3, [r3, #20]
 800758e:	2b09      	cmp	r3, #9
 8007590:	d10b      	bne.n	80075aa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007592:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <tcp_slowtmr+0x580>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2bf0      	cmp	r3, #240	; 0xf0
 800759e:	d904      	bls.n	80075aa <tcp_slowtmr+0x432>
        ++pcb_remove;
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a4:	3301      	adds	r3, #1
 80075a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d060      	beq.n	8007674 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80075ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075bc:	f000 fbfe 	bl	8007dbc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d010      	beq.n	80075e8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80075c6:	4b50      	ldr	r3, [pc, #320]	; (8007708 <tcp_slowtmr+0x590>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d106      	bne.n	80075de <tcp_slowtmr+0x466>
 80075d0:	4b4e      	ldr	r3, [pc, #312]	; (800770c <tcp_slowtmr+0x594>)
 80075d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80075d6:	494e      	ldr	r1, [pc, #312]	; (8007710 <tcp_slowtmr+0x598>)
 80075d8:	484e      	ldr	r0, [pc, #312]	; (8007714 <tcp_slowtmr+0x59c>)
 80075da:	f007 fdf1 	bl	800f1c0 <iprintf>
        prev->next = pcb->next;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	60da      	str	r2, [r3, #12]
 80075e6:	e00f      	b.n	8007608 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80075e8:	4b47      	ldr	r3, [pc, #284]	; (8007708 <tcp_slowtmr+0x590>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d006      	beq.n	8007600 <tcp_slowtmr+0x488>
 80075f2:	4b46      	ldr	r3, [pc, #280]	; (800770c <tcp_slowtmr+0x594>)
 80075f4:	f240 5271 	movw	r2, #1393	; 0x571
 80075f8:	4947      	ldr	r1, [pc, #284]	; (8007718 <tcp_slowtmr+0x5a0>)
 80075fa:	4846      	ldr	r0, [pc, #280]	; (8007714 <tcp_slowtmr+0x59c>)
 80075fc:	f007 fde0 	bl	800f1c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4a40      	ldr	r2, [pc, #256]	; (8007708 <tcp_slowtmr+0x590>)
 8007606:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800760c:	2b00      	cmp	r3, #0
 800760e:	d013      	beq.n	8007638 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007618:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	3304      	adds	r3, #4
 800761e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007620:	8ad2      	ldrh	r2, [r2, #22]
 8007622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007624:	8b09      	ldrh	r1, [r1, #24]
 8007626:	9102      	str	r1, [sp, #8]
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	462b      	mov	r3, r5
 800762e:	4622      	mov	r2, r4
 8007630:	4601      	mov	r1, r0
 8007632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007634:	f004 f98a 	bl	800b94c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	7d1b      	ldrb	r3, [r3, #20]
 8007642:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800764e:	6838      	ldr	r0, [r7, #0]
 8007650:	f7ff f9f4 	bl	8006a3c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007654:	4b31      	ldr	r3, [pc, #196]	; (800771c <tcp_slowtmr+0x5a4>)
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <tcp_slowtmr+0x4f2>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f06f 010c 	mvn.w	r1, #12
 8007666:	68b8      	ldr	r0, [r7, #8]
 8007668:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800766a:	4b2c      	ldr	r3, [pc, #176]	; (800771c <tcp_slowtmr+0x5a4>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d037      	beq.n	80076e2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007672:	e592      	b.n	800719a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	7f1b      	ldrb	r3, [r3, #28]
 8007682:	3301      	adds	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	7f1a      	ldrb	r2, [r3, #28]
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	7f5b      	ldrb	r3, [r3, #29]
 8007692:	429a      	cmp	r2, r3
 8007694:	d325      	bcc.n	80076e2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <tcp_slowtmr+0x5a4>)
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <tcp_slowtmr+0x54c>
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b4:	6912      	ldr	r2, [r2, #16]
 80076b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80076c2:	e002      	b.n	80076ca <tcp_slowtmr+0x552>
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <tcp_slowtmr+0x5a4>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d000      	beq.n	80076d4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80076d2:	e562      	b.n	800719a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80076d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80076dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076de:	f003 fb81 	bl	800ade4 <tcp_output>
  while (pcb != NULL) {
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f ad5e 	bne.w	80071a6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80076ee:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <tcp_slowtmr+0x5a8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80076f4:	e069      	b.n	80077ca <tcp_slowtmr+0x652>
 80076f6:	bf00      	nop
 80076f8:	20008984 	.word	0x20008984
 80076fc:	000a4cb8 	.word	0x000a4cb8
 8007700:	10624dd3 	.word	0x10624dd3
 8007704:	000124f8 	.word	0x000124f8
 8007708:	20008990 	.word	0x20008990
 800770c:	080110c4 	.word	0x080110c4
 8007710:	080114fc 	.word	0x080114fc
 8007714:	08011108 	.word	0x08011108
 8007718:	08011528 	.word	0x08011528
 800771c:	20008998 	.word	0x20008998
 8007720:	20008994 	.word	0x20008994
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	7d1b      	ldrb	r3, [r3, #20]
 8007728:	2b0a      	cmp	r3, #10
 800772a:	d006      	beq.n	800773a <tcp_slowtmr+0x5c2>
 800772c:	4b2b      	ldr	r3, [pc, #172]	; (80077dc <tcp_slowtmr+0x664>)
 800772e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007732:	492b      	ldr	r1, [pc, #172]	; (80077e0 <tcp_slowtmr+0x668>)
 8007734:	482b      	ldr	r0, [pc, #172]	; (80077e4 <tcp_slowtmr+0x66c>)
 8007736:	f007 fd43 	bl	800f1c0 <iprintf>
    pcb_remove = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007740:	4b29      	ldr	r3, [pc, #164]	; (80077e8 <tcp_slowtmr+0x670>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2bf0      	cmp	r3, #240	; 0xf0
 800774c:	d904      	bls.n	8007758 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800774e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007752:	3301      	adds	r3, #1
 8007754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800775c:	2b00      	cmp	r3, #0
 800775e:	d02f      	beq.n	80077c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007762:	f000 fb2b 	bl	8007dbc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	2b00      	cmp	r3, #0
 800776a:	d010      	beq.n	800778e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800776c:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <tcp_slowtmr+0x674>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007772:	429a      	cmp	r2, r3
 8007774:	d106      	bne.n	8007784 <tcp_slowtmr+0x60c>
 8007776:	4b19      	ldr	r3, [pc, #100]	; (80077dc <tcp_slowtmr+0x664>)
 8007778:	f240 52af 	movw	r2, #1455	; 0x5af
 800777c:	491c      	ldr	r1, [pc, #112]	; (80077f0 <tcp_slowtmr+0x678>)
 800777e:	4819      	ldr	r0, [pc, #100]	; (80077e4 <tcp_slowtmr+0x66c>)
 8007780:	f007 fd1e 	bl	800f1c0 <iprintf>
        prev->next = pcb->next;
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	e00f      	b.n	80077ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800778e:	4b17      	ldr	r3, [pc, #92]	; (80077ec <tcp_slowtmr+0x674>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
 8007796:	d006      	beq.n	80077a6 <tcp_slowtmr+0x62e>
 8007798:	4b10      	ldr	r3, [pc, #64]	; (80077dc <tcp_slowtmr+0x664>)
 800779a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800779e:	4915      	ldr	r1, [pc, #84]	; (80077f4 <tcp_slowtmr+0x67c>)
 80077a0:	4810      	ldr	r0, [pc, #64]	; (80077e4 <tcp_slowtmr+0x66c>)
 80077a2:	f007 fd0d 	bl	800f1c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4a10      	ldr	r2, [pc, #64]	; (80077ec <tcp_slowtmr+0x674>)
 80077ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80077b8:	69f8      	ldr	r0, [r7, #28]
 80077ba:	f7ff f93f 	bl	8006a3c <tcp_free>
 80077be:	e004      	b.n	80077ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1a9      	bne.n	8007724 <tcp_slowtmr+0x5ac>
    }
  }
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	3730      	adds	r7, #48	; 0x30
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}
 80077da:	bf00      	nop
 80077dc:	080110c4 	.word	0x080110c4
 80077e0:	08011554 	.word	0x08011554
 80077e4:	08011108 	.word	0x08011108
 80077e8:	20008984 	.word	0x20008984
 80077ec:	20008994 	.word	0x20008994
 80077f0:	08011584 	.word	0x08011584
 80077f4:	080115ac 	.word	0x080115ac

080077f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80077fe:	4b2d      	ldr	r3, [pc, #180]	; (80078b4 <tcp_fasttmr+0xbc>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <tcp_fasttmr+0xbc>)
 8007808:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800780a:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <tcp_fasttmr+0xc0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007810:	e048      	b.n	80078a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7f9a      	ldrb	r2, [r3, #30]
 8007816:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <tcp_fasttmr+0xbc>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d03f      	beq.n	800789e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800781e:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <tcp_fasttmr+0xbc>)
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	8b5b      	ldrh	r3, [r3, #26]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d010      	beq.n	8007854 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8b5b      	ldrh	r3, [r3, #26]
 8007836:	f043 0302 	orr.w	r3, r3, #2
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f003 facf 	bl	800ade4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8b5b      	ldrh	r3, [r3, #26]
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	b29a      	uxth	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8b5b      	ldrh	r3, [r3, #26]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8b5b      	ldrh	r3, [r3, #26]
 8007864:	f023 0308 	bic.w	r3, r3, #8
 8007868:	b29a      	uxth	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff fa78 	bl	8006d64 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <tcp_fasttmr+0xc4>)
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f819 	bl	80078c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <tcp_fasttmr+0xc4>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d000      	beq.n	8007898 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007896:	e7b8      	b.n	800780a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	607b      	str	r3, [r7, #4]
 800789c:	e002      	b.n	80078a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1b3      	bne.n	8007812 <tcp_fasttmr+0x1a>
    }
  }
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	2000899a 	.word	0x2000899a
 80078b8:	20008990 	.word	0x20008990
 80078bc:	20008998 	.word	0x20008998

080078c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80078c0:	b590      	push	{r4, r7, lr}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <tcp_process_refused_data+0x22>
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <tcp_process_refused_data+0xec>)
 80078d0:	f240 6209 	movw	r2, #1545	; 0x609
 80078d4:	4936      	ldr	r1, [pc, #216]	; (80079b0 <tcp_process_refused_data+0xf0>)
 80078d6:	4837      	ldr	r0, [pc, #220]	; (80079b4 <tcp_process_refused_data+0xf4>)
 80078d8:	f007 fc72 	bl	800f1c0 <iprintf>
 80078dc:	f06f 030f 	mvn.w	r3, #15
 80078e0:	e060      	b.n	80079a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e6:	7b5b      	ldrb	r3, [r3, #13]
 80078e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <tcp_process_refused_data+0x58>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6918      	ldr	r0, [r3, #16]
 800790a:	2300      	movs	r3, #0
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	47a0      	blx	r4
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]
 8007916:	e007      	b.n	8007928 <tcp_process_refused_data+0x68>
 8007918:	2300      	movs	r3, #0
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	2000      	movs	r0, #0
 8007920:	f000 f8a4 	bl	8007a6c <tcp_recv_null>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d12a      	bne.n	8007986 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d033      	beq.n	80079a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007942:	d005      	beq.n	8007950 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007948:	3301      	adds	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <tcp_process_refused_data+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6918      	ldr	r0, [r3, #16]
 8007964:	2300      	movs	r3, #0
 8007966:	2200      	movs	r2, #0
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	47a0      	blx	r4
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
 8007970:	e001      	b.n	8007976 <tcp_process_refused_data+0xb6>
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800797a:	f113 0f0d 	cmn.w	r3, #13
 800797e:	d110      	bne.n	80079a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007980:	f06f 030c 	mvn.w	r3, #12
 8007984:	e00e      	b.n	80079a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800798a:	f113 0f0d 	cmn.w	r3, #13
 800798e:	d102      	bne.n	8007996 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007990:	f06f 030c 	mvn.w	r3, #12
 8007994:	e006      	b.n	80079a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800799c:	f06f 0304 	mvn.w	r3, #4
 80079a0:	e000      	b.n	80079a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd90      	pop	{r4, r7, pc}
 80079ac:	080110c4 	.word	0x080110c4
 80079b0:	080115d4 	.word	0x080115d4
 80079b4:	08011108 	.word	0x08011108

080079b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80079c0:	e007      	b.n	80079d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f80a 	bl	80079e2 <tcp_seg_free>
    seg = next;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f4      	bne.n	80079c2 <tcp_segs_free+0xa>
  }
}
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe fcdb 	bl	80063b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	2003      	movs	r0, #3
 8007a06:	f7fd fec5 	bl	8005794 <memp_free>
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <tcp_seg_copy+0x1c>
 8007a22:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <tcp_seg_copy+0x4c>)
 8007a24:	f240 6282 	movw	r2, #1666	; 0x682
 8007a28:	490e      	ldr	r1, [pc, #56]	; (8007a64 <tcp_seg_copy+0x50>)
 8007a2a:	480f      	ldr	r0, [pc, #60]	; (8007a68 <tcp_seg_copy+0x54>)
 8007a2c:	f007 fbc8 	bl	800f1c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007a30:	2003      	movs	r0, #3
 8007a32:	f7fd fe63 	bl	80056fc <memp_malloc>
 8007a36:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <tcp_seg_copy+0x2e>
    return NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e00a      	b.n	8007a58 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007a42:	2210      	movs	r2, #16
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f007 fb8a 	bl	800f160 <memcpy>
  pbuf_ref(cseg->p);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fd51 	bl	80064f8 <pbuf_ref>
  return cseg;
 8007a56:	68fb      	ldr	r3, [r7, #12]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	080110c4 	.word	0x080110c4
 8007a64:	08011618 	.word	0x08011618
 8007a68:	08011108 	.word	0x08011108

08007a6c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <tcp_recv_null+0x28>
 8007a80:	4b12      	ldr	r3, [pc, #72]	; (8007acc <tcp_recv_null+0x60>)
 8007a82:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007a86:	4912      	ldr	r1, [pc, #72]	; (8007ad0 <tcp_recv_null+0x64>)
 8007a88:	4812      	ldr	r0, [pc, #72]	; (8007ad4 <tcp_recv_null+0x68>)
 8007a8a:	f007 fb99 	bl	800f1c0 <iprintf>
 8007a8e:	f06f 030f 	mvn.w	r3, #15
 8007a92:	e016      	b.n	8007ac2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	891b      	ldrh	r3, [r3, #8]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f7ff fb19 	bl	80070d8 <tcp_recved>
    pbuf_free(p);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fe fc86 	bl	80063b8 <pbuf_free>
 8007aac:	e008      	b.n	8007ac0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d104      	bne.n	8007ac0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007ab6:	68b8      	ldr	r0, [r7, #8]
 8007ab8:	f7ff f9be 	bl	8006e38 <tcp_close>
 8007abc:	4603      	mov	r3, r0
 8007abe:	e000      	b.n	8007ac2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	080110c4 	.word	0x080110c4
 8007ad0:	08011634 	.word	0x08011634
 8007ad4:	08011108 	.word	0x08011108

08007ad8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	db01      	blt.n	8007aee <tcp_kill_prio+0x16>
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	e000      	b.n	8007af0 <tcp_kill_prio+0x18>
 8007aee:	237f      	movs	r3, #127	; 0x7f
 8007af0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d034      	beq.n	8007b62 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b06:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <tcp_kill_prio+0x94>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e01f      	b.n	8007b4e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	7d5b      	ldrb	r3, [r3, #21]
 8007b12:	7afa      	ldrb	r2, [r7, #11]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d80c      	bhi.n	8007b32 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007b1c:	7afa      	ldrb	r2, [r7, #11]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d112      	bne.n	8007b48 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b22:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <tcp_kill_prio+0x98>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d80a      	bhi.n	8007b48 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <tcp_kill_prio+0x98>)
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	7d5b      	ldrb	r3, [r3, #21]
 8007b46:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1dc      	bne.n	8007b0e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b5a:	6938      	ldr	r0, [r7, #16]
 8007b5c:	f7ff fa56 	bl	800700c <tcp_abort>
 8007b60:	e000      	b.n	8007b64 <tcp_kill_prio+0x8c>
    return;
 8007b62:	bf00      	nop
  }
}
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20008990 	.word	0x20008990
 8007b70:	20008984 	.word	0x20008984

08007b74 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d009      	beq.n	8007b98 <tcp_kill_state+0x24>
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	2b09      	cmp	r3, #9
 8007b88:	d006      	beq.n	8007b98 <tcp_kill_state+0x24>
 8007b8a:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <tcp_kill_state+0x80>)
 8007b8c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007b90:	4919      	ldr	r1, [pc, #100]	; (8007bf8 <tcp_kill_state+0x84>)
 8007b92:	481a      	ldr	r0, [pc, #104]	; (8007bfc <tcp_kill_state+0x88>)
 8007b94:	f007 fb14 	bl	800f1c0 <iprintf>

  inactivity = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ba0:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <tcp_kill_state+0x8c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	e017      	b.n	8007bd8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
 8007bac:	79fa      	ldrb	r2, [r7, #7]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d10f      	bne.n	8007bd2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <tcp_kill_state+0x90>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d807      	bhi.n	8007bd2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007bc2:	4b10      	ldr	r3, [pc, #64]	; (8007c04 <tcp_kill_state+0x90>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e4      	bne.n	8007ba8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007be4:	2100      	movs	r1, #0
 8007be6:	6938      	ldr	r0, [r7, #16]
 8007be8:	f7ff f952 	bl	8006e90 <tcp_abandon>
  }
}
 8007bec:	bf00      	nop
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	080110c4 	.word	0x080110c4
 8007bf8:	08011650 	.word	0x08011650
 8007bfc:	08011108 	.word	0x08011108
 8007c00:	20008990 	.word	0x20008990
 8007c04:	20008984 	.word	0x20008984

08007c08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <tcp_kill_timewait+0x58>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e012      	b.n	8007c44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <tcp_kill_timewait+0x5c>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d807      	bhi.n	8007c3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <tcp_kill_timewait+0x5c>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e9      	bne.n	8007c1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007c50:	68b8      	ldr	r0, [r7, #8]
 8007c52:	f7ff f9db 	bl	800700c <tcp_abort>
  }
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20008994 	.word	0x20008994
 8007c64:	20008984 	.word	0x20008984

08007c68 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <tcp_handle_closepend+0x48>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c74:	e014      	b.n	8007ca0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8b5b      	ldrh	r3, [r3, #26]
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	8b5b      	ldrh	r3, [r3, #26]
 8007c8c:	f023 0308 	bic.w	r3, r3, #8
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff f864 	bl	8006d64 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e7      	bne.n	8007c76 <tcp_handle_closepend+0xe>
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20008990 	.word	0x20008990

08007cb4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f7fd fd1c 	bl	80056fc <memp_malloc>
 8007cc4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d126      	bne.n	8007d1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007ccc:	f7ff ffcc 	bl	8007c68 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007cd0:	f7ff ff9a 	bl	8007c08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f7fd fd11 	bl	80056fc <memp_malloc>
 8007cda:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d11b      	bne.n	8007d1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007ce2:	2009      	movs	r0, #9
 8007ce4:	f7ff ff46 	bl	8007b74 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7fd fd07 	bl	80056fc <memp_malloc>
 8007cee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d111      	bne.n	8007d1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007cf6:	2008      	movs	r0, #8
 8007cf8:	f7ff ff3c 	bl	8007b74 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	f7fd fcfd 	bl	80056fc <memp_malloc>
 8007d02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d107      	bne.n	8007d1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fee3 	bl	8007ad8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d12:	2001      	movs	r0, #1
 8007d14:	f7fd fcf2 	bl	80056fc <memp_malloc>
 8007d18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d03f      	beq.n	8007da0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007d20:	229c      	movs	r2, #156	; 0x9c
 8007d22:	2100      	movs	r1, #0
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f007 fa43 	bl	800f1b0 <memset>
    pcb->prio = prio;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007d36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007d40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22ff      	movs	r2, #255	; 0xff
 8007d4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007d56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2206      	movs	r2, #6
 8007d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2206      	movs	r2, #6
 8007d64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <tcp_alloc+0xf8>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <tcp_alloc+0xfc>)
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007d8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <tcp_alloc+0x100>)
 8007d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a07      	ldr	r2, [pc, #28]	; (8007db8 <tcp_alloc+0x104>)
 8007d9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007da0:	68fb      	ldr	r3, [r7, #12]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20008984 	.word	0x20008984
 8007db0:	2000899a 	.word	0x2000899a
 8007db4:	08007a6d 	.word	0x08007a6d
 8007db8:	006ddd00 	.word	0x006ddd00

08007dbc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d107      	bne.n	8007dda <tcp_pcb_purge+0x1e>
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <tcp_pcb_purge+0x94>)
 8007dcc:	f640 0251 	movw	r2, #2129	; 0x851
 8007dd0:	4920      	ldr	r1, [pc, #128]	; (8007e54 <tcp_pcb_purge+0x98>)
 8007dd2:	4821      	ldr	r0, [pc, #132]	; (8007e58 <tcp_pcb_purge+0x9c>)
 8007dd4:	f007 f9f4 	bl	800f1c0 <iprintf>
 8007dd8:	e037      	b.n	8007e4a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7d1b      	ldrb	r3, [r3, #20]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d033      	beq.n	8007e4a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007de6:	2b0a      	cmp	r3, #10
 8007de8:	d02f      	beq.n	8007e4a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d02b      	beq.n	8007e4a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fada 	bl	80063b8 <pbuf_free>
      pcb->refused_data = NULL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f986 	bl	8008124 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e1e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff fdc7 	bl	80079b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fdc2 	bl	80079b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	080110c4 	.word	0x080110c4
 8007e54:	08011710 	.word	0x08011710
 8007e58:	08011108 	.word	0x08011108

08007e5c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d106      	bne.n	8007e7a <tcp_pcb_remove+0x1e>
 8007e6c:	4b3e      	ldr	r3, [pc, #248]	; (8007f68 <tcp_pcb_remove+0x10c>)
 8007e6e:	f640 0283 	movw	r2, #2179	; 0x883
 8007e72:	493e      	ldr	r1, [pc, #248]	; (8007f6c <tcp_pcb_remove+0x110>)
 8007e74:	483e      	ldr	r0, [pc, #248]	; (8007f70 <tcp_pcb_remove+0x114>)
 8007e76:	f007 f9a3 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <tcp_pcb_remove+0x32>
 8007e80:	4b39      	ldr	r3, [pc, #228]	; (8007f68 <tcp_pcb_remove+0x10c>)
 8007e82:	f640 0284 	movw	r2, #2180	; 0x884
 8007e86:	493b      	ldr	r1, [pc, #236]	; (8007f74 <tcp_pcb_remove+0x118>)
 8007e88:	4839      	ldr	r0, [pc, #228]	; (8007f70 <tcp_pcb_remove+0x114>)
 8007e8a:	f007 f999 	bl	800f1c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d105      	bne.n	8007ea4 <tcp_pcb_remove+0x48>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e013      	b.n	8007ecc <tcp_pcb_remove+0x70>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e00c      	b.n	8007ec6 <tcp_pcb_remove+0x6a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d104      	bne.n	8007ec0 <tcp_pcb_remove+0x64>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	e005      	b.n	8007ecc <tcp_pcb_remove+0x70>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1ef      	bne.n	8007eac <tcp_pcb_remove+0x50>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007ed2:	6838      	ldr	r0, [r7, #0]
 8007ed4:	f7ff ff72 	bl	8007dbc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	7d1b      	ldrb	r3, [r3, #20]
 8007edc:	2b0a      	cmp	r3, #10
 8007ede:	d013      	beq.n	8007f08 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d00f      	beq.n	8007f08 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	8b5b      	ldrh	r3, [r3, #26]
 8007eec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	8b5b      	ldrh	r3, [r3, #26]
 8007ef8:	f043 0302 	orr.w	r3, r3, #2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007f02:	6838      	ldr	r0, [r7, #0]
 8007f04:	f002 ff6e 	bl	800ade4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	7d1b      	ldrb	r3, [r3, #20]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d020      	beq.n	8007f52 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d006      	beq.n	8007f26 <tcp_pcb_remove+0xca>
 8007f18:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <tcp_pcb_remove+0x10c>)
 8007f1a:	f640 0293 	movw	r2, #2195	; 0x893
 8007f1e:	4916      	ldr	r1, [pc, #88]	; (8007f78 <tcp_pcb_remove+0x11c>)
 8007f20:	4813      	ldr	r0, [pc, #76]	; (8007f70 <tcp_pcb_remove+0x114>)
 8007f22:	f007 f94d 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d006      	beq.n	8007f3c <tcp_pcb_remove+0xe0>
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <tcp_pcb_remove+0x10c>)
 8007f30:	f640 0294 	movw	r2, #2196	; 0x894
 8007f34:	4911      	ldr	r1, [pc, #68]	; (8007f7c <tcp_pcb_remove+0x120>)
 8007f36:	480e      	ldr	r0, [pc, #56]	; (8007f70 <tcp_pcb_remove+0x114>)
 8007f38:	f007 f942 	bl	800f1c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <tcp_pcb_remove+0xf6>
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <tcp_pcb_remove+0x10c>)
 8007f46:	f640 0296 	movw	r2, #2198	; 0x896
 8007f4a:	490d      	ldr	r1, [pc, #52]	; (8007f80 <tcp_pcb_remove+0x124>)
 8007f4c:	4808      	ldr	r0, [pc, #32]	; (8007f70 <tcp_pcb_remove+0x114>)
 8007f4e:	f007 f937 	bl	800f1c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	080110c4 	.word	0x080110c4
 8007f6c:	0801172c 	.word	0x0801172c
 8007f70:	08011108 	.word	0x08011108
 8007f74:	08011748 	.word	0x08011748
 8007f78:	08011768 	.word	0x08011768
 8007f7c:	08011780 	.word	0x08011780
 8007f80:	0801179c 	.word	0x0801179c

08007f84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <tcp_next_iss+0x1c>
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <tcp_next_iss+0x38>)
 8007f94:	f640 02af 	movw	r2, #2223	; 0x8af
 8007f98:	4909      	ldr	r1, [pc, #36]	; (8007fc0 <tcp_next_iss+0x3c>)
 8007f9a:	480a      	ldr	r0, [pc, #40]	; (8007fc4 <tcp_next_iss+0x40>)
 8007f9c:	f007 f910 	bl	800f1c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007fa0:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <tcp_next_iss+0x44>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <tcp_next_iss+0x48>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4413      	add	r3, r2
 8007faa:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <tcp_next_iss+0x44>)
 8007fac:	6013      	str	r3, [r2, #0]
  return iss;
 8007fae:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <tcp_next_iss+0x44>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	080110c4 	.word	0x080110c4
 8007fc0:	080117b4 	.word	0x080117b4
 8007fc4:	08011108 	.word	0x08011108
 8007fc8:	2000000c 	.word	0x2000000c
 8007fcc:	20008984 	.word	0x20008984

08007fd0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <tcp_eff_send_mss_netif+0x22>
 8007fe4:	4b14      	ldr	r3, [pc, #80]	; (8008038 <tcp_eff_send_mss_netif+0x68>)
 8007fe6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007fea:	4914      	ldr	r1, [pc, #80]	; (800803c <tcp_eff_send_mss_netif+0x6c>)
 8007fec:	4814      	ldr	r0, [pc, #80]	; (8008040 <tcp_eff_send_mss_netif+0x70>)
 8007fee:	f007 f8e7 	bl	800f1c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
 8007ffa:	e019      	b.n	8008030 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008000:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008002:	8afb      	ldrh	r3, [r7, #22]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d012      	beq.n	800802e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008008:	2328      	movs	r3, #40	; 0x28
 800800a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800800c:	8afa      	ldrh	r2, [r7, #22]
 800800e:	8abb      	ldrh	r3, [r7, #20]
 8008010:	429a      	cmp	r2, r3
 8008012:	d904      	bls.n	800801e <tcp_eff_send_mss_netif+0x4e>
 8008014:	8afa      	ldrh	r2, [r7, #22]
 8008016:	8abb      	ldrh	r3, [r7, #20]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	b29b      	uxth	r3, r3
 800801c:	e000      	b.n	8008020 <tcp_eff_send_mss_netif+0x50>
 800801e:	2300      	movs	r3, #0
 8008020:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008022:	8a7a      	ldrh	r2, [r7, #18]
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	4293      	cmp	r3, r2
 8008028:	bf28      	it	cs
 800802a:	4613      	movcs	r3, r2
 800802c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800802e:	89fb      	ldrh	r3, [r7, #14]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	080110c4 	.word	0x080110c4
 800803c:	080117d0 	.word	0x080117d0
 8008040:	08011108 	.word	0x08011108

08008044 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d119      	bne.n	800808c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008058:	4b10      	ldr	r3, [pc, #64]	; (800809c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800805a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800805e:	4910      	ldr	r1, [pc, #64]	; (80080a0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008060:	4810      	ldr	r0, [pc, #64]	; (80080a4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008062:	f007 f8ad 	bl	800f1c0 <iprintf>

  while (pcb != NULL) {
 8008066:	e011      	b.n	800808c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d108      	bne.n	8008086 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7fe ffc6 	bl	800700c <tcp_abort>
      pcb = next;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	e002      	b.n	800808c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1ea      	bne.n	8008068 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	080110c4 	.word	0x080110c4
 80080a0:	080117f8 	.word	0x080117f8
 80080a4:	08011108 	.word	0x08011108

080080a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d02a      	beq.n	800810e <tcp_netif_ip_addr_changed+0x66>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d026      	beq.n	800810e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80080c0:	4b15      	ldr	r3, [pc, #84]	; (8008118 <tcp_netif_ip_addr_changed+0x70>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff ffbc 	bl	8008044 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80080cc:	4b13      	ldr	r3, [pc, #76]	; (800811c <tcp_netif_ip_addr_changed+0x74>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff ffb6 	bl	8008044 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d017      	beq.n	800810e <tcp_netif_ip_addr_changed+0x66>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080e6:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <tcp_netif_ip_addr_changed+0x78>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e00c      	b.n	8008108 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d103      	bne.n	8008102 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1ef      	bne.n	80080ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20008990 	.word	0x20008990
 800811c:	20008988 	.word	0x20008988
 8008120:	2000898c 	.word	0x2000898c

08008124 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008130:	2b00      	cmp	r3, #0
 8008132:	d007      	beq.n	8008144 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fc3d 	bl	80079b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800814c:	b590      	push	{r4, r7, lr}
 800814e:	b08d      	sub	sp, #52	; 0x34
 8008150:	af04      	add	r7, sp, #16
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <tcp_input+0x1c>
 800815c:	4b9b      	ldr	r3, [pc, #620]	; (80083cc <tcp_input+0x280>)
 800815e:	2283      	movs	r2, #131	; 0x83
 8008160:	499b      	ldr	r1, [pc, #620]	; (80083d0 <tcp_input+0x284>)
 8008162:	489c      	ldr	r0, [pc, #624]	; (80083d4 <tcp_input+0x288>)
 8008164:	f007 f82c 	bl	800f1c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	4a9a      	ldr	r2, [pc, #616]	; (80083d8 <tcp_input+0x28c>)
 800816e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	895b      	ldrh	r3, [r3, #10]
 8008174:	2b13      	cmp	r3, #19
 8008176:	f240 83d1 	bls.w	800891c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800817a:	4b98      	ldr	r3, [pc, #608]	; (80083dc <tcp_input+0x290>)
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4a97      	ldr	r2, [pc, #604]	; (80083dc <tcp_input+0x290>)
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f005 ffd1 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 83c7 	bne.w	8008920 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008192:	4b92      	ldr	r3, [pc, #584]	; (80083dc <tcp_input+0x290>)
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800819a:	2be0      	cmp	r3, #224	; 0xe0
 800819c:	f000 83c0 	beq.w	8008920 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80081a0:	4b8d      	ldr	r3, [pc, #564]	; (80083d8 <tcp_input+0x28c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	899b      	ldrh	r3, [r3, #12]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fc fe51 	bl	8004e50 <lwip_htons>
 80081ae:	4603      	mov	r3, r0
 80081b0:	0b1b      	lsrs	r3, r3, #12
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80081ba:	7cbb      	ldrb	r3, [r7, #18]
 80081bc:	2b13      	cmp	r3, #19
 80081be:	f240 83b1 	bls.w	8008924 <tcp_input+0x7d8>
 80081c2:	7cbb      	ldrb	r3, [r7, #18]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	891b      	ldrh	r3, [r3, #8]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f200 83aa 	bhi.w	8008924 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80081d0:	7cbb      	ldrb	r3, [r7, #18]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b14      	subs	r3, #20
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	4b81      	ldr	r3, [pc, #516]	; (80083e0 <tcp_input+0x294>)
 80081da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80081dc:	4b81      	ldr	r3, [pc, #516]	; (80083e4 <tcp_input+0x298>)
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	895a      	ldrh	r2, [r3, #10]
 80081e6:	7cbb      	ldrb	r3, [r7, #18]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d309      	bcc.n	8008202 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80081ee:	4b7c      	ldr	r3, [pc, #496]	; (80083e0 <tcp_input+0x294>)
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	4b7d      	ldr	r3, [pc, #500]	; (80083e8 <tcp_input+0x29c>)
 80081f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80081f6:	7cbb      	ldrb	r3, [r7, #18]
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fe f856 	bl	80062ac <pbuf_remove_header>
 8008200:	e04e      	b.n	80082a0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <tcp_input+0xca>
 800820a:	4b70      	ldr	r3, [pc, #448]	; (80083cc <tcp_input+0x280>)
 800820c:	22c2      	movs	r2, #194	; 0xc2
 800820e:	4977      	ldr	r1, [pc, #476]	; (80083ec <tcp_input+0x2a0>)
 8008210:	4870      	ldr	r0, [pc, #448]	; (80083d4 <tcp_input+0x288>)
 8008212:	f006 ffd5 	bl	800f1c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008216:	2114      	movs	r1, #20
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe f847 	bl	80062ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	895a      	ldrh	r2, [r3, #10]
 8008222:	4b71      	ldr	r3, [pc, #452]	; (80083e8 <tcp_input+0x29c>)
 8008224:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008226:	4b6e      	ldr	r3, [pc, #440]	; (80083e0 <tcp_input+0x294>)
 8008228:	881a      	ldrh	r2, [r3, #0]
 800822a:	4b6f      	ldr	r3, [pc, #444]	; (80083e8 <tcp_input+0x29c>)
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008232:	4b6d      	ldr	r3, [pc, #436]	; (80083e8 <tcp_input+0x29c>)
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7fe f837 	bl	80062ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	895b      	ldrh	r3, [r3, #10]
 8008244:	8a3a      	ldrh	r2, [r7, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	f200 836e 	bhi.w	8008928 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	4a64      	ldr	r2, [pc, #400]	; (80083e4 <tcp_input+0x298>)
 8008254:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	8a3a      	ldrh	r2, [r7, #16]
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe f824 	bl	80062ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	891a      	ldrh	r2, [r3, #8]
 8008268:	8a3b      	ldrh	r3, [r7, #16]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	895b      	ldrh	r3, [r3, #10]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <tcp_input+0x13a>
 800827a:	4b54      	ldr	r3, [pc, #336]	; (80083cc <tcp_input+0x280>)
 800827c:	22df      	movs	r2, #223	; 0xdf
 800827e:	495c      	ldr	r1, [pc, #368]	; (80083f0 <tcp_input+0x2a4>)
 8008280:	4854      	ldr	r0, [pc, #336]	; (80083d4 <tcp_input+0x288>)
 8008282:	f006 ff9d 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	891a      	ldrh	r2, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	891b      	ldrh	r3, [r3, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d005      	beq.n	80082a0 <tcp_input+0x154>
 8008294:	4b4d      	ldr	r3, [pc, #308]	; (80083cc <tcp_input+0x280>)
 8008296:	22e0      	movs	r2, #224	; 0xe0
 8008298:	4956      	ldr	r1, [pc, #344]	; (80083f4 <tcp_input+0x2a8>)
 800829a:	484e      	ldr	r0, [pc, #312]	; (80083d4 <tcp_input+0x288>)
 800829c:	f006 ff90 	bl	800f1c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80082a0:	4b4d      	ldr	r3, [pc, #308]	; (80083d8 <tcp_input+0x28c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4a4b      	ldr	r2, [pc, #300]	; (80083d8 <tcp_input+0x28c>)
 80082aa:	6814      	ldr	r4, [r2, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fc fdcf 	bl	8004e50 <lwip_htons>
 80082b2:	4603      	mov	r3, r0
 80082b4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80082b6:	4b48      	ldr	r3, [pc, #288]	; (80083d8 <tcp_input+0x28c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	885b      	ldrh	r3, [r3, #2]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	4a46      	ldr	r2, [pc, #280]	; (80083d8 <tcp_input+0x28c>)
 80082c0:	6814      	ldr	r4, [r2, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fc fdc4 	bl	8004e50 <lwip_htons>
 80082c8:	4603      	mov	r3, r0
 80082ca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80082cc:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <tcp_input+0x28c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	4a41      	ldr	r2, [pc, #260]	; (80083d8 <tcp_input+0x28c>)
 80082d4:	6814      	ldr	r4, [r2, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fc fdcf 	bl	8004e7a <lwip_htonl>
 80082dc:	4603      	mov	r3, r0
 80082de:	6063      	str	r3, [r4, #4]
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	4a45      	ldr	r2, [pc, #276]	; (80083f8 <tcp_input+0x2ac>)
 80082e4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80082e6:	4b3c      	ldr	r3, [pc, #240]	; (80083d8 <tcp_input+0x28c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	4a3a      	ldr	r2, [pc, #232]	; (80083d8 <tcp_input+0x28c>)
 80082ee:	6814      	ldr	r4, [r2, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fc fdc2 	bl	8004e7a <lwip_htonl>
 80082f6:	4603      	mov	r3, r0
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	4a3f      	ldr	r2, [pc, #252]	; (80083fc <tcp_input+0x2b0>)
 80082fe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008300:	4b35      	ldr	r3, [pc, #212]	; (80083d8 <tcp_input+0x28c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	89db      	ldrh	r3, [r3, #14]
 8008306:	b29b      	uxth	r3, r3
 8008308:	4a33      	ldr	r2, [pc, #204]	; (80083d8 <tcp_input+0x28c>)
 800830a:	6814      	ldr	r4, [r2, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f7fc fd9f 	bl	8004e50 <lwip_htons>
 8008312:	4603      	mov	r3, r0
 8008314:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008316:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <tcp_input+0x28c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	899b      	ldrh	r3, [r3, #12]
 800831c:	b29b      	uxth	r3, r3
 800831e:	4618      	mov	r0, r3
 8008320:	f7fc fd96 	bl	8004e50 <lwip_htons>
 8008324:	4603      	mov	r3, r0
 8008326:	b2db      	uxtb	r3, r3
 8008328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4b34      	ldr	r3, [pc, #208]	; (8008400 <tcp_input+0x2b4>)
 8008330:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	891a      	ldrh	r2, [r3, #8]
 8008336:	4b33      	ldr	r3, [pc, #204]	; (8008404 <tcp_input+0x2b8>)
 8008338:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800833a:	4b31      	ldr	r3, [pc, #196]	; (8008400 <tcp_input+0x2b4>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f003 0303 	and.w	r3, r3, #3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <tcp_input+0x214>
    tcplen++;
 8008346:	4b2f      	ldr	r3, [pc, #188]	; (8008404 <tcp_input+0x2b8>)
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	3301      	adds	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	4b2d      	ldr	r3, [pc, #180]	; (8008404 <tcp_input+0x2b8>)
 8008350:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	891a      	ldrh	r2, [r3, #8]
 8008356:	4b2b      	ldr	r3, [pc, #172]	; (8008404 <tcp_input+0x2b8>)
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	f200 82e6 	bhi.w	800892c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008364:	4b28      	ldr	r3, [pc, #160]	; (8008408 <tcp_input+0x2bc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	e09d      	b.n	80084a8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	7d1b      	ldrb	r3, [r3, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <tcp_input+0x234>
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <tcp_input+0x280>)
 8008376:	22fb      	movs	r2, #251	; 0xfb
 8008378:	4924      	ldr	r1, [pc, #144]	; (800840c <tcp_input+0x2c0>)
 800837a:	4816      	ldr	r0, [pc, #88]	; (80083d4 <tcp_input+0x288>)
 800837c:	f006 ff20 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	7d1b      	ldrb	r3, [r3, #20]
 8008384:	2b0a      	cmp	r3, #10
 8008386:	d105      	bne.n	8008394 <tcp_input+0x248>
 8008388:	4b10      	ldr	r3, [pc, #64]	; (80083cc <tcp_input+0x280>)
 800838a:	22fc      	movs	r2, #252	; 0xfc
 800838c:	4920      	ldr	r1, [pc, #128]	; (8008410 <tcp_input+0x2c4>)
 800838e:	4811      	ldr	r0, [pc, #68]	; (80083d4 <tcp_input+0x288>)
 8008390:	f006 ff16 	bl	800f1c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	7d1b      	ldrb	r3, [r3, #20]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d105      	bne.n	80083a8 <tcp_input+0x25c>
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <tcp_input+0x280>)
 800839e:	22fd      	movs	r2, #253	; 0xfd
 80083a0:	491c      	ldr	r1, [pc, #112]	; (8008414 <tcp_input+0x2c8>)
 80083a2:	480c      	ldr	r0, [pc, #48]	; (80083d4 <tcp_input+0x288>)
 80083a4:	f006 ff0c 	bl	800f1c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	7a1b      	ldrb	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d033      	beq.n	8008418 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	7a1a      	ldrb	r2, [r3, #8]
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <tcp_input+0x290>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083bc:	3301      	adds	r3, #1
 80083be:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d029      	beq.n	8008418 <tcp_input+0x2cc>
      prev = pcb;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	61bb      	str	r3, [r7, #24]
      continue;
 80083c8:	e06b      	b.n	80084a2 <tcp_input+0x356>
 80083ca:	bf00      	nop
 80083cc:	0801182c 	.word	0x0801182c
 80083d0:	08011860 	.word	0x08011860
 80083d4:	08011878 	.word	0x08011878
 80083d8:	200089ac 	.word	0x200089ac
 80083dc:	20003254 	.word	0x20003254
 80083e0:	200089b0 	.word	0x200089b0
 80083e4:	200089b4 	.word	0x200089b4
 80083e8:	200089b2 	.word	0x200089b2
 80083ec:	080118a0 	.word	0x080118a0
 80083f0:	080118b0 	.word	0x080118b0
 80083f4:	080118bc 	.word	0x080118bc
 80083f8:	200089bc 	.word	0x200089bc
 80083fc:	200089c0 	.word	0x200089c0
 8008400:	200089c8 	.word	0x200089c8
 8008404:	200089c6 	.word	0x200089c6
 8008408:	20008990 	.word	0x20008990
 800840c:	080118dc 	.word	0x080118dc
 8008410:	08011904 	.word	0x08011904
 8008414:	08011930 	.word	0x08011930
    }

    if (pcb->remote_port == tcphdr->src &&
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	8b1a      	ldrh	r2, [r3, #24]
 800841c:	4b72      	ldr	r3, [pc, #456]	; (80085e8 <tcp_input+0x49c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	429a      	cmp	r2, r3
 8008426:	d13a      	bne.n	800849e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	8ada      	ldrh	r2, [r3, #22]
 800842c:	4b6e      	ldr	r3, [pc, #440]	; (80085e8 <tcp_input+0x49c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	885b      	ldrh	r3, [r3, #2]
 8008432:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008434:	429a      	cmp	r2, r3
 8008436:	d132      	bne.n	800849e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	4b6b      	ldr	r3, [pc, #428]	; (80085ec <tcp_input+0x4a0>)
 800843e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008440:	429a      	cmp	r2, r3
 8008442:	d12c      	bne.n	800849e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	4b68      	ldr	r3, [pc, #416]	; (80085ec <tcp_input+0x4a0>)
 800844a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800844c:	429a      	cmp	r2, r3
 800844e:	d126      	bne.n	800849e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	429a      	cmp	r2, r3
 8008458:	d106      	bne.n	8008468 <tcp_input+0x31c>
 800845a:	4b65      	ldr	r3, [pc, #404]	; (80085f0 <tcp_input+0x4a4>)
 800845c:	f240 120d 	movw	r2, #269	; 0x10d
 8008460:	4964      	ldr	r1, [pc, #400]	; (80085f4 <tcp_input+0x4a8>)
 8008462:	4865      	ldr	r0, [pc, #404]	; (80085f8 <tcp_input+0x4ac>)
 8008464:	f006 feac 	bl	800f1c0 <iprintf>
      if (prev != NULL) {
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <tcp_input+0x338>
        prev->next = pcb->next;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008476:	4b61      	ldr	r3, [pc, #388]	; (80085fc <tcp_input+0x4b0>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800847e:	4a5f      	ldr	r2, [pc, #380]	; (80085fc <tcp_input+0x4b0>)
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	429a      	cmp	r2, r3
 800848c:	d111      	bne.n	80084b2 <tcp_input+0x366>
 800848e:	4b58      	ldr	r3, [pc, #352]	; (80085f0 <tcp_input+0x4a4>)
 8008490:	f240 1215 	movw	r2, #277	; 0x115
 8008494:	495a      	ldr	r1, [pc, #360]	; (8008600 <tcp_input+0x4b4>)
 8008496:	4858      	ldr	r0, [pc, #352]	; (80085f8 <tcp_input+0x4ac>)
 8008498:	f006 fe92 	bl	800f1c0 <iprintf>
      break;
 800849c:	e009      	b.n	80084b2 <tcp_input+0x366>
    }
    prev = pcb;
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f47f af5e 	bne.w	800836c <tcp_input+0x220>
 80084b0:	e000      	b.n	80084b4 <tcp_input+0x368>
      break;
 80084b2:	bf00      	nop
  }

  if (pcb == NULL) {
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f040 80aa 	bne.w	8008610 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084bc:	4b51      	ldr	r3, [pc, #324]	; (8008604 <tcp_input+0x4b8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e03f      	b.n	8008544 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	7d1b      	ldrb	r3, [r3, #20]
 80084c8:	2b0a      	cmp	r3, #10
 80084ca:	d006      	beq.n	80084da <tcp_input+0x38e>
 80084cc:	4b48      	ldr	r3, [pc, #288]	; (80085f0 <tcp_input+0x4a4>)
 80084ce:	f240 121f 	movw	r2, #287	; 0x11f
 80084d2:	494d      	ldr	r1, [pc, #308]	; (8008608 <tcp_input+0x4bc>)
 80084d4:	4848      	ldr	r0, [pc, #288]	; (80085f8 <tcp_input+0x4ac>)
 80084d6:	f006 fe73 	bl	800f1c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	7a1b      	ldrb	r3, [r3, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	7a1a      	ldrb	r2, [r3, #8]
 80084e6:	4b41      	ldr	r3, [pc, #260]	; (80085ec <tcp_input+0x4a0>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084ee:	3301      	adds	r3, #1
 80084f0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d122      	bne.n	800853c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	8b1a      	ldrh	r2, [r3, #24]
 80084fa:	4b3b      	ldr	r3, [pc, #236]	; (80085e8 <tcp_input+0x49c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	429a      	cmp	r2, r3
 8008504:	d11b      	bne.n	800853e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	8ada      	ldrh	r2, [r3, #22]
 800850a:	4b37      	ldr	r3, [pc, #220]	; (80085e8 <tcp_input+0x49c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	885b      	ldrh	r3, [r3, #2]
 8008510:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008512:	429a      	cmp	r2, r3
 8008514:	d113      	bne.n	800853e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	4b34      	ldr	r3, [pc, #208]	; (80085ec <tcp_input+0x4a0>)
 800851c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800851e:	429a      	cmp	r2, r3
 8008520:	d10d      	bne.n	800853e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b31      	ldr	r3, [pc, #196]	; (80085ec <tcp_input+0x4a0>)
 8008528:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800852a:	429a      	cmp	r2, r3
 800852c:	d107      	bne.n	800853e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800852e:	69f8      	ldr	r0, [r7, #28]
 8008530:	f000 fb56 	bl	8008be0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fd ff3f 	bl	80063b8 <pbuf_free>
        return;
 800853a:	e1fd      	b.n	8008938 <tcp_input+0x7ec>
        continue;
 800853c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1bc      	bne.n	80084c4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800854e:	4b2f      	ldr	r3, [pc, #188]	; (800860c <tcp_input+0x4c0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e02a      	b.n	80085ac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	7a1b      	ldrb	r3, [r3, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	7a1a      	ldrb	r2, [r3, #8]
 8008562:	4b22      	ldr	r3, [pc, #136]	; (80085ec <tcp_input+0x4a0>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800856a:	3301      	adds	r3, #1
 800856c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800856e:	429a      	cmp	r2, r3
 8008570:	d002      	beq.n	8008578 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	61bb      	str	r3, [r7, #24]
        continue;
 8008576:	e016      	b.n	80085a6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	8ada      	ldrh	r2, [r3, #22]
 800857c:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <tcp_input+0x49c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	885b      	ldrh	r3, [r3, #2]
 8008582:	b29b      	uxth	r3, r3
 8008584:	429a      	cmp	r2, r3
 8008586:	d10c      	bne.n	80085a2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b17      	ldr	r3, [pc, #92]	; (80085ec <tcp_input+0x4a0>)
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	429a      	cmp	r2, r3
 8008592:	d00f      	beq.n	80085b4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00d      	beq.n	80085b6 <tcp_input+0x46a>
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d009      	beq.n	80085b6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1d1      	bne.n	8008556 <tcp_input+0x40a>
 80085b2:	e000      	b.n	80085b6 <tcp_input+0x46a>
            break;
 80085b4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d029      	beq.n	8008610 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <tcp_input+0x4c0>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80085d2:	4a0e      	ldr	r2, [pc, #56]	; (800860c <tcp_input+0x4c0>)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80085d8:	6978      	ldr	r0, [r7, #20]
 80085da:	f000 fa03 	bl	80089e4 <tcp_listen_input>
      }
      pbuf_free(p);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fd feea 	bl	80063b8 <pbuf_free>
      return;
 80085e4:	e1a8      	b.n	8008938 <tcp_input+0x7ec>
 80085e6:	bf00      	nop
 80085e8:	200089ac 	.word	0x200089ac
 80085ec:	20003254 	.word	0x20003254
 80085f0:	0801182c 	.word	0x0801182c
 80085f4:	08011958 	.word	0x08011958
 80085f8:	08011878 	.word	0x08011878
 80085fc:	20008990 	.word	0x20008990
 8008600:	08011984 	.word	0x08011984
 8008604:	20008994 	.word	0x20008994
 8008608:	080119b0 	.word	0x080119b0
 800860c:	2000898c 	.word	0x2000898c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 8158 	beq.w	80088c8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008618:	4b95      	ldr	r3, [pc, #596]	; (8008870 <tcp_input+0x724>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	891a      	ldrh	r2, [r3, #8]
 8008622:	4b93      	ldr	r3, [pc, #588]	; (8008870 <tcp_input+0x724>)
 8008624:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008626:	4a92      	ldr	r2, [pc, #584]	; (8008870 <tcp_input+0x724>)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800862c:	4b91      	ldr	r3, [pc, #580]	; (8008874 <tcp_input+0x728>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a8f      	ldr	r2, [pc, #572]	; (8008870 <tcp_input+0x724>)
 8008632:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008634:	4b90      	ldr	r3, [pc, #576]	; (8008878 <tcp_input+0x72c>)
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800863a:	4b90      	ldr	r3, [pc, #576]	; (800887c <tcp_input+0x730>)
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008640:	4b8f      	ldr	r3, [pc, #572]	; (8008880 <tcp_input+0x734>)
 8008642:	2200      	movs	r2, #0
 8008644:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008646:	4b8f      	ldr	r3, [pc, #572]	; (8008884 <tcp_input+0x738>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f003 0308 	and.w	r3, r3, #8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d006      	beq.n	8008660 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7b5b      	ldrb	r3, [r3, #13]
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008664:	2b00      	cmp	r3, #0
 8008666:	d017      	beq.n	8008698 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008668:	69f8      	ldr	r0, [r7, #28]
 800866a:	f7ff f929 	bl	80078c0 <tcp_process_refused_data>
 800866e:	4603      	mov	r3, r0
 8008670:	f113 0f0d 	cmn.w	r3, #13
 8008674:	d007      	beq.n	8008686 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00c      	beq.n	8008698 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800867e:	4b82      	ldr	r3, [pc, #520]	; (8008888 <tcp_input+0x73c>)
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d008      	beq.n	8008698 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 80e3 	bne.w	8008856 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008690:	69f8      	ldr	r0, [r7, #28]
 8008692:	f003 f9ad 	bl	800b9f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008696:	e0de      	b.n	8008856 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008698:	4a7c      	ldr	r2, [pc, #496]	; (800888c <tcp_input+0x740>)
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800869e:	69f8      	ldr	r0, [r7, #28]
 80086a0:	f000 fb18 	bl	8008cd4 <tcp_process>
 80086a4:	4603      	mov	r3, r0
 80086a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80086a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086ac:	f113 0f0d 	cmn.w	r3, #13
 80086b0:	f000 80d3 	beq.w	800885a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80086b4:	4b71      	ldr	r3, [pc, #452]	; (800887c <tcp_input+0x730>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d015      	beq.n	80086ec <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d008      	beq.n	80086dc <tcp_input+0x590>
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	6912      	ldr	r2, [r2, #16]
 80086d4:	f06f 010d 	mvn.w	r1, #13
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086dc:	69f9      	ldr	r1, [r7, #28]
 80086de:	486c      	ldr	r0, [pc, #432]	; (8008890 <tcp_input+0x744>)
 80086e0:	f7ff fbbc 	bl	8007e5c <tcp_pcb_remove>
        tcp_free(pcb);
 80086e4:	69f8      	ldr	r0, [r7, #28]
 80086e6:	f7fe f9a9 	bl	8006a3c <tcp_free>
 80086ea:	e0da      	b.n	80088a2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80086f0:	4b63      	ldr	r3, [pc, #396]	; (8008880 <tcp_input+0x734>)
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01d      	beq.n	8008734 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80086f8:	4b61      	ldr	r3, [pc, #388]	; (8008880 <tcp_input+0x734>)
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <tcp_input+0x5d2>
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	6910      	ldr	r0, [r2, #16]
 8008712:	89fa      	ldrh	r2, [r7, #14]
 8008714:	69f9      	ldr	r1, [r7, #28]
 8008716:	4798      	blx	r3
 8008718:	4603      	mov	r3, r0
 800871a:	74fb      	strb	r3, [r7, #19]
 800871c:	e001      	b.n	8008722 <tcp_input+0x5d6>
 800871e:	2300      	movs	r3, #0
 8008720:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008722:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008726:	f113 0f0d 	cmn.w	r3, #13
 800872a:	f000 8098 	beq.w	800885e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800872e:	4b54      	ldr	r3, [pc, #336]	; (8008880 <tcp_input+0x734>)
 8008730:	2200      	movs	r2, #0
 8008732:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008734:	69f8      	ldr	r0, [r7, #28]
 8008736:	f000 f915 	bl	8008964 <tcp_input_delayed_close>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 8090 	bne.w	8008862 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008742:	4b4d      	ldr	r3, [pc, #308]	; (8008878 <tcp_input+0x72c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d041      	beq.n	80087ce <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800874e:	2b00      	cmp	r3, #0
 8008750:	d006      	beq.n	8008760 <tcp_input+0x614>
 8008752:	4b50      	ldr	r3, [pc, #320]	; (8008894 <tcp_input+0x748>)
 8008754:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008758:	494f      	ldr	r1, [pc, #316]	; (8008898 <tcp_input+0x74c>)
 800875a:	4850      	ldr	r0, [pc, #320]	; (800889c <tcp_input+0x750>)
 800875c:	f006 fd30 	bl	800f1c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	8b5b      	ldrh	r3, [r3, #26]
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800876c:	4b42      	ldr	r3, [pc, #264]	; (8008878 <tcp_input+0x72c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f7fd fe21 	bl	80063b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008776:	69f8      	ldr	r0, [r7, #28]
 8008778:	f7fe fc48 	bl	800700c <tcp_abort>
            goto aborted;
 800877c:	e091      	b.n	80088a2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00c      	beq.n	80087a2 <tcp_input+0x656>
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	6918      	ldr	r0, [r3, #16]
 8008792:	4b39      	ldr	r3, [pc, #228]	; (8008878 <tcp_input+0x72c>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	2300      	movs	r3, #0
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	47a0      	blx	r4
 800879c:	4603      	mov	r3, r0
 800879e:	74fb      	strb	r3, [r7, #19]
 80087a0:	e008      	b.n	80087b4 <tcp_input+0x668>
 80087a2:	4b35      	ldr	r3, [pc, #212]	; (8008878 <tcp_input+0x72c>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	2300      	movs	r3, #0
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	2000      	movs	r0, #0
 80087ac:	f7ff f95e 	bl	8007a6c <tcp_recv_null>
 80087b0:	4603      	mov	r3, r0
 80087b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80087b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087b8:	f113 0f0d 	cmn.w	r3, #13
 80087bc:	d053      	beq.n	8008866 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80087be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80087c6:	4b2c      	ldr	r3, [pc, #176]	; (8008878 <tcp_input+0x72c>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80087ce:	4b2b      	ldr	r3, [pc, #172]	; (800887c <tcp_input+0x730>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d030      	beq.n	800883c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087e6:	7b5a      	ldrb	r2, [r3, #13]
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087ec:	f042 0220 	orr.w	r2, r2, #32
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	735a      	strb	r2, [r3, #13]
 80087f4:	e022      	b.n	800883c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087fe:	d005      	beq.n	800880c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008804:	3301      	adds	r3, #1
 8008806:	b29a      	uxth	r2, r3
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <tcp_input+0x6e2>
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	6918      	ldr	r0, [r3, #16]
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	69f9      	ldr	r1, [r7, #28]
 8008826:	47a0      	blx	r4
 8008828:	4603      	mov	r3, r0
 800882a:	74fb      	strb	r3, [r7, #19]
 800882c:	e001      	b.n	8008832 <tcp_input+0x6e6>
 800882e:	2300      	movs	r3, #0
 8008830:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008832:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008836:	f113 0f0d 	cmn.w	r3, #13
 800883a:	d016      	beq.n	800886a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800883c:	4b13      	ldr	r3, [pc, #76]	; (800888c <tcp_input+0x740>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008842:	69f8      	ldr	r0, [r7, #28]
 8008844:	f000 f88e 	bl	8008964 <tcp_input_delayed_close>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d128      	bne.n	80088a0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800884e:	69f8      	ldr	r0, [r7, #28]
 8008850:	f002 fac8 	bl	800ade4 <tcp_output>
 8008854:	e025      	b.n	80088a2 <tcp_input+0x756>
        goto aborted;
 8008856:	bf00      	nop
 8008858:	e023      	b.n	80088a2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800885a:	bf00      	nop
 800885c:	e021      	b.n	80088a2 <tcp_input+0x756>
              goto aborted;
 800885e:	bf00      	nop
 8008860:	e01f      	b.n	80088a2 <tcp_input+0x756>
          goto aborted;
 8008862:	bf00      	nop
 8008864:	e01d      	b.n	80088a2 <tcp_input+0x756>
            goto aborted;
 8008866:	bf00      	nop
 8008868:	e01b      	b.n	80088a2 <tcp_input+0x756>
              goto aborted;
 800886a:	bf00      	nop
 800886c:	e019      	b.n	80088a2 <tcp_input+0x756>
 800886e:	bf00      	nop
 8008870:	2000899c 	.word	0x2000899c
 8008874:	200089ac 	.word	0x200089ac
 8008878:	200089cc 	.word	0x200089cc
 800887c:	200089c9 	.word	0x200089c9
 8008880:	200089c4 	.word	0x200089c4
 8008884:	200089c8 	.word	0x200089c8
 8008888:	200089c6 	.word	0x200089c6
 800888c:	200089d0 	.word	0x200089d0
 8008890:	20008990 	.word	0x20008990
 8008894:	0801182c 	.word	0x0801182c
 8008898:	080119e0 	.word	0x080119e0
 800889c:	08011878 	.word	0x08011878
          goto aborted;
 80088a0:	bf00      	nop
    tcp_input_pcb = NULL;
 80088a2:	4b27      	ldr	r3, [pc, #156]	; (8008940 <tcp_input+0x7f4>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80088a8:	4b26      	ldr	r3, [pc, #152]	; (8008944 <tcp_input+0x7f8>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80088ae:	4b26      	ldr	r3, [pc, #152]	; (8008948 <tcp_input+0x7fc>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d03f      	beq.n	8008936 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80088b6:	4b24      	ldr	r3, [pc, #144]	; (8008948 <tcp_input+0x7fc>)
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fd fd7c 	bl	80063b8 <pbuf_free>
      inseg.p = NULL;
 80088c0:	4b21      	ldr	r3, [pc, #132]	; (8008948 <tcp_input+0x7fc>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80088c6:	e036      	b.n	8008936 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80088c8:	4b20      	ldr	r3, [pc, #128]	; (800894c <tcp_input+0x800>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	899b      	ldrh	r3, [r3, #12]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fc fabd 	bl	8004e50 <lwip_htons>
 80088d6:	4603      	mov	r3, r0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 0304 	and.w	r3, r3, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d118      	bne.n	8008914 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <tcp_input+0x804>)
 80088e4:	6819      	ldr	r1, [r3, #0]
 80088e6:	4b1b      	ldr	r3, [pc, #108]	; (8008954 <tcp_input+0x808>)
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <tcp_input+0x80c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088f2:	4b16      	ldr	r3, [pc, #88]	; (800894c <tcp_input+0x800>)
 80088f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088fa:	4a14      	ldr	r2, [pc, #80]	; (800894c <tcp_input+0x800>)
 80088fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088fe:	8812      	ldrh	r2, [r2, #0]
 8008900:	b292      	uxth	r2, r2
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	4b15      	ldr	r3, [pc, #84]	; (800895c <tcp_input+0x810>)
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <tcp_input+0x814>)
 800890c:	4602      	mov	r2, r0
 800890e:	2000      	movs	r0, #0
 8008910:	f003 f81c 	bl	800b94c <tcp_rst>
    pbuf_free(p);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7fd fd4f 	bl	80063b8 <pbuf_free>
  return;
 800891a:	e00c      	b.n	8008936 <tcp_input+0x7ea>
    goto dropped;
 800891c:	bf00      	nop
 800891e:	e006      	b.n	800892e <tcp_input+0x7e2>
    goto dropped;
 8008920:	bf00      	nop
 8008922:	e004      	b.n	800892e <tcp_input+0x7e2>
    goto dropped;
 8008924:	bf00      	nop
 8008926:	e002      	b.n	800892e <tcp_input+0x7e2>
      goto dropped;
 8008928:	bf00      	nop
 800892a:	e000      	b.n	800892e <tcp_input+0x7e2>
      goto dropped;
 800892c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fd fd42 	bl	80063b8 <pbuf_free>
 8008934:	e000      	b.n	8008938 <tcp_input+0x7ec>
  return;
 8008936:	bf00      	nop
}
 8008938:	3724      	adds	r7, #36	; 0x24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd90      	pop	{r4, r7, pc}
 800893e:	bf00      	nop
 8008940:	200089d0 	.word	0x200089d0
 8008944:	200089cc 	.word	0x200089cc
 8008948:	2000899c 	.word	0x2000899c
 800894c:	200089ac 	.word	0x200089ac
 8008950:	200089c0 	.word	0x200089c0
 8008954:	200089c6 	.word	0x200089c6
 8008958:	200089bc 	.word	0x200089bc
 800895c:	20003264 	.word	0x20003264
 8008960:	20003268 	.word	0x20003268

08008964 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d106      	bne.n	8008980 <tcp_input_delayed_close+0x1c>
 8008972:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <tcp_input_delayed_close+0x6c>)
 8008974:	f240 225a 	movw	r2, #602	; 0x25a
 8008978:	4916      	ldr	r1, [pc, #88]	; (80089d4 <tcp_input_delayed_close+0x70>)
 800897a:	4817      	ldr	r0, [pc, #92]	; (80089d8 <tcp_input_delayed_close+0x74>)
 800897c:	f006 fc20 	bl	800f1c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008980:	4b16      	ldr	r3, [pc, #88]	; (80089dc <tcp_input_delayed_close+0x78>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01c      	beq.n	80089c6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8b5b      	ldrh	r3, [r3, #26]
 8008990:	f003 0310 	and.w	r3, r3, #16
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10d      	bne.n	80089b4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <tcp_input_delayed_close+0x50>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6912      	ldr	r2, [r2, #16]
 80089ac:	f06f 010e 	mvn.w	r1, #14
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	480a      	ldr	r0, [pc, #40]	; (80089e0 <tcp_input_delayed_close+0x7c>)
 80089b8:	f7ff fa50 	bl	8007e5c <tcp_pcb_remove>
    tcp_free(pcb);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7fe f83d 	bl	8006a3c <tcp_free>
    return 1;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	0801182c 	.word	0x0801182c
 80089d4:	080119fc 	.word	0x080119fc
 80089d8:	08011878 	.word	0x08011878
 80089dc:	200089c9 	.word	0x200089c9
 80089e0:	20008990 	.word	0x20008990

080089e4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b08b      	sub	sp, #44	; 0x2c
 80089e8:	af04      	add	r7, sp, #16
 80089ea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80089ec:	4b6f      	ldr	r3, [pc, #444]	; (8008bac <tcp_listen_input+0x1c8>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 80d2 	bne.w	8008b9e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d106      	bne.n	8008a0e <tcp_listen_input+0x2a>
 8008a00:	4b6b      	ldr	r3, [pc, #428]	; (8008bb0 <tcp_listen_input+0x1cc>)
 8008a02:	f240 2281 	movw	r2, #641	; 0x281
 8008a06:	496b      	ldr	r1, [pc, #428]	; (8008bb4 <tcp_listen_input+0x1d0>)
 8008a08:	486b      	ldr	r0, [pc, #428]	; (8008bb8 <tcp_listen_input+0x1d4>)
 8008a0a:	f006 fbd9 	bl	800f1c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008a0e:	4b67      	ldr	r3, [pc, #412]	; (8008bac <tcp_listen_input+0x1c8>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d019      	beq.n	8008a4e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a1a:	4b68      	ldr	r3, [pc, #416]	; (8008bbc <tcp_listen_input+0x1d8>)
 8008a1c:	6819      	ldr	r1, [r3, #0]
 8008a1e:	4b68      	ldr	r3, [pc, #416]	; (8008bc0 <tcp_listen_input+0x1dc>)
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b67      	ldr	r3, [pc, #412]	; (8008bc4 <tcp_listen_input+0x1e0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a2a:	4b67      	ldr	r3, [pc, #412]	; (8008bc8 <tcp_listen_input+0x1e4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a2e:	885b      	ldrh	r3, [r3, #2]
 8008a30:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a32:	4a65      	ldr	r2, [pc, #404]	; (8008bc8 <tcp_listen_input+0x1e4>)
 8008a34:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a36:	8812      	ldrh	r2, [r2, #0]
 8008a38:	b292      	uxth	r2, r2
 8008a3a:	9202      	str	r2, [sp, #8]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	4b63      	ldr	r3, [pc, #396]	; (8008bcc <tcp_listen_input+0x1e8>)
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	4b63      	ldr	r3, [pc, #396]	; (8008bd0 <tcp_listen_input+0x1ec>)
 8008a44:	4602      	mov	r2, r0
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f002 ff80 	bl	800b94c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008a4c:	e0a9      	b.n	8008ba2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008a4e:	4b57      	ldr	r3, [pc, #348]	; (8008bac <tcp_listen_input+0x1c8>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 80a3 	beq.w	8008ba2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	7d5b      	ldrb	r3, [r3, #21]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff f927 	bl	8007cb4 <tcp_alloc>
 8008a66:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d111      	bne.n	8008a92 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <tcp_listen_input+0xa8>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6910      	ldr	r0, [r2, #16]
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a82:	2100      	movs	r1, #0
 8008a84:	4798      	blx	r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]
      return;
 8008a8a:	e08b      	b.n	8008ba4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a8c:	23f0      	movs	r3, #240	; 0xf0
 8008a8e:	73bb      	strb	r3, [r7, #14]
      return;
 8008a90:	e088      	b.n	8008ba4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008a92:	4b50      	ldr	r3, [pc, #320]	; (8008bd4 <tcp_listen_input+0x1f0>)
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008a9a:	4b4e      	ldr	r3, [pc, #312]	; (8008bd4 <tcp_listen_input+0x1f0>)
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	8ada      	ldrh	r2, [r3, #22]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008aaa:	4b47      	ldr	r3, [pc, #284]	; (8008bc8 <tcp_listen_input+0x1e4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2203      	movs	r2, #3
 8008aba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008abc:	4b41      	ldr	r3, [pc, #260]	; (8008bc4 <tcp_listen_input+0x1e0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008ace:	6978      	ldr	r0, [r7, #20]
 8008ad0:	f7ff fa58 	bl	8007f84 <tcp_next_iss>
 8008ad4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008aee:	4b35      	ldr	r3, [pc, #212]	; (8008bc4 <tcp_listen_input+0x1e0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	1e5a      	subs	r2, r3, #1
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691a      	ldr	r2, [r3, #16]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	7a5b      	ldrb	r3, [r3, #9]
 8008b0a:	f003 030c 	and.w	r3, r3, #12
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	7a1a      	ldrb	r2, [r3, #8]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008b1c:	4b2e      	ldr	r3, [pc, #184]	; (8008bd8 <tcp_listen_input+0x1f4>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	60da      	str	r2, [r3, #12]
 8008b24:	4a2c      	ldr	r2, [pc, #176]	; (8008bd8 <tcp_listen_input+0x1f4>)
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	f003 f8d1 	bl	800bcd0 <tcp_timer_needed>
 8008b2e:	4b2b      	ldr	r3, [pc, #172]	; (8008bdc <tcp_listen_input+0x1f8>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008b34:	6978      	ldr	r0, [r7, #20]
 8008b36:	f001 fd8f 	bl	800a658 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008b3a:	4b23      	ldr	r3, [pc, #140]	; (8008bc8 <tcp_listen_input+0x1e4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	89db      	ldrh	r3, [r3, #14]
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f005 f84f 	bl	800dc00 <ip4_route>
 8008b62:	4601      	mov	r1, r0
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	3304      	adds	r3, #4
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff fa30 	bl	8007fd0 <tcp_eff_send_mss_netif>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008b78:	2112      	movs	r1, #18
 8008b7a:	6978      	ldr	r0, [r7, #20]
 8008b7c:	f002 f844 	bl	800ac08 <tcp_enqueue_flags>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6978      	ldr	r0, [r7, #20]
 8008b90:	f7fe f97e 	bl	8006e90 <tcp_abandon>
      return;
 8008b94:	e006      	b.n	8008ba4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008b96:	6978      	ldr	r0, [r7, #20]
 8008b98:	f002 f924 	bl	800ade4 <tcp_output>
  return;
 8008b9c:	e001      	b.n	8008ba2 <tcp_listen_input+0x1be>
    return;
 8008b9e:	bf00      	nop
 8008ba0:	e000      	b.n	8008ba4 <tcp_listen_input+0x1c0>
  return;
 8008ba2:	bf00      	nop
}
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd90      	pop	{r4, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	200089c8 	.word	0x200089c8
 8008bb0:	0801182c 	.word	0x0801182c
 8008bb4:	08011a24 	.word	0x08011a24
 8008bb8:	08011878 	.word	0x08011878
 8008bbc:	200089c0 	.word	0x200089c0
 8008bc0:	200089c6 	.word	0x200089c6
 8008bc4:	200089bc 	.word	0x200089bc
 8008bc8:	200089ac 	.word	0x200089ac
 8008bcc:	20003264 	.word	0x20003264
 8008bd0:	20003268 	.word	0x20003268
 8008bd4:	20003254 	.word	0x20003254
 8008bd8:	20008990 	.word	0x20008990
 8008bdc:	20008998 	.word	0x20008998

08008be0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af04      	add	r7, sp, #16
 8008be6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008be8:	4b2f      	ldr	r3, [pc, #188]	; (8008ca8 <tcp_timewait_input+0xc8>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d153      	bne.n	8008c9c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <tcp_timewait_input+0x28>
 8008bfa:	4b2c      	ldr	r3, [pc, #176]	; (8008cac <tcp_timewait_input+0xcc>)
 8008bfc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008c00:	492b      	ldr	r1, [pc, #172]	; (8008cb0 <tcp_timewait_input+0xd0>)
 8008c02:	482c      	ldr	r0, [pc, #176]	; (8008cb4 <tcp_timewait_input+0xd4>)
 8008c04:	f006 fadc 	bl	800f1c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008c08:	4b27      	ldr	r3, [pc, #156]	; (8008ca8 <tcp_timewait_input+0xc8>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d02a      	beq.n	8008c6a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008c14:	4b28      	ldr	r3, [pc, #160]	; (8008cb8 <tcp_timewait_input+0xd8>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	db2d      	blt.n	8008c7e <tcp_timewait_input+0x9e>
 8008c22:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <tcp_timewait_input+0xd8>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c2e:	440b      	add	r3, r1
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dc23      	bgt.n	8008c7e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c36:	4b21      	ldr	r3, [pc, #132]	; (8008cbc <tcp_timewait_input+0xdc>)
 8008c38:	6819      	ldr	r1, [r3, #0]
 8008c3a:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <tcp_timewait_input+0xe0>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <tcp_timewait_input+0xd8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c46:	4b1f      	ldr	r3, [pc, #124]	; (8008cc4 <tcp_timewait_input+0xe4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c4a:	885b      	ldrh	r3, [r3, #2]
 8008c4c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <tcp_timewait_input+0xe4>)
 8008c50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c52:	8812      	ldrh	r2, [r2, #0]
 8008c54:	b292      	uxth	r2, r2
 8008c56:	9202      	str	r2, [sp, #8]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <tcp_timewait_input+0xe8>)
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <tcp_timewait_input+0xec>)
 8008c60:	4602      	mov	r2, r0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f002 fe72 	bl	800b94c <tcp_rst>
      return;
 8008c68:	e01b      	b.n	8008ca2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008c6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ca8 <tcp_timewait_input+0xc8>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008c76:	4b16      	ldr	r3, [pc, #88]	; (8008cd0 <tcp_timewait_input+0xf0>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008c7e:	4b10      	ldr	r3, [pc, #64]	; (8008cc0 <tcp_timewait_input+0xe0>)
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00c      	beq.n	8008ca0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8b5b      	ldrh	r3, [r3, #26]
 8008c8a:	f043 0302 	orr.w	r3, r3, #2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f002 f8a5 	bl	800ade4 <tcp_output>
  }
  return;
 8008c9a:	e001      	b.n	8008ca0 <tcp_timewait_input+0xc0>
    return;
 8008c9c:	bf00      	nop
 8008c9e:	e000      	b.n	8008ca2 <tcp_timewait_input+0xc2>
  return;
 8008ca0:	bf00      	nop
}
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	200089c8 	.word	0x200089c8
 8008cac:	0801182c 	.word	0x0801182c
 8008cb0:	08011a44 	.word	0x08011a44
 8008cb4:	08011878 	.word	0x08011878
 8008cb8:	200089bc 	.word	0x200089bc
 8008cbc:	200089c0 	.word	0x200089c0
 8008cc0:	200089c6 	.word	0x200089c6
 8008cc4:	200089ac 	.word	0x200089ac
 8008cc8:	20003264 	.word	0x20003264
 8008ccc:	20003268 	.word	0x20003268
 8008cd0:	20008984 	.word	0x20008984

08008cd4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008cd4:	b590      	push	{r4, r7, lr}
 8008cd6:	b08d      	sub	sp, #52	; 0x34
 8008cd8:	af04      	add	r7, sp, #16
 8008cda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <tcp_process+0x24>
 8008cea:	4b9d      	ldr	r3, [pc, #628]	; (8008f60 <tcp_process+0x28c>)
 8008cec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008cf0:	499c      	ldr	r1, [pc, #624]	; (8008f64 <tcp_process+0x290>)
 8008cf2:	489d      	ldr	r0, [pc, #628]	; (8008f68 <tcp_process+0x294>)
 8008cf4:	f006 fa64 	bl	800f1c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008cf8:	4b9c      	ldr	r3, [pc, #624]	; (8008f6c <tcp_process+0x298>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d04e      	beq.n	8008da2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7d1b      	ldrb	r3, [r3, #20]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d108      	bne.n	8008d1e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d10:	4b97      	ldr	r3, [pc, #604]	; (8008f70 <tcp_process+0x29c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d123      	bne.n	8008d60 <tcp_process+0x8c>
        acceptable = 1;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	76fb      	strb	r3, [r7, #27]
 8008d1c:	e020      	b.n	8008d60 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d22:	4b94      	ldr	r3, [pc, #592]	; (8008f74 <tcp_process+0x2a0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d102      	bne.n	8008d30 <tcp_process+0x5c>
        acceptable = 1;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	76fb      	strb	r3, [r7, #27]
 8008d2e:	e017      	b.n	8008d60 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d30:	4b90      	ldr	r3, [pc, #576]	; (8008f74 <tcp_process+0x2a0>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db10      	blt.n	8008d60 <tcp_process+0x8c>
 8008d3e:	4b8d      	ldr	r3, [pc, #564]	; (8008f74 <tcp_process+0x2a0>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d4a:	440b      	add	r3, r1
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dc06      	bgt.n	8008d60 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	8b5b      	ldrh	r3, [r3, #26]
 8008d56:	f043 0302 	orr.w	r3, r3, #2
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008d60:	7efb      	ldrb	r3, [r7, #27]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01b      	beq.n	8008d9e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7d1b      	ldrb	r3, [r3, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <tcp_process+0xa8>
 8008d6e:	4b7c      	ldr	r3, [pc, #496]	; (8008f60 <tcp_process+0x28c>)
 8008d70:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008d74:	4980      	ldr	r1, [pc, #512]	; (8008f78 <tcp_process+0x2a4>)
 8008d76:	487c      	ldr	r0, [pc, #496]	; (8008f68 <tcp_process+0x294>)
 8008d78:	f006 fa22 	bl	800f1c0 <iprintf>
      recv_flags |= TF_RESET;
 8008d7c:	4b7f      	ldr	r3, [pc, #508]	; (8008f7c <tcp_process+0x2a8>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f043 0308 	orr.w	r3, r3, #8
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	4b7d      	ldr	r3, [pc, #500]	; (8008f7c <tcp_process+0x2a8>)
 8008d88:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	8b5b      	ldrh	r3, [r3, #26]
 8008d8e:	f023 0301 	bic.w	r3, r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008d98:	f06f 030d 	mvn.w	r3, #13
 8008d9c:	e37a      	b.n	8009494 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e378      	b.n	8009494 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008da2:	4b72      	ldr	r3, [pc, #456]	; (8008f6c <tcp_process+0x298>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f003 0302 	and.w	r3, r3, #2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d010      	beq.n	8008dd0 <tcp_process+0xfc>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7d1b      	ldrb	r3, [r3, #20]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d00c      	beq.n	8008dd0 <tcp_process+0xfc>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7d1b      	ldrb	r3, [r3, #20]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d008      	beq.n	8008dd0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8b5b      	ldrh	r3, [r3, #26]
 8008dc2:	f043 0302 	orr.w	r3, r3, #2
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e361      	b.n	8009494 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	8b5b      	ldrh	r3, [r3, #26]
 8008dd4:	f003 0310 	and.w	r3, r3, #16
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d103      	bne.n	8008de4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008ddc:	4b68      	ldr	r3, [pc, #416]	; (8008f80 <tcp_process+0x2ac>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 fc2f 	bl	800a658 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	7d1b      	ldrb	r3, [r3, #20]
 8008dfe:	3b02      	subs	r3, #2
 8008e00:	2b07      	cmp	r3, #7
 8008e02:	f200 8337 	bhi.w	8009474 <tcp_process+0x7a0>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <tcp_process+0x138>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e2d 	.word	0x08008e2d
 8008e10:	0800905d 	.word	0x0800905d
 8008e14:	080091d5 	.word	0x080091d5
 8008e18:	080091ff 	.word	0x080091ff
 8008e1c:	08009323 	.word	0x08009323
 8008e20:	080091d5 	.word	0x080091d5
 8008e24:	080093af 	.word	0x080093af
 8008e28:	0800943f 	.word	0x0800943f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008e2c:	4b4f      	ldr	r3, [pc, #316]	; (8008f6c <tcp_process+0x298>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 0310 	and.w	r3, r3, #16
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80e4 	beq.w	8009002 <tcp_process+0x32e>
 8008e3a:	4b4c      	ldr	r3, [pc, #304]	; (8008f6c <tcp_process+0x298>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 80dd 	beq.w	8009002 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	4b48      	ldr	r3, [pc, #288]	; (8008f70 <tcp_process+0x29c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	f040 80d5 	bne.w	8009002 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008e58:	4b46      	ldr	r3, [pc, #280]	; (8008f74 <tcp_process+0x2a0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008e6a:	4b41      	ldr	r3, [pc, #260]	; (8008f70 <tcp_process+0x29c>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008e72:	4b44      	ldr	r3, [pc, #272]	; (8008f84 <tcp_process+0x2b0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	89db      	ldrh	r3, [r3, #14]
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008e8c:	4b39      	ldr	r3, [pc, #228]	; (8008f74 <tcp_process+0x2a0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	1e5a      	subs	r2, r3, #1
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f004 feab 	bl	800dc00 <ip4_route>
 8008eaa:	4601      	mov	r1, r0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7ff f88c 	bl	8007fd0 <tcp_eff_send_mss_netif>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ec4:	009a      	lsls	r2, r3, #2
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	f241 111c 	movw	r1, #4380	; 0x111c
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf38      	it	cc
 8008ed4:	460b      	movcc	r3, r1
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d204      	bcs.n	8008ee4 <tcp_process+0x210>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	e00d      	b.n	8008f00 <tcp_process+0x22c>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	f241 121c 	movw	r2, #4380	; 0x111c
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d904      	bls.n	8008efc <tcp_process+0x228>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	e001      	b.n	8008f00 <tcp_process+0x22c>
 8008efc:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <tcp_process+0x24a>
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <tcp_process+0x28c>)
 8008f12:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008f16:	491c      	ldr	r1, [pc, #112]	; (8008f88 <tcp_process+0x2b4>)
 8008f18:	4813      	ldr	r0, [pc, #76]	; (8008f68 <tcp_process+0x294>)
 8008f1a:	f006 f951 	bl	800f1c0 <iprintf>
        --pcb->snd_queuelen;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f32:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d12a      	bne.n	8008f90 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <tcp_process+0x280>
 8008f46:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <tcp_process+0x28c>)
 8008f48:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008f4c:	490f      	ldr	r1, [pc, #60]	; (8008f8c <tcp_process+0x2b8>)
 8008f4e:	4806      	ldr	r0, [pc, #24]	; (8008f68 <tcp_process+0x294>)
 8008f50:	f006 f936 	bl	800f1c0 <iprintf>
          pcb->unsent = rseg->next;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f5c:	e01c      	b.n	8008f98 <tcp_process+0x2c4>
 8008f5e:	bf00      	nop
 8008f60:	0801182c 	.word	0x0801182c
 8008f64:	08011a64 	.word	0x08011a64
 8008f68:	08011878 	.word	0x08011878
 8008f6c:	200089c8 	.word	0x200089c8
 8008f70:	200089c0 	.word	0x200089c0
 8008f74:	200089bc 	.word	0x200089bc
 8008f78:	08011a80 	.word	0x08011a80
 8008f7c:	200089c9 	.word	0x200089c9
 8008f80:	20008984 	.word	0x20008984
 8008f84:	200089ac 	.word	0x200089ac
 8008f88:	08011aa0 	.word	0x08011aa0
 8008f8c:	08011ab8 	.word	0x08011ab8
        } else {
          pcb->unacked = rseg->next;
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008f98:	69f8      	ldr	r0, [r7, #28]
 8008f9a:	f7fe fd22 	bl	80079e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fac:	861a      	strh	r2, [r3, #48]	; 0x30
 8008fae:	e006      	b.n	8008fbe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <tcp_process+0x30a>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6910      	ldr	r0, [r2, #16]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4798      	blx	r3
 8008fd8:	4603      	mov	r3, r0
 8008fda:	76bb      	strb	r3, [r7, #26]
 8008fdc:	e001      	b.n	8008fe2 <tcp_process+0x30e>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008fe2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008fe6:	f113 0f0d 	cmn.w	r3, #13
 8008fea:	d102      	bne.n	8008ff2 <tcp_process+0x31e>
          return ERR_ABRT;
 8008fec:	f06f 030c 	mvn.w	r3, #12
 8008ff0:	e250      	b.n	8009494 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8b5b      	ldrh	r3, [r3, #26]
 8008ff6:	f043 0302 	orr.w	r3, r3, #2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009000:	e23a      	b.n	8009478 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009002:	4b98      	ldr	r3, [pc, #608]	; (8009264 <tcp_process+0x590>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 8234 	beq.w	8009478 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009010:	4b95      	ldr	r3, [pc, #596]	; (8009268 <tcp_process+0x594>)
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	4b95      	ldr	r3, [pc, #596]	; (800926c <tcp_process+0x598>)
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	4b95      	ldr	r3, [pc, #596]	; (8009270 <tcp_process+0x59c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009020:	4b94      	ldr	r3, [pc, #592]	; (8009274 <tcp_process+0x5a0>)
 8009022:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009028:	4a92      	ldr	r2, [pc, #584]	; (8009274 <tcp_process+0x5a0>)
 800902a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800902c:	8812      	ldrh	r2, [r2, #0]
 800902e:	b292      	uxth	r2, r2
 8009030:	9202      	str	r2, [sp, #8]
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	4b90      	ldr	r3, [pc, #576]	; (8009278 <tcp_process+0x5a4>)
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4b90      	ldr	r3, [pc, #576]	; (800927c <tcp_process+0x5a8>)
 800903a:	4602      	mov	r2, r0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f002 fc85 	bl	800b94c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009048:	2b05      	cmp	r3, #5
 800904a:	f200 8215 	bhi.w	8009478 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f002 fa4f 	bl	800b4f8 <tcp_rexmit_rto>
      break;
 800905a:	e20d      	b.n	8009478 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800905c:	4b81      	ldr	r3, [pc, #516]	; (8009264 <tcp_process+0x590>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	f003 0310 	and.w	r3, r3, #16
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 80a1 	beq.w	80091ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800906a:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <tcp_process+0x594>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	db7e      	blt.n	8009178 <tcp_process+0x4a4>
 800907a:	4b7b      	ldr	r3, [pc, #492]	; (8009268 <tcp_process+0x594>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	dc77      	bgt.n	8009178 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2204      	movs	r2, #4
 800908c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009096:	23fa      	movs	r3, #250	; 0xfa
 8009098:	76bb      	strb	r3, [r7, #26]
 800909a:	e01d      	b.n	80090d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <tcp_process+0x3e0>
 80090a6:	4b76      	ldr	r3, [pc, #472]	; (8009280 <tcp_process+0x5ac>)
 80090a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80090ac:	4975      	ldr	r1, [pc, #468]	; (8009284 <tcp_process+0x5b0>)
 80090ae:	4876      	ldr	r0, [pc, #472]	; (8009288 <tcp_process+0x5b4>)
 80090b0:	f006 f886 	bl	800f1c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <tcp_process+0x400>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6910      	ldr	r0, [r2, #16]
 80090c8:	2200      	movs	r2, #0
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4798      	blx	r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	76bb      	strb	r3, [r7, #26]
 80090d2:	e001      	b.n	80090d8 <tcp_process+0x404>
 80090d4:	23f0      	movs	r3, #240	; 0xf0
 80090d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80090d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80090e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090e4:	f113 0f0d 	cmn.w	r3, #13
 80090e8:	d002      	beq.n	80090f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fd ff8e 	bl	800700c <tcp_abort>
            }
            return ERR_ABRT;
 80090f0:	f06f 030c 	mvn.w	r3, #12
 80090f4:	e1ce      	b.n	8009494 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fae0 	bl	80096bc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80090fc:	4b63      	ldr	r3, [pc, #396]	; (800928c <tcp_process+0x5b8>)
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <tcp_process+0x43c>
            recv_acked--;
 8009104:	4b61      	ldr	r3, [pc, #388]	; (800928c <tcp_process+0x5b8>)
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	4b5f      	ldr	r3, [pc, #380]	; (800928c <tcp_process+0x5b8>)
 800910e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009114:	009a      	lsls	r2, r3, #2
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009120:	428b      	cmp	r3, r1
 8009122:	bf38      	it	cc
 8009124:	460b      	movcc	r3, r1
 8009126:	429a      	cmp	r2, r3
 8009128:	d204      	bcs.n	8009134 <tcp_process+0x460>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	b29b      	uxth	r3, r3
 8009132:	e00d      	b.n	8009150 <tcp_process+0x47c>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	f241 121c 	movw	r2, #4380	; 0x111c
 800913e:	4293      	cmp	r3, r2
 8009140:	d904      	bls.n	800914c <tcp_process+0x478>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	b29b      	uxth	r3, r3
 800914a:	e001      	b.n	8009150 <tcp_process+0x47c>
 800914c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009156:	4b4e      	ldr	r3, [pc, #312]	; (8009290 <tcp_process+0x5bc>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d037      	beq.n	80091d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8b5b      	ldrh	r3, [r3, #26]
 8009166:	f043 0302 	orr.w	r3, r3, #2
 800916a:	b29a      	uxth	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2207      	movs	r2, #7
 8009174:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009176:	e02c      	b.n	80091d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009178:	4b3b      	ldr	r3, [pc, #236]	; (8009268 <tcp_process+0x594>)
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	4b3b      	ldr	r3, [pc, #236]	; (800926c <tcp_process+0x598>)
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	461a      	mov	r2, r3
 8009182:	4b3b      	ldr	r3, [pc, #236]	; (8009270 <tcp_process+0x59c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009188:	4b3a      	ldr	r3, [pc, #232]	; (8009274 <tcp_process+0x5a0>)
 800918a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009190:	4a38      	ldr	r2, [pc, #224]	; (8009274 <tcp_process+0x5a0>)
 8009192:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009194:	8812      	ldrh	r2, [r2, #0]
 8009196:	b292      	uxth	r2, r2
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <tcp_process+0x5a4>)
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4b36      	ldr	r3, [pc, #216]	; (800927c <tcp_process+0x5a8>)
 80091a2:	4602      	mov	r2, r0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 fbd1 	bl	800b94c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80091aa:	e167      	b.n	800947c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80091ac:	4b2d      	ldr	r3, [pc, #180]	; (8009264 <tcp_process+0x590>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8161 	beq.w	800947c <tcp_process+0x7a8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	1e5a      	subs	r2, r3, #1
 80091c0:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <tcp_process+0x59c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	f040 8159 	bne.w	800947c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f002 f9b6 	bl	800b53c <tcp_rexmit>
      break;
 80091d0:	e154      	b.n	800947c <tcp_process+0x7a8>
 80091d2:	e153      	b.n	800947c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fa71 	bl	80096bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80091da:	4b2d      	ldr	r3, [pc, #180]	; (8009290 <tcp_process+0x5bc>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 814c 	beq.w	8009480 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	8b5b      	ldrh	r3, [r3, #26]
 80091ec:	f043 0302 	orr.w	r3, r3, #2
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2207      	movs	r2, #7
 80091fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091fc:	e140      	b.n	8009480 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa5c 	bl	80096bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009204:	4b22      	ldr	r3, [pc, #136]	; (8009290 <tcp_process+0x5bc>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d071      	beq.n	80092f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009210:	4b14      	ldr	r3, [pc, #80]	; (8009264 <tcp_process+0x590>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b00      	cmp	r3, #0
 800921a:	d060      	beq.n	80092de <tcp_process+0x60a>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009220:	4b11      	ldr	r3, [pc, #68]	; (8009268 <tcp_process+0x594>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d15a      	bne.n	80092de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800922c:	2b00      	cmp	r3, #0
 800922e:	d156      	bne.n	80092de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8b5b      	ldrh	r3, [r3, #26]
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	b29a      	uxth	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fe fdbc 	bl	8007dbc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009244:	4b13      	ldr	r3, [pc, #76]	; (8009294 <tcp_process+0x5c0>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d105      	bne.n	800925a <tcp_process+0x586>
 800924e:	4b11      	ldr	r3, [pc, #68]	; (8009294 <tcp_process+0x5c0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	4a0f      	ldr	r2, [pc, #60]	; (8009294 <tcp_process+0x5c0>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	e02e      	b.n	80092b8 <tcp_process+0x5e4>
 800925a:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <tcp_process+0x5c0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	e027      	b.n	80092b2 <tcp_process+0x5de>
 8009262:	bf00      	nop
 8009264:	200089c8 	.word	0x200089c8
 8009268:	200089c0 	.word	0x200089c0
 800926c:	200089c6 	.word	0x200089c6
 8009270:	200089bc 	.word	0x200089bc
 8009274:	200089ac 	.word	0x200089ac
 8009278:	20003264 	.word	0x20003264
 800927c:	20003268 	.word	0x20003268
 8009280:	0801182c 	.word	0x0801182c
 8009284:	08011acc 	.word	0x08011acc
 8009288:	08011878 	.word	0x08011878
 800928c:	200089c4 	.word	0x200089c4
 8009290:	200089c9 	.word	0x200089c9
 8009294:	20008990 	.word	0x20008990
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d104      	bne.n	80092ac <tcp_process+0x5d8>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	e005      	b.n	80092b8 <tcp_process+0x5e4>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1ef      	bne.n	8009298 <tcp_process+0x5c4>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	60da      	str	r2, [r3, #12]
 80092be:	4b77      	ldr	r3, [pc, #476]	; (800949c <tcp_process+0x7c8>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	220a      	movs	r2, #10
 80092c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80092ca:	4b75      	ldr	r3, [pc, #468]	; (80094a0 <tcp_process+0x7cc>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	4a73      	ldr	r2, [pc, #460]	; (80094a0 <tcp_process+0x7cc>)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	f002 fcfa 	bl	800bcd0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80092dc:	e0d2      	b.n	8009484 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	8b5b      	ldrh	r3, [r3, #26]
 80092e2:	f043 0302 	orr.w	r3, r3, #2
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2208      	movs	r2, #8
 80092f0:	751a      	strb	r2, [r3, #20]
      break;
 80092f2:	e0c7      	b.n	8009484 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092f4:	4b6b      	ldr	r3, [pc, #428]	; (80094a4 <tcp_process+0x7d0>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 0310 	and.w	r3, r3, #16
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 80c1 	beq.w	8009484 <tcp_process+0x7b0>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009306:	4b68      	ldr	r3, [pc, #416]	; (80094a8 <tcp_process+0x7d4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	f040 80ba 	bne.w	8009484 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009314:	2b00      	cmp	r3, #0
 8009316:	f040 80b5 	bne.w	8009484 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2206      	movs	r2, #6
 800931e:	751a      	strb	r2, [r3, #20]
      break;
 8009320:	e0b0      	b.n	8009484 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9ca 	bl	80096bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009328:	4b60      	ldr	r3, [pc, #384]	; (80094ac <tcp_process+0x7d8>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 80a9 	beq.w	8009488 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8b5b      	ldrh	r3, [r3, #26]
 800933a:	f043 0302 	orr.w	r3, r3, #2
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7fe fd39 	bl	8007dbc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800934a:	4b59      	ldr	r3, [pc, #356]	; (80094b0 <tcp_process+0x7dc>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d105      	bne.n	8009360 <tcp_process+0x68c>
 8009354:	4b56      	ldr	r3, [pc, #344]	; (80094b0 <tcp_process+0x7dc>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	4a55      	ldr	r2, [pc, #340]	; (80094b0 <tcp_process+0x7dc>)
 800935c:	6013      	str	r3, [r2, #0]
 800935e:	e013      	b.n	8009388 <tcp_process+0x6b4>
 8009360:	4b53      	ldr	r3, [pc, #332]	; (80094b0 <tcp_process+0x7dc>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	e00c      	b.n	8009382 <tcp_process+0x6ae>
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	429a      	cmp	r2, r3
 8009370:	d104      	bne.n	800937c <tcp_process+0x6a8>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	60da      	str	r2, [r3, #12]
 800937a:	e005      	b.n	8009388 <tcp_process+0x6b4>
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1ef      	bne.n	8009368 <tcp_process+0x694>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	60da      	str	r2, [r3, #12]
 800938e:	4b43      	ldr	r3, [pc, #268]	; (800949c <tcp_process+0x7c8>)
 8009390:	2201      	movs	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	220a      	movs	r2, #10
 8009398:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800939a:	4b41      	ldr	r3, [pc, #260]	; (80094a0 <tcp_process+0x7cc>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60da      	str	r2, [r3, #12]
 80093a2:	4a3f      	ldr	r2, [pc, #252]	; (80094a0 <tcp_process+0x7cc>)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	f002 fc92 	bl	800bcd0 <tcp_timer_needed>
      }
      break;
 80093ac:	e06c      	b.n	8009488 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f984 	bl	80096bc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80093b4:	4b3b      	ldr	r3, [pc, #236]	; (80094a4 <tcp_process+0x7d0>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	f003 0310 	and.w	r3, r3, #16
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d065      	beq.n	800948c <tcp_process+0x7b8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093c4:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <tcp_process+0x7d4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d15f      	bne.n	800948c <tcp_process+0x7b8>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d15b      	bne.n	800948c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7fe fcf1 	bl	8007dbc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80093da:	4b35      	ldr	r3, [pc, #212]	; (80094b0 <tcp_process+0x7dc>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d105      	bne.n	80093f0 <tcp_process+0x71c>
 80093e4:	4b32      	ldr	r3, [pc, #200]	; (80094b0 <tcp_process+0x7dc>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	4a31      	ldr	r2, [pc, #196]	; (80094b0 <tcp_process+0x7dc>)
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	e013      	b.n	8009418 <tcp_process+0x744>
 80093f0:	4b2f      	ldr	r3, [pc, #188]	; (80094b0 <tcp_process+0x7dc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e00c      	b.n	8009412 <tcp_process+0x73e>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d104      	bne.n	800940c <tcp_process+0x738>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	60da      	str	r2, [r3, #12]
 800940a:	e005      	b.n	8009418 <tcp_process+0x744>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1ef      	bne.n	80093f8 <tcp_process+0x724>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	60da      	str	r2, [r3, #12]
 800941e:	4b1f      	ldr	r3, [pc, #124]	; (800949c <tcp_process+0x7c8>)
 8009420:	2201      	movs	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	220a      	movs	r2, #10
 8009428:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800942a:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <tcp_process+0x7cc>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60da      	str	r2, [r3, #12]
 8009432:	4a1b      	ldr	r2, [pc, #108]	; (80094a0 <tcp_process+0x7cc>)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	f002 fc4a 	bl	800bcd0 <tcp_timer_needed>
      }
      break;
 800943c:	e026      	b.n	800948c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f93c 	bl	80096bc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009444:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <tcp_process+0x7d0>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01f      	beq.n	8009490 <tcp_process+0x7bc>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009454:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <tcp_process+0x7d4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d119      	bne.n	8009490 <tcp_process+0x7bc>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d115      	bne.n	8009490 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <tcp_process+0x7d8>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f043 0310 	orr.w	r3, r3, #16
 800946c:	b2da      	uxtb	r2, r3
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <tcp_process+0x7d8>)
 8009470:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009472:	e00d      	b.n	8009490 <tcp_process+0x7bc>
    default:
      break;
 8009474:	bf00      	nop
 8009476:	e00c      	b.n	8009492 <tcp_process+0x7be>
      break;
 8009478:	bf00      	nop
 800947a:	e00a      	b.n	8009492 <tcp_process+0x7be>
      break;
 800947c:	bf00      	nop
 800947e:	e008      	b.n	8009492 <tcp_process+0x7be>
      break;
 8009480:	bf00      	nop
 8009482:	e006      	b.n	8009492 <tcp_process+0x7be>
      break;
 8009484:	bf00      	nop
 8009486:	e004      	b.n	8009492 <tcp_process+0x7be>
      break;
 8009488:	bf00      	nop
 800948a:	e002      	b.n	8009492 <tcp_process+0x7be>
      break;
 800948c:	bf00      	nop
 800948e:	e000      	b.n	8009492 <tcp_process+0x7be>
      break;
 8009490:	bf00      	nop
  }
  return ERR_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3724      	adds	r7, #36	; 0x24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd90      	pop	{r4, r7, pc}
 800949c:	20008998 	.word	0x20008998
 80094a0:	20008994 	.word	0x20008994
 80094a4:	200089c8 	.word	0x200089c8
 80094a8:	200089c0 	.word	0x200089c0
 80094ac:	200089c9 	.word	0x200089c9
 80094b0:	20008990 	.word	0x20008990

080094b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d106      	bne.n	80094d2 <tcp_oos_insert_segment+0x1e>
 80094c4:	4b3b      	ldr	r3, [pc, #236]	; (80095b4 <tcp_oos_insert_segment+0x100>)
 80094c6:	f240 421f 	movw	r2, #1055	; 0x41f
 80094ca:	493b      	ldr	r1, [pc, #236]	; (80095b8 <tcp_oos_insert_segment+0x104>)
 80094cc:	483b      	ldr	r0, [pc, #236]	; (80095bc <tcp_oos_insert_segment+0x108>)
 80094ce:	f005 fe77 	bl	800f1c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	899b      	ldrh	r3, [r3, #12]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fb fcb8 	bl	8004e50 <lwip_htons>
 80094e0:	4603      	mov	r3, r0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d028      	beq.n	800953e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80094ec:	6838      	ldr	r0, [r7, #0]
 80094ee:	f7fe fa63 	bl	80079b8 <tcp_segs_free>
    next = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	603b      	str	r3, [r7, #0]
 80094f6:	e056      	b.n	80095a6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	899b      	ldrh	r3, [r3, #12]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	4618      	mov	r0, r3
 8009502:	f7fb fca5 	bl	8004e50 <lwip_htons>
 8009506:	4603      	mov	r3, r0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00d      	beq.n	800952e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	899b      	ldrh	r3, [r3, #12]
 8009518:	b29c      	uxth	r4, r3
 800951a:	2001      	movs	r0, #1
 800951c:	f7fb fc98 	bl	8004e50 <lwip_htons>
 8009520:	4603      	mov	r3, r0
 8009522:	461a      	mov	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	4322      	orrs	r2, r4
 800952a:	b292      	uxth	r2, r2
 800952c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7fe fa52 	bl	80079e2 <tcp_seg_free>
    while (next &&
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00e      	beq.n	8009562 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	461a      	mov	r2, r3
 800954a:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <tcp_oos_insert_segment+0x10c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	441a      	add	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	8909      	ldrh	r1, [r1, #8]
 800955a:	440b      	add	r3, r1
 800955c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800955e:	2b00      	cmp	r3, #0
 8009560:	daca      	bge.n	80094f8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01e      	beq.n	80095a6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	891b      	ldrh	r3, [r3, #8]
 800956c:	461a      	mov	r2, r3
 800956e:	4b14      	ldr	r3, [pc, #80]	; (80095c0 <tcp_oos_insert_segment+0x10c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	441a      	add	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd12      	ble.n	80095a6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	b29a      	uxth	r2, r3
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <tcp_oos_insert_segment+0x10c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	b29a      	uxth	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	891b      	ldrh	r3, [r3, #8]
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f7fc fd83 	bl	80060ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	601a      	str	r2, [r3, #0]
}
 80095ac:	bf00      	nop
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd90      	pop	{r4, r7, pc}
 80095b4:	0801182c 	.word	0x0801182c
 80095b8:	08011aec 	.word	0x08011aec
 80095bc:	08011878 	.word	0x08011878
 80095c0:	200089bc 	.word	0x200089bc

080095c4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80095c4:	b5b0      	push	{r4, r5, r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80095d2:	e03e      	b.n	8009652 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fc ff70 	bl	80064c8 <pbuf_clen>
 80095e8:	4603      	mov	r3, r0
 80095ea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095f2:	8a7a      	ldrh	r2, [r7, #18]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d906      	bls.n	8009606 <tcp_free_acked_segments+0x42>
 80095f8:	4b2a      	ldr	r3, [pc, #168]	; (80096a4 <tcp_free_acked_segments+0xe0>)
 80095fa:	f240 4257 	movw	r2, #1111	; 0x457
 80095fe:	492a      	ldr	r1, [pc, #168]	; (80096a8 <tcp_free_acked_segments+0xe4>)
 8009600:	482a      	ldr	r0, [pc, #168]	; (80096ac <tcp_free_acked_segments+0xe8>)
 8009602:	f005 fddd 	bl	800f1c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800960c:	8a7b      	ldrh	r3, [r7, #18]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	891a      	ldrh	r2, [r3, #8]
 800961c:	4b24      	ldr	r3, [pc, #144]	; (80096b0 <tcp_free_acked_segments+0xec>)
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	4413      	add	r3, r2
 8009622:	b29a      	uxth	r2, r3
 8009624:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <tcp_free_acked_segments+0xec>)
 8009626:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009628:	6978      	ldr	r0, [r7, #20]
 800962a:	f7fe f9da 	bl	80079e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00c      	beq.n	8009652 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <tcp_free_acked_segments+0x8e>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d106      	bne.n	8009652 <tcp_free_acked_segments+0x8e>
 8009644:	4b17      	ldr	r3, [pc, #92]	; (80096a4 <tcp_free_acked_segments+0xe0>)
 8009646:	f240 4261 	movw	r2, #1121	; 0x461
 800964a:	491a      	ldr	r1, [pc, #104]	; (80096b4 <tcp_free_acked_segments+0xf0>)
 800964c:	4817      	ldr	r0, [pc, #92]	; (80096ac <tcp_free_acked_segments+0xe8>)
 800964e:	f005 fdb7 	bl	800f1c0 <iprintf>
  while (seg_list != NULL &&
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d020      	beq.n	800969a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fb fc0b 	bl	8004e7a <lwip_htonl>
 8009664:	4604      	mov	r4, r0
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	891b      	ldrh	r3, [r3, #8]
 800966a:	461d      	mov	r5, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	899b      	ldrh	r3, [r3, #12]
 8009672:	b29b      	uxth	r3, r3
 8009674:	4618      	mov	r0, r3
 8009676:	f7fb fbeb 	bl	8004e50 <lwip_htons>
 800967a:	4603      	mov	r3, r0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <tcp_free_acked_segments+0xc6>
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <tcp_free_acked_segments+0xc8>
 800968a:	2300      	movs	r3, #0
 800968c:	442b      	add	r3, r5
 800968e:	18e2      	adds	r2, r4, r3
 8009690:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <tcp_free_acked_segments+0xf4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009696:	2b00      	cmp	r3, #0
 8009698:	dd9c      	ble.n	80095d4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800969a:	68bb      	ldr	r3, [r7, #8]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bdb0      	pop	{r4, r5, r7, pc}
 80096a4:	0801182c 	.word	0x0801182c
 80096a8:	08011b14 	.word	0x08011b14
 80096ac:	08011878 	.word	0x08011878
 80096b0:	200089c4 	.word	0x200089c4
 80096b4:	08011b3c 	.word	0x08011b3c
 80096b8:	200089c0 	.word	0x200089c0

080096bc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80096bc:	b5b0      	push	{r4, r5, r7, lr}
 80096be:	b094      	sub	sp, #80	; 0x50
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <tcp_receive+0x20>
 80096ce:	4b91      	ldr	r3, [pc, #580]	; (8009914 <tcp_receive+0x258>)
 80096d0:	f240 427b 	movw	r2, #1147	; 0x47b
 80096d4:	4990      	ldr	r1, [pc, #576]	; (8009918 <tcp_receive+0x25c>)
 80096d6:	4891      	ldr	r0, [pc, #580]	; (800991c <tcp_receive+0x260>)
 80096d8:	f005 fd72 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7d1b      	ldrb	r3, [r3, #20]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d806      	bhi.n	80096f2 <tcp_receive+0x36>
 80096e4:	4b8b      	ldr	r3, [pc, #556]	; (8009914 <tcp_receive+0x258>)
 80096e6:	f240 427c 	movw	r2, #1148	; 0x47c
 80096ea:	498d      	ldr	r1, [pc, #564]	; (8009920 <tcp_receive+0x264>)
 80096ec:	488b      	ldr	r0, [pc, #556]	; (800991c <tcp_receive+0x260>)
 80096ee:	f005 fd67 	bl	800f1c0 <iprintf>

  if (flags & TCP_ACK) {
 80096f2:	4b8c      	ldr	r3, [pc, #560]	; (8009924 <tcp_receive+0x268>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8264 	beq.w	8009bc8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800970c:	4413      	add	r3, r2
 800970e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009714:	4b84      	ldr	r3, [pc, #528]	; (8009928 <tcp_receive+0x26c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	db1b      	blt.n	8009756 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009722:	4b81      	ldr	r3, [pc, #516]	; (8009928 <tcp_receive+0x26c>)
 8009724:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009726:	429a      	cmp	r2, r3
 8009728:	d106      	bne.n	8009738 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800972e:	4b7f      	ldr	r3, [pc, #508]	; (800992c <tcp_receive+0x270>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	db0e      	blt.n	8009756 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800973c:	4b7b      	ldr	r3, [pc, #492]	; (800992c <tcp_receive+0x270>)
 800973e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009740:	429a      	cmp	r2, r3
 8009742:	d125      	bne.n	8009790 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009744:	4b7a      	ldr	r3, [pc, #488]	; (8009930 <tcp_receive+0x274>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	89db      	ldrh	r3, [r3, #14]
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009752:	429a      	cmp	r2, r3
 8009754:	d91c      	bls.n	8009790 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009756:	4b76      	ldr	r3, [pc, #472]	; (8009930 <tcp_receive+0x274>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	89db      	ldrh	r3, [r3, #14]
 800975c:	b29a      	uxth	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009770:	429a      	cmp	r2, r3
 8009772:	d205      	bcs.n	8009780 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009780:	4b69      	ldr	r3, [pc, #420]	; (8009928 <tcp_receive+0x26c>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009788:	4b68      	ldr	r3, [pc, #416]	; (800992c <tcp_receive+0x270>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009790:	4b66      	ldr	r3, [pc, #408]	; (800992c <tcp_receive+0x270>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc58      	bgt.n	8009850 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800979e:	4b65      	ldr	r3, [pc, #404]	; (8009934 <tcp_receive+0x278>)
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d14b      	bne.n	800983e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80097b0:	4413      	add	r3, r2
 80097b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d142      	bne.n	800983e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80097be:	2b00      	cmp	r3, #0
 80097c0:	db3d      	blt.n	800983e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097c6:	4b59      	ldr	r3, [pc, #356]	; (800992c <tcp_receive+0x270>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d137      	bne.n	800983e <tcp_receive+0x182>
              found_dupack = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097d8:	2bff      	cmp	r3, #255	; 0xff
 80097da:	d007      	beq.n	80097ec <tcp_receive+0x130>
                ++pcb->dupacks;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097e2:	3301      	adds	r3, #1
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d91b      	bls.n	800982e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009800:	4413      	add	r3, r2
 8009802:	b29a      	uxth	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800980a:	429a      	cmp	r2, r3
 800980c:	d30a      	bcc.n	8009824 <tcp_receive+0x168>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009818:	4413      	add	r3, r2
 800981a:	b29a      	uxth	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009822:	e004      	b.n	800982e <tcp_receive+0x172>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800982a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009834:	2b02      	cmp	r3, #2
 8009836:	d902      	bls.n	800983e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 feeb 	bl	800b614 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800983e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8161 	bne.w	8009b08 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800984e:	e15b      	b.n	8009b08 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009850:	4b36      	ldr	r3, [pc, #216]	; (800992c <tcp_receive+0x270>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	f2c0 814e 	blt.w	8009afe <tcp_receive+0x442>
 8009862:	4b32      	ldr	r3, [pc, #200]	; (800992c <tcp_receive+0x270>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	f300 8146 	bgt.w	8009afe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	8b5b      	ldrh	r3, [r3, #26]
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d010      	beq.n	80098a0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8b5b      	ldrh	r3, [r3, #26]
 8009882:	f023 0304 	bic.w	r3, r3, #4
 8009886:	b29a      	uxth	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098ae:	10db      	asrs	r3, r3, #3
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	4413      	add	r3, r2
 80098be:	b29b      	uxth	r3, r3
 80098c0:	b21a      	sxth	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80098c8:	4b18      	ldr	r3, [pc, #96]	; (800992c <tcp_receive+0x270>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80098e0:	4b12      	ldr	r3, [pc, #72]	; (800992c <tcp_receive+0x270>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7d1b      	ldrb	r3, [r3, #20]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	f240 8097 	bls.w	8009a20 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80098fe:	429a      	cmp	r2, r3
 8009900:	d245      	bcs.n	800998e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8b5b      	ldrh	r3, [r3, #26]
 8009906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800990a:	2b00      	cmp	r3, #0
 800990c:	d014      	beq.n	8009938 <tcp_receive+0x27c>
 800990e:	2301      	movs	r3, #1
 8009910:	e013      	b.n	800993a <tcp_receive+0x27e>
 8009912:	bf00      	nop
 8009914:	0801182c 	.word	0x0801182c
 8009918:	08011b5c 	.word	0x08011b5c
 800991c:	08011878 	.word	0x08011878
 8009920:	08011b78 	.word	0x08011b78
 8009924:	200089c8 	.word	0x200089c8
 8009928:	200089bc 	.word	0x200089bc
 800992c:	200089c0 	.word	0x200089c0
 8009930:	200089ac 	.word	0x200089ac
 8009934:	200089c6 	.word	0x200089c6
 8009938:	2302      	movs	r3, #2
 800993a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800993e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009948:	fb12 f303 	smulbb	r3, r2, r3
 800994c:	b29b      	uxth	r3, r3
 800994e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009950:	4293      	cmp	r3, r2
 8009952:	bf28      	it	cs
 8009954:	4613      	movcs	r3, r2
 8009956:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800995e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009960:	4413      	add	r3, r2
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800996a:	429a      	cmp	r2, r3
 800996c:	d309      	bcc.n	8009982 <tcp_receive+0x2c6>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009976:	4413      	add	r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009980:	e04e      	b.n	8009a20 <tcp_receive+0x364>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009988:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800998c:	e048      	b.n	8009a20 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009996:	4413      	add	r3, r2
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d309      	bcc.n	80099b8 <tcp_receive+0x2fc>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099ac:	4413      	add	r3, r2
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099b6:	e004      	b.n	80099c2 <tcp_receive+0x306>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d326      	bcc.n	8009a20 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099f2:	4413      	add	r3, r2
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d30a      	bcc.n	8009a16 <tcp_receive+0x35a>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a0a:	4413      	add	r3, r2
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a14:	e004      	b.n	8009a20 <tcp_receive+0x364>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a28:	4a98      	ldr	r2, [pc, #608]	; (8009c8c <tcp_receive+0x5d0>)
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fdca 	bl	80095c4 <tcp_free_acked_segments>
 8009a30:	4602      	mov	r2, r0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3e:	4a94      	ldr	r2, [pc, #592]	; (8009c90 <tcp_receive+0x5d4>)
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7ff fdbf 	bl	80095c4 <tcp_free_acked_segments>
 8009a46:	4602      	mov	r2, r0
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a5a:	861a      	strh	r2, [r3, #48]	; 0x30
 8009a5c:	e002      	b.n	8009a64 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009a80:	4b84      	ldr	r3, [pc, #528]	; (8009c94 <tcp_receive+0x5d8>)
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	4413      	add	r3, r2
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	8b5b      	ldrh	r3, [r3, #26]
 8009a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d035      	beq.n	8009b06 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d118      	bne.n	8009ad4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00c      	beq.n	8009ac4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fb f9df 	bl	8004e7a <lwip_htonl>
 8009abc:	4603      	mov	r3, r0
 8009abe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dc20      	bgt.n	8009b06 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8b5b      	ldrh	r3, [r3, #26]
 8009ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ad2:	e018      	b.n	8009b06 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fb f9ca 	bl	8004e7a <lwip_htonl>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	1ae3      	subs	r3, r4, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dc0b      	bgt.n	8009b06 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	8b5b      	ldrh	r3, [r3, #26]
 8009af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009afc:	e003      	b.n	8009b06 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 ff76 	bl	800b9f0 <tcp_send_empty_ack>
 8009b04:	e000      	b.n	8009b08 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b06:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d05b      	beq.n	8009bc8 <tcp_receive+0x50c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b14:	4b60      	ldr	r3, [pc, #384]	; (8009c98 <tcp_receive+0x5dc>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da54      	bge.n	8009bc8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009b1e:	4b5f      	ldr	r3, [pc, #380]	; (8009c9c <tcp_receive+0x5e0>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009b32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b3c:	10db      	asrs	r3, r3, #3
 8009b3e:	b21b      	sxth	r3, r3
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b56:	4413      	add	r3, r2
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	b21a      	sxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009b60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	da05      	bge.n	8009b74 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b6c:	425b      	negs	r3, r3
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009b74:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b7e:	109b      	asrs	r3, r3, #2
 8009b80:	b21b      	sxth	r3, r3
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b98:	4413      	add	r3, r2
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	b21a      	sxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ba8:	10db      	asrs	r3, r3, #3
 8009baa:	b21b      	sxth	r3, r3
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	b21a      	sxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009bc8:	4b35      	ldr	r3, [pc, #212]	; (8009ca0 <tcp_receive+0x5e4>)
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 84e2 	beq.w	800a596 <tcp_receive+0xeda>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7d1b      	ldrb	r3, [r3, #20]
 8009bd6:	2b06      	cmp	r3, #6
 8009bd8:	f200 84dd 	bhi.w	800a596 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be0:	4b30      	ldr	r3, [pc, #192]	; (8009ca4 <tcp_receive+0x5e8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	3b01      	subs	r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f2c0 808f 	blt.w	8009d0c <tcp_receive+0x650>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bf2:	4b2b      	ldr	r3, [pc, #172]	; (8009ca0 <tcp_receive+0x5e4>)
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4b2a      	ldr	r3, [pc, #168]	; (8009ca4 <tcp_receive+0x5e8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	440b      	add	r3, r1
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	3301      	adds	r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f300 8082 	bgt.w	8009d0c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009c08:	4b27      	ldr	r3, [pc, #156]	; (8009ca8 <tcp_receive+0x5ec>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c12:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <tcp_receive+0x5e8>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009c1a:	4b23      	ldr	r3, [pc, #140]	; (8009ca8 <tcp_receive+0x5ec>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d106      	bne.n	8009c30 <tcp_receive+0x574>
 8009c22:	4b22      	ldr	r3, [pc, #136]	; (8009cac <tcp_receive+0x5f0>)
 8009c24:	f240 5294 	movw	r2, #1428	; 0x594
 8009c28:	4921      	ldr	r1, [pc, #132]	; (8009cb0 <tcp_receive+0x5f4>)
 8009c2a:	4822      	ldr	r0, [pc, #136]	; (8009cb4 <tcp_receive+0x5f8>)
 8009c2c:	f005 fac8 	bl	800f1c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d906      	bls.n	8009c48 <tcp_receive+0x58c>
 8009c3a:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <tcp_receive+0x5f0>)
 8009c3c:	f240 5295 	movw	r2, #1429	; 0x595
 8009c40:	491d      	ldr	r1, [pc, #116]	; (8009cb8 <tcp_receive+0x5fc>)
 8009c42:	481c      	ldr	r0, [pc, #112]	; (8009cb4 <tcp_receive+0x5f8>)
 8009c44:	f005 fabc 	bl	800f1c0 <iprintf>
      off = (u16_t)off32;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009c4e:	4b16      	ldr	r3, [pc, #88]	; (8009ca8 <tcp_receive+0x5ec>)
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	891b      	ldrh	r3, [r3, #8]
 8009c54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d906      	bls.n	8009c6a <tcp_receive+0x5ae>
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <tcp_receive+0x5f0>)
 8009c5e:	f240 5297 	movw	r2, #1431	; 0x597
 8009c62:	4916      	ldr	r1, [pc, #88]	; (8009cbc <tcp_receive+0x600>)
 8009c64:	4813      	ldr	r0, [pc, #76]	; (8009cb4 <tcp_receive+0x5f8>)
 8009c66:	f005 faab 	bl	800f1c0 <iprintf>
      inseg.len -= off;
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ca8 <tcp_receive+0x5ec>)
 8009c6c:	891a      	ldrh	r2, [r3, #8]
 8009c6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <tcp_receive+0x5ec>)
 8009c78:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <tcp_receive+0x5ec>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	891a      	ldrh	r2, [r3, #8]
 8009c80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009c88:	e02a      	b.n	8009ce0 <tcp_receive+0x624>
 8009c8a:	bf00      	nop
 8009c8c:	08011b94 	.word	0x08011b94
 8009c90:	08011b9c 	.word	0x08011b9c
 8009c94:	200089c4 	.word	0x200089c4
 8009c98:	200089c0 	.word	0x200089c0
 8009c9c:	20008984 	.word	0x20008984
 8009ca0:	200089c6 	.word	0x200089c6
 8009ca4:	200089bc 	.word	0x200089bc
 8009ca8:	2000899c 	.word	0x2000899c
 8009cac:	0801182c 	.word	0x0801182c
 8009cb0:	08011ba4 	.word	0x08011ba4
 8009cb4:	08011878 	.word	0x08011878
 8009cb8:	08011bb4 	.word	0x08011bb4
 8009cbc:	08011bc4 	.word	0x08011bc4
        off -= p->len;
 8009cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cc2:	895b      	ldrh	r3, [r3, #10]
 8009cc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009cd2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ce2:	895b      	ldrh	r3, [r3, #10]
 8009ce4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d8e9      	bhi.n	8009cc0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009cec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009cf4:	f7fc fada 	bl	80062ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	4a91      	ldr	r2, [pc, #580]	; (8009f44 <tcp_receive+0x888>)
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	4b91      	ldr	r3, [pc, #580]	; (8009f48 <tcp_receive+0x88c>)
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	4a8f      	ldr	r2, [pc, #572]	; (8009f44 <tcp_receive+0x888>)
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d0a:	e00d      	b.n	8009d28 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009d0c:	4b8d      	ldr	r3, [pc, #564]	; (8009f44 <tcp_receive+0x888>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da06      	bge.n	8009d28 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	8b5b      	ldrh	r3, [r3, #26]
 8009d1e:	f043 0302 	orr.w	r3, r3, #2
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009d28:	4b86      	ldr	r3, [pc, #536]	; (8009f44 <tcp_receive+0x888>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f2c0 842a 	blt.w	800a58c <tcp_receive+0xed0>
 8009d38:	4b82      	ldr	r3, [pc, #520]	; (8009f44 <tcp_receive+0x888>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d44:	440b      	add	r3, r1
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	3301      	adds	r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f300 841e 	bgt.w	800a58c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d54:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <tcp_receive+0x888>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	f040 829a 	bne.w	800a292 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009d5e:	4b7a      	ldr	r3, [pc, #488]	; (8009f48 <tcp_receive+0x88c>)
 8009d60:	891c      	ldrh	r4, [r3, #8]
 8009d62:	4b79      	ldr	r3, [pc, #484]	; (8009f48 <tcp_receive+0x88c>)
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	899b      	ldrh	r3, [r3, #12]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fb f870 	bl	8004e50 <lwip_htons>
 8009d70:	4603      	mov	r3, r0
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <tcp_receive+0x6c4>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <tcp_receive+0x6c6>
 8009d80:	2300      	movs	r3, #0
 8009d82:	4423      	add	r3, r4
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	4b71      	ldr	r3, [pc, #452]	; (8009f4c <tcp_receive+0x890>)
 8009d88:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d8e:	4b6f      	ldr	r3, [pc, #444]	; (8009f4c <tcp_receive+0x890>)
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d275      	bcs.n	8009e82 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d96:	4b6c      	ldr	r3, [pc, #432]	; (8009f48 <tcp_receive+0x88c>)
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	899b      	ldrh	r3, [r3, #12]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fb f856 	bl	8004e50 <lwip_htons>
 8009da4:	4603      	mov	r3, r0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01f      	beq.n	8009df0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009db0:	4b65      	ldr	r3, [pc, #404]	; (8009f48 <tcp_receive+0x88c>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	899b      	ldrh	r3, [r3, #12]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dbe:	b21c      	sxth	r4, r3
 8009dc0:	4b61      	ldr	r3, [pc, #388]	; (8009f48 <tcp_receive+0x88c>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	899b      	ldrh	r3, [r3, #12]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fb f841 	bl	8004e50 <lwip_htons>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fb f838 	bl	8004e50 <lwip_htons>
 8009de0:	4603      	mov	r3, r0
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	4323      	orrs	r3, r4
 8009de6:	b21a      	sxth	r2, r3
 8009de8:	4b57      	ldr	r3, [pc, #348]	; (8009f48 <tcp_receive+0x88c>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	b292      	uxth	r2, r2
 8009dee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009df4:	4b54      	ldr	r3, [pc, #336]	; (8009f48 <tcp_receive+0x88c>)
 8009df6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009df8:	4b53      	ldr	r3, [pc, #332]	; (8009f48 <tcp_receive+0x88c>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	899b      	ldrh	r3, [r3, #12]
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fb f825 	bl	8004e50 <lwip_htons>
 8009e06:	4603      	mov	r3, r0
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <tcp_receive+0x762>
            inseg.len -= 1;
 8009e12:	4b4d      	ldr	r3, [pc, #308]	; (8009f48 <tcp_receive+0x88c>)
 8009e14:	891b      	ldrh	r3, [r3, #8]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	4b4b      	ldr	r3, [pc, #300]	; (8009f48 <tcp_receive+0x88c>)
 8009e1c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009e1e:	4b4a      	ldr	r3, [pc, #296]	; (8009f48 <tcp_receive+0x88c>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	4a49      	ldr	r2, [pc, #292]	; (8009f48 <tcp_receive+0x88c>)
 8009e24:	8912      	ldrh	r2, [r2, #8]
 8009e26:	4611      	mov	r1, r2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fc f93f 	bl	80060ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009e2e:	4b46      	ldr	r3, [pc, #280]	; (8009f48 <tcp_receive+0x88c>)
 8009e30:	891c      	ldrh	r4, [r3, #8]
 8009e32:	4b45      	ldr	r3, [pc, #276]	; (8009f48 <tcp_receive+0x88c>)
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	899b      	ldrh	r3, [r3, #12]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fb f808 	bl	8004e50 <lwip_htons>
 8009e40:	4603      	mov	r3, r0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 0303 	and.w	r3, r3, #3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <tcp_receive+0x794>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <tcp_receive+0x796>
 8009e50:	2300      	movs	r3, #0
 8009e52:	4423      	add	r3, r4
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	4b3d      	ldr	r3, [pc, #244]	; (8009f4c <tcp_receive+0x890>)
 8009e58:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e5a:	4b3c      	ldr	r3, [pc, #240]	; (8009f4c <tcp_receive+0x890>)
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <tcp_receive+0x888>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	441a      	add	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e6e:	440b      	add	r3, r1
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d006      	beq.n	8009e82 <tcp_receive+0x7c6>
 8009e74:	4b36      	ldr	r3, [pc, #216]	; (8009f50 <tcp_receive+0x894>)
 8009e76:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009e7a:	4936      	ldr	r1, [pc, #216]	; (8009f54 <tcp_receive+0x898>)
 8009e7c:	4836      	ldr	r0, [pc, #216]	; (8009f58 <tcp_receive+0x89c>)
 8009e7e:	f005 f99f 	bl	800f1c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80e7 	beq.w	800a05a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e8c:	4b2e      	ldr	r3, [pc, #184]	; (8009f48 <tcp_receive+0x88c>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	899b      	ldrh	r3, [r3, #12]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fa ffdb 	bl	8004e50 <lwip_htons>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d010      	beq.n	8009ec8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ea6:	e00a      	b.n	8009ebe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7fd fd92 	bl	80079e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1f0      	bne.n	8009ea8 <tcp_receive+0x7ec>
 8009ec6:	e0c8      	b.n	800a05a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009ece:	e052      	b.n	8009f76 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	899b      	ldrh	r3, [r3, #12]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fa ffb9 	bl	8004e50 <lwip_htons>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d03d      	beq.n	8009f66 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009eea:	4b17      	ldr	r3, [pc, #92]	; (8009f48 <tcp_receive+0x88c>)
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	899b      	ldrh	r3, [r3, #12]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fa ffac 	bl	8004e50 <lwip_htons>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d130      	bne.n	8009f66 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009f04:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <tcp_receive+0x88c>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	899b      	ldrh	r3, [r3, #12]
 8009f0a:	b29c      	uxth	r4, r3
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	f7fa ff9f 	bl	8004e50 <lwip_htons>
 8009f12:	4603      	mov	r3, r0
 8009f14:	461a      	mov	r2, r3
 8009f16:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <tcp_receive+0x88c>)
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	4322      	orrs	r2, r4
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <tcp_receive+0x88c>)
 8009f22:	891c      	ldrh	r4, [r3, #8]
 8009f24:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <tcp_receive+0x88c>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	899b      	ldrh	r3, [r3, #12]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fa ff8f 	bl	8004e50 <lwip_htons>
 8009f32:	4603      	mov	r3, r0
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00e      	beq.n	8009f5c <tcp_receive+0x8a0>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e00d      	b.n	8009f5e <tcp_receive+0x8a2>
 8009f42:	bf00      	nop
 8009f44:	200089bc 	.word	0x200089bc
 8009f48:	2000899c 	.word	0x2000899c
 8009f4c:	200089c6 	.word	0x200089c6
 8009f50:	0801182c 	.word	0x0801182c
 8009f54:	08011bd4 	.word	0x08011bd4
 8009f58:	08011878 	.word	0x08011878
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4423      	add	r3, r4
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	4b98      	ldr	r3, [pc, #608]	; (800a1c4 <tcp_receive+0xb08>)
 8009f64:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f68:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009f70:	6938      	ldr	r0, [r7, #16]
 8009f72:	f7fd fd36 	bl	80079e2 <tcp_seg_free>
            while (next &&
 8009f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00e      	beq.n	8009f9a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f7c:	4b91      	ldr	r3, [pc, #580]	; (800a1c4 <tcp_receive+0xb08>)
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b91      	ldr	r3, [pc, #580]	; (800a1c8 <tcp_receive+0xb0c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	441a      	add	r2, r3
 8009f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f90:	8909      	ldrh	r1, [r1, #8]
 8009f92:	440b      	add	r3, r1
 8009f94:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	da9a      	bge.n	8009ed0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d059      	beq.n	800a054 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009fa0:	4b88      	ldr	r3, [pc, #544]	; (800a1c4 <tcp_receive+0xb08>)
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	4b88      	ldr	r3, [pc, #544]	; (800a1c8 <tcp_receive+0xb0c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	441a      	add	r2, r3
 8009fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dd4d      	ble.n	800a054 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	4b81      	ldr	r3, [pc, #516]	; (800a1c8 <tcp_receive+0xb0c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b80      	ldr	r3, [pc, #512]	; (800a1cc <tcp_receive+0xb10>)
 8009fcc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fce:	4b7f      	ldr	r3, [pc, #508]	; (800a1cc <tcp_receive+0xb10>)
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	899b      	ldrh	r3, [r3, #12]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fa ff3a 	bl	8004e50 <lwip_htons>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <tcp_receive+0x938>
                inseg.len -= 1;
 8009fe8:	4b78      	ldr	r3, [pc, #480]	; (800a1cc <tcp_receive+0xb10>)
 8009fea:	891b      	ldrh	r3, [r3, #8]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	4b76      	ldr	r3, [pc, #472]	; (800a1cc <tcp_receive+0xb10>)
 8009ff2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009ff4:	4b75      	ldr	r3, [pc, #468]	; (800a1cc <tcp_receive+0xb10>)
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4a74      	ldr	r2, [pc, #464]	; (800a1cc <tcp_receive+0xb10>)
 8009ffa:	8912      	ldrh	r2, [r2, #8]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fc f854 	bl	80060ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a004:	4b71      	ldr	r3, [pc, #452]	; (800a1cc <tcp_receive+0xb10>)
 800a006:	891c      	ldrh	r4, [r3, #8]
 800a008:	4b70      	ldr	r3, [pc, #448]	; (800a1cc <tcp_receive+0xb10>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	899b      	ldrh	r3, [r3, #12]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	4618      	mov	r0, r3
 800a012:	f7fa ff1d 	bl	8004e50 <lwip_htons>
 800a016:	4603      	mov	r3, r0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <tcp_receive+0x96a>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <tcp_receive+0x96c>
 800a026:	2300      	movs	r3, #0
 800a028:	4423      	add	r3, r4
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	4b65      	ldr	r3, [pc, #404]	; (800a1c4 <tcp_receive+0xb08>)
 800a02e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a030:	4b64      	ldr	r3, [pc, #400]	; (800a1c4 <tcp_receive+0xb08>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	4b64      	ldr	r3, [pc, #400]	; (800a1c8 <tcp_receive+0xb0c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	441a      	add	r2, r3
 800a03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d006      	beq.n	800a054 <tcp_receive+0x998>
 800a046:	4b62      	ldr	r3, [pc, #392]	; (800a1d0 <tcp_receive+0xb14>)
 800a048:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a04c:	4961      	ldr	r1, [pc, #388]	; (800a1d4 <tcp_receive+0xb18>)
 800a04e:	4862      	ldr	r0, [pc, #392]	; (800a1d8 <tcp_receive+0xb1c>)
 800a050:	f005 f8b6 	bl	800f1c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a058:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a05a:	4b5a      	ldr	r3, [pc, #360]	; (800a1c4 <tcp_receive+0xb08>)
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	4b59      	ldr	r3, [pc, #356]	; (800a1c8 <tcp_receive+0xb0c>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a06e:	4b55      	ldr	r3, [pc, #340]	; (800a1c4 <tcp_receive+0xb08>)
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d206      	bcs.n	800a084 <tcp_receive+0x9c8>
 800a076:	4b56      	ldr	r3, [pc, #344]	; (800a1d0 <tcp_receive+0xb14>)
 800a078:	f240 6207 	movw	r2, #1543	; 0x607
 800a07c:	4957      	ldr	r1, [pc, #348]	; (800a1dc <tcp_receive+0xb20>)
 800a07e:	4856      	ldr	r0, [pc, #344]	; (800a1d8 <tcp_receive+0xb1c>)
 800a080:	f005 f89e 	bl	800f1c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a088:	4b4e      	ldr	r3, [pc, #312]	; (800a1c4 <tcp_receive+0xb08>)
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	b29a      	uxth	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7fc ffc5 	bl	8007024 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a09a:	4b4c      	ldr	r3, [pc, #304]	; (800a1cc <tcp_receive+0xb10>)
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	891b      	ldrh	r3, [r3, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d006      	beq.n	800a0b2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a0a4:	4b49      	ldr	r3, [pc, #292]	; (800a1cc <tcp_receive+0xb10>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	4a4d      	ldr	r2, [pc, #308]	; (800a1e0 <tcp_receive+0xb24>)
 800a0aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a0ac:	4b47      	ldr	r3, [pc, #284]	; (800a1cc <tcp_receive+0xb10>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0b2:	4b46      	ldr	r3, [pc, #280]	; (800a1cc <tcp_receive+0xb10>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	899b      	ldrh	r3, [r3, #12]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fa fec8 	bl	8004e50 <lwip_htons>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 80b8 	beq.w	800a23e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a0ce:	4b45      	ldr	r3, [pc, #276]	; (800a1e4 <tcp_receive+0xb28>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	f043 0320 	orr.w	r3, r3, #32
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	4b42      	ldr	r3, [pc, #264]	; (800a1e4 <tcp_receive+0xb28>)
 800a0da:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a0dc:	e0af      	b.n	800a23e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	4a36      	ldr	r2, [pc, #216]	; (800a1c8 <tcp_receive+0xb0c>)
 800a0ee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	891b      	ldrh	r3, [r3, #8]
 800a0f4:	461c      	mov	r4, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	899b      	ldrh	r3, [r3, #12]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fa fea6 	bl	8004e50 <lwip_htons>
 800a104:	4603      	mov	r3, r0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <tcp_receive+0xa58>
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <tcp_receive+0xa5a>
 800a114:	2300      	movs	r3, #0
 800a116:	191a      	adds	r2, r3, r4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	441a      	add	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a126:	461c      	mov	r4, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	891b      	ldrh	r3, [r3, #8]
 800a12c:	461d      	mov	r5, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	899b      	ldrh	r3, [r3, #12]
 800a134:	b29b      	uxth	r3, r3
 800a136:	4618      	mov	r0, r3
 800a138:	f7fa fe8a 	bl	8004e50 <lwip_htons>
 800a13c:	4603      	mov	r3, r0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	f003 0303 	and.w	r3, r3, #3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <tcp_receive+0xa90>
 800a148:	2301      	movs	r3, #1
 800a14a:	e000      	b.n	800a14e <tcp_receive+0xa92>
 800a14c:	2300      	movs	r3, #0
 800a14e:	442b      	add	r3, r5
 800a150:	429c      	cmp	r4, r3
 800a152:	d206      	bcs.n	800a162 <tcp_receive+0xaa6>
 800a154:	4b1e      	ldr	r3, [pc, #120]	; (800a1d0 <tcp_receive+0xb14>)
 800a156:	f240 622b 	movw	r2, #1579	; 0x62b
 800a15a:	4923      	ldr	r1, [pc, #140]	; (800a1e8 <tcp_receive+0xb2c>)
 800a15c:	481e      	ldr	r0, [pc, #120]	; (800a1d8 <tcp_receive+0xb1c>)
 800a15e:	f005 f82f 	bl	800f1c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	891b      	ldrh	r3, [r3, #8]
 800a166:	461c      	mov	r4, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	899b      	ldrh	r3, [r3, #12]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	4618      	mov	r0, r3
 800a172:	f7fa fe6d 	bl	8004e50 <lwip_htons>
 800a176:	4603      	mov	r3, r0
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <tcp_receive+0xaca>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <tcp_receive+0xacc>
 800a186:	2300      	movs	r3, #0
 800a188:	1919      	adds	r1, r3, r4
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a18e:	b28b      	uxth	r3, r1
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7fc ff43 	bl	8007024 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	891b      	ldrh	r3, [r3, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d028      	beq.n	800a1fa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <tcp_receive+0xb24>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01d      	beq.n	800a1ec <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <tcp_receive+0xb24>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f7fc f9be 	bl	800653c <pbuf_cat>
 800a1c0:	e018      	b.n	800a1f4 <tcp_receive+0xb38>
 800a1c2:	bf00      	nop
 800a1c4:	200089c6 	.word	0x200089c6
 800a1c8:	200089bc 	.word	0x200089bc
 800a1cc:	2000899c 	.word	0x2000899c
 800a1d0:	0801182c 	.word	0x0801182c
 800a1d4:	08011c0c 	.word	0x08011c0c
 800a1d8:	08011878 	.word	0x08011878
 800a1dc:	08011c48 	.word	0x08011c48
 800a1e0:	200089cc 	.word	0x200089cc
 800a1e4:	200089c9 	.word	0x200089c9
 800a1e8:	08011c68 	.word	0x08011c68
            } else {
              recv_data = cseg->p;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	4a70      	ldr	r2, [pc, #448]	; (800a3b4 <tcp_receive+0xcf8>)
 800a1f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	899b      	ldrh	r3, [r3, #12]
 800a200:	b29b      	uxth	r3, r3
 800a202:	4618      	mov	r0, r3
 800a204:	f7fa fe24 	bl	8004e50 <lwip_htons>
 800a208:	4603      	mov	r3, r0
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00d      	beq.n	800a230 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a214:	4b68      	ldr	r3, [pc, #416]	; (800a3b8 <tcp_receive+0xcfc>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	f043 0320 	orr.w	r3, r3, #32
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	4b66      	ldr	r3, [pc, #408]	; (800a3b8 <tcp_receive+0xcfc>)
 800a220:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	7d1b      	ldrb	r3, [r3, #20]
 800a226:	2b04      	cmp	r3, #4
 800a228:	d102      	bne.n	800a230 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2207      	movs	r2, #7
 800a22e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a238:	68b8      	ldr	r0, [r7, #8]
 800a23a:	f7fd fbd2 	bl	80079e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a242:	2b00      	cmp	r3, #0
 800a244:	d008      	beq.n	800a258 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a252:	429a      	cmp	r2, r3
 800a254:	f43f af43 	beq.w	800a0de <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	8b5b      	ldrh	r3, [r3, #26]
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00e      	beq.n	800a282 <tcp_receive+0xbc6>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	8b5b      	ldrh	r3, [r3, #26]
 800a268:	f023 0301 	bic.w	r3, r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	835a      	strh	r2, [r3, #26]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	8b5b      	ldrh	r3, [r3, #26]
 800a276:	f043 0302 	orr.w	r3, r3, #2
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a280:	e188      	b.n	800a594 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	8b5b      	ldrh	r3, [r3, #26]
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a290:	e180      	b.n	800a594 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a296:	2b00      	cmp	r3, #0
 800a298:	d106      	bne.n	800a2a8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a29a:	4848      	ldr	r0, [pc, #288]	; (800a3bc <tcp_receive+0xd00>)
 800a29c:	f7fd fbba 	bl	8007a14 <tcp_seg_copy>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	675a      	str	r2, [r3, #116]	; 0x74
 800a2a6:	e16d      	b.n	800a584 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2b2:	e157      	b.n	800a564 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	4b41      	ldr	r3, [pc, #260]	; (800a3c0 <tcp_receive+0xd04>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d11d      	bne.n	800a2fe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a2c2:	4b3e      	ldr	r3, [pc, #248]	; (800a3bc <tcp_receive+0xd00>)
 800a2c4:	891a      	ldrh	r2, [r3, #8]
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	891b      	ldrh	r3, [r3, #8]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	f240 814f 	bls.w	800a56e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a2d0:	483a      	ldr	r0, [pc, #232]	; (800a3bc <tcp_receive+0xd00>)
 800a2d2:	f7fd fb9f 	bl	8007a14 <tcp_seg_copy>
 800a2d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 8149 	beq.w	800a572 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <tcp_receive+0xc32>
                    prev->next = cseg;
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	e002      	b.n	800a2f4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a2f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f7ff f8dc 	bl	80094b4 <tcp_oos_insert_segment>
                }
                break;
 800a2fc:	e139      	b.n	800a572 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a300:	2b00      	cmp	r3, #0
 800a302:	d117      	bne.n	800a334 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a304:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <tcp_receive+0xd04>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	da57      	bge.n	800a3c4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a314:	4829      	ldr	r0, [pc, #164]	; (800a3bc <tcp_receive+0xd00>)
 800a316:	f7fd fb7d 	bl	8007a14 <tcp_seg_copy>
 800a31a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 8129 	beq.w	800a576 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a32a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a32c:	69b8      	ldr	r0, [r7, #24]
 800a32e:	f7ff f8c1 	bl	80094b4 <tcp_oos_insert_segment>
                  }
                  break;
 800a332:	e120      	b.n	800a576 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a334:	4b22      	ldr	r3, [pc, #136]	; (800a3c0 <tcp_receive+0xd04>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	3b01      	subs	r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	db3e      	blt.n	800a3c4 <tcp_receive+0xd08>
 800a346:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <tcp_receive+0xd04>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	3301      	adds	r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	dc35      	bgt.n	800a3c4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a358:	4818      	ldr	r0, [pc, #96]	; (800a3bc <tcp_receive+0xd00>)
 800a35a:	f7fd fb5b 	bl	8007a14 <tcp_seg_copy>
 800a35e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8109 	beq.w	800a57a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a370:	8912      	ldrh	r2, [r2, #8]
 800a372:	441a      	add	r2, r3
 800a374:	4b12      	ldr	r3, [pc, #72]	; (800a3c0 <tcp_receive+0xd04>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dd12      	ble.n	800a3a4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <tcp_receive+0xd04>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	b29a      	uxth	r2, r3
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	b29a      	uxth	r2, r3
 800a390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a392:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	891b      	ldrh	r3, [r3, #8]
 800a39c:	4619      	mov	r1, r3
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f7fb fe84 	bl	80060ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a3aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3ac:	69f8      	ldr	r0, [r7, #28]
 800a3ae:	f7ff f881 	bl	80094b4 <tcp_oos_insert_segment>
                  }
                  break;
 800a3b2:	e0e2      	b.n	800a57a <tcp_receive+0xebe>
 800a3b4:	200089cc 	.word	0x200089cc
 800a3b8:	200089c9 	.word	0x200089c9
 800a3bc:	2000899c 	.word	0x2000899c
 800a3c0:	200089bc 	.word	0x200089bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 80c6 	bne.w	800a55e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a3d2:	4b80      	ldr	r3, [pc, #512]	; (800a5d4 <tcp_receive+0xf18>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f340 80bd 	ble.w	800a55e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	899b      	ldrh	r3, [r3, #12]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fa fd2f 	bl	8004e50 <lwip_htons>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f040 80bf 	bne.w	800a57e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a400:	4875      	ldr	r0, [pc, #468]	; (800a5d8 <tcp_receive+0xf1c>)
 800a402:	f7fd fb07 	bl	8007a14 <tcp_seg_copy>
 800a406:	4602      	mov	r2, r0
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80b6 	beq.w	800a582 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a41e:	8912      	ldrh	r2, [r2, #8]
 800a420:	441a      	add	r2, r3
 800a422:	4b6c      	ldr	r3, [pc, #432]	; (800a5d4 <tcp_receive+0xf18>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dd12      	ble.n	800a452 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a42c:	4b69      	ldr	r3, [pc, #420]	; (800a5d4 <tcp_receive+0xf18>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	b29a      	uxth	r2, r3
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	891b      	ldrh	r3, [r3, #8]
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7fb fe2d 	bl	80060ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a452:	4b62      	ldr	r3, [pc, #392]	; (800a5dc <tcp_receive+0xf20>)
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	4b5e      	ldr	r3, [pc, #376]	; (800a5d4 <tcp_receive+0xf18>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	441a      	add	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a466:	440b      	add	r3, r1
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f340 8089 	ble.w	800a582 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	899b      	ldrh	r3, [r3, #12]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fa fce8 	bl	8004e50 <lwip_htons>
 800a480:	4603      	mov	r3, r0
 800a482:	b2db      	uxtb	r3, r3
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d022      	beq.n	800a4d2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	899b      	ldrh	r3, [r3, #12]
 800a494:	b29b      	uxth	r3, r3
 800a496:	b21b      	sxth	r3, r3
 800a498:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a49c:	b21c      	sxth	r4, r3
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	899b      	ldrh	r3, [r3, #12]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fa fcd1 	bl	8004e50 <lwip_htons>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fa fcc8 	bl	8004e50 <lwip_htons>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	b21b      	sxth	r3, r3
 800a4c4:	4323      	orrs	r3, r4
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	b292      	uxth	r2, r2
 800a4d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4dc:	4413      	add	r3, r2
 800a4de:	b299      	uxth	r1, r3
 800a4e0:	4b3c      	ldr	r3, [pc, #240]	; (800a5d4 <tcp_receive+0xf18>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	1a8a      	subs	r2, r1, r2
 800a4ec:	b292      	uxth	r2, r2
 800a4ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	891b      	ldrh	r3, [r3, #8]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fb fdd4 	bl	80060ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	891c      	ldrh	r4, [r3, #8]
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	899b      	ldrh	r3, [r3, #12]
 800a512:	b29b      	uxth	r3, r3
 800a514:	4618      	mov	r0, r3
 800a516:	f7fa fc9b 	bl	8004e50 <lwip_htons>
 800a51a:	4603      	mov	r3, r0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <tcp_receive+0xe6e>
 800a526:	2301      	movs	r3, #1
 800a528:	e000      	b.n	800a52c <tcp_receive+0xe70>
 800a52a:	2300      	movs	r3, #0
 800a52c:	4423      	add	r3, r4
 800a52e:	b29a      	uxth	r2, r3
 800a530:	4b2a      	ldr	r3, [pc, #168]	; (800a5dc <tcp_receive+0xf20>)
 800a532:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a534:	4b29      	ldr	r3, [pc, #164]	; (800a5dc <tcp_receive+0xf20>)
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	461a      	mov	r2, r3
 800a53a:	4b26      	ldr	r3, [pc, #152]	; (800a5d4 <tcp_receive+0xf18>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	441a      	add	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a548:	440b      	add	r3, r1
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d019      	beq.n	800a582 <tcp_receive+0xec6>
 800a54e:	4b24      	ldr	r3, [pc, #144]	; (800a5e0 <tcp_receive+0xf24>)
 800a550:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a554:	4923      	ldr	r1, [pc, #140]	; (800a5e4 <tcp_receive+0xf28>)
 800a556:	4824      	ldr	r0, [pc, #144]	; (800a5e8 <tcp_receive+0xf2c>)
 800a558:	f004 fe32 	bl	800f1c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a55c:	e011      	b.n	800a582 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	63bb      	str	r3, [r7, #56]	; 0x38
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	2b00      	cmp	r3, #0
 800a568:	f47f aea4 	bne.w	800a2b4 <tcp_receive+0xbf8>
 800a56c:	e00a      	b.n	800a584 <tcp_receive+0xec8>
                break;
 800a56e:	bf00      	nop
 800a570:	e008      	b.n	800a584 <tcp_receive+0xec8>
                break;
 800a572:	bf00      	nop
 800a574:	e006      	b.n	800a584 <tcp_receive+0xec8>
                  break;
 800a576:	bf00      	nop
 800a578:	e004      	b.n	800a584 <tcp_receive+0xec8>
                  break;
 800a57a:	bf00      	nop
 800a57c:	e002      	b.n	800a584 <tcp_receive+0xec8>
                  break;
 800a57e:	bf00      	nop
 800a580:	e000      	b.n	800a584 <tcp_receive+0xec8>
                break;
 800a582:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fa33 	bl	800b9f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a58a:	e003      	b.n	800a594 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 fa2f 	bl	800b9f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a592:	e01a      	b.n	800a5ca <tcp_receive+0xf0e>
 800a594:	e019      	b.n	800a5ca <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a596:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <tcp_receive+0xf18>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	db0a      	blt.n	800a5ba <tcp_receive+0xefe>
 800a5a4:	4b0b      	ldr	r3, [pc, #44]	; (800a5d4 <tcp_receive+0xf18>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5b0:	440b      	add	r3, r1
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dd07      	ble.n	800a5ca <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	8b5b      	ldrh	r3, [r3, #26]
 800a5be:	f043 0302 	orr.w	r3, r3, #2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a5c8:	e7ff      	b.n	800a5ca <tcp_receive+0xf0e>
 800a5ca:	bf00      	nop
 800a5cc:	3750      	adds	r7, #80	; 0x50
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	200089bc 	.word	0x200089bc
 800a5d8:	2000899c 	.word	0x2000899c
 800a5dc:	200089c6 	.word	0x200089c6
 800a5e0:	0801182c 	.word	0x0801182c
 800a5e4:	08011bd4 	.word	0x08011bd4
 800a5e8:	08011878 	.word	0x08011878

0800a5ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a5f2:	4b15      	ldr	r3, [pc, #84]	; (800a648 <tcp_get_next_optbyte+0x5c>)
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	b291      	uxth	r1, r2
 800a5fa:	4a13      	ldr	r2, [pc, #76]	; (800a648 <tcp_get_next_optbyte+0x5c>)
 800a5fc:	8011      	strh	r1, [r2, #0]
 800a5fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a600:	4b12      	ldr	r3, [pc, #72]	; (800a64c <tcp_get_next_optbyte+0x60>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <tcp_get_next_optbyte+0x26>
 800a608:	4b11      	ldr	r3, [pc, #68]	; (800a650 <tcp_get_next_optbyte+0x64>)
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	88fa      	ldrh	r2, [r7, #6]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d208      	bcs.n	800a624 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a612:	4b10      	ldr	r3, [pc, #64]	; (800a654 <tcp_get_next_optbyte+0x68>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3314      	adds	r3, #20
 800a618:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	4413      	add	r3, r2
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	e00b      	b.n	800a63c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	b2da      	uxtb	r2, r3
 800a628:	4b09      	ldr	r3, [pc, #36]	; (800a650 <tcp_get_next_optbyte+0x64>)
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <tcp_get_next_optbyte+0x60>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	797b      	ldrb	r3, [r7, #5]
 800a638:	4413      	add	r3, r2
 800a63a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	200089b8 	.word	0x200089b8
 800a64c:	200089b4 	.word	0x200089b4
 800a650:	200089b2 	.word	0x200089b2
 800a654:	200089ac 	.word	0x200089ac

0800a658 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <tcp_parseopt+0x1c>
 800a666:	4b32      	ldr	r3, [pc, #200]	; (800a730 <tcp_parseopt+0xd8>)
 800a668:	f240 727d 	movw	r2, #1917	; 0x77d
 800a66c:	4931      	ldr	r1, [pc, #196]	; (800a734 <tcp_parseopt+0xdc>)
 800a66e:	4832      	ldr	r0, [pc, #200]	; (800a738 <tcp_parseopt+0xe0>)
 800a670:	f004 fda6 	bl	800f1c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a674:	4b31      	ldr	r3, [pc, #196]	; (800a73c <tcp_parseopt+0xe4>)
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d055      	beq.n	800a728 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a67c:	4b30      	ldr	r3, [pc, #192]	; (800a740 <tcp_parseopt+0xe8>)
 800a67e:	2200      	movs	r2, #0
 800a680:	801a      	strh	r2, [r3, #0]
 800a682:	e045      	b.n	800a710 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a684:	f7ff ffb2 	bl	800a5ec <tcp_get_next_optbyte>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d006      	beq.n	800a6a0 <tcp_parseopt+0x48>
 800a692:	2b02      	cmp	r3, #2
 800a694:	dc2b      	bgt.n	800a6ee <tcp_parseopt+0x96>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d041      	beq.n	800a71e <tcp_parseopt+0xc6>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d127      	bne.n	800a6ee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a69e:	e037      	b.n	800a710 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a6a0:	f7ff ffa4 	bl	800a5ec <tcp_get_next_optbyte>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d13b      	bne.n	800a722 <tcp_parseopt+0xca>
 800a6aa:	4b25      	ldr	r3, [pc, #148]	; (800a740 <tcp_parseopt+0xe8>)
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	4a22      	ldr	r2, [pc, #136]	; (800a73c <tcp_parseopt+0xe4>)
 800a6b2:	8812      	ldrh	r2, [r2, #0]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	da34      	bge.n	800a722 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a6b8:	f7ff ff98 	bl	800a5ec <tcp_get_next_optbyte>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	021b      	lsls	r3, r3, #8
 800a6c2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a6c4:	f7ff ff92 	bl	800a5ec <tcp_get_next_optbyte>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	89bb      	ldrh	r3, [r7, #12]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a6d2:	89bb      	ldrh	r3, [r7, #12]
 800a6d4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a6d8:	d804      	bhi.n	800a6e4 <tcp_parseopt+0x8c>
 800a6da:	89bb      	ldrh	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <tcp_parseopt+0x8c>
 800a6e0:	89ba      	ldrh	r2, [r7, #12]
 800a6e2:	e001      	b.n	800a6e8 <tcp_parseopt+0x90>
 800a6e4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a6ec:	e010      	b.n	800a710 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a6ee:	f7ff ff7d 	bl	800a5ec <tcp_get_next_optbyte>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a6f6:	7afb      	ldrb	r3, [r7, #11]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d914      	bls.n	800a726 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <tcp_parseopt+0xe8>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	4413      	add	r3, r2
 800a706:	b29b      	uxth	r3, r3
 800a708:	3b02      	subs	r3, #2
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <tcp_parseopt+0xe8>)
 800a70e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <tcp_parseopt+0xe8>)
 800a712:	881a      	ldrh	r2, [r3, #0]
 800a714:	4b09      	ldr	r3, [pc, #36]	; (800a73c <tcp_parseopt+0xe4>)
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d3b3      	bcc.n	800a684 <tcp_parseopt+0x2c>
 800a71c:	e004      	b.n	800a728 <tcp_parseopt+0xd0>
          return;
 800a71e:	bf00      	nop
 800a720:	e002      	b.n	800a728 <tcp_parseopt+0xd0>
            return;
 800a722:	bf00      	nop
 800a724:	e000      	b.n	800a728 <tcp_parseopt+0xd0>
            return;
 800a726:	bf00      	nop
      }
    }
  }
}
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	0801182c 	.word	0x0801182c
 800a734:	08011c90 	.word	0x08011c90
 800a738:	08011878 	.word	0x08011878
 800a73c:	200089b0 	.word	0x200089b0
 800a740:	200089b8 	.word	0x200089b8

0800a744 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <tcp_trigger_input_pcb_close+0x1c>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f043 0310 	orr.w	r3, r3, #16
 800a750:	b2da      	uxtb	r2, r3
 800a752:	4b03      	ldr	r3, [pc, #12]	; (800a760 <tcp_trigger_input_pcb_close+0x1c>)
 800a754:	701a      	strb	r2, [r3, #0]
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	200089c9 	.word	0x200089c9

0800a764 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <tcp_route+0x28>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	7a1b      	ldrb	r3, [r3, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d006      	beq.n	800a78c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	7a1b      	ldrb	r3, [r3, #8]
 800a782:	4618      	mov	r0, r3
 800a784:	f7fb fab8 	bl	8005cf8 <netif_get_by_index>
 800a788:	4603      	mov	r3, r0
 800a78a:	e003      	b.n	800a794 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f003 fa37 	bl	800dc00 <ip4_route>
 800a792:	4603      	mov	r3, r0
  }
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a79c:	b590      	push	{r4, r7, lr}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d105      	bne.n	800a7be <tcp_create_segment+0x22>
 800a7b2:	4b44      	ldr	r3, [pc, #272]	; (800a8c4 <tcp_create_segment+0x128>)
 800a7b4:	22a3      	movs	r2, #163	; 0xa3
 800a7b6:	4944      	ldr	r1, [pc, #272]	; (800a8c8 <tcp_create_segment+0x12c>)
 800a7b8:	4844      	ldr	r0, [pc, #272]	; (800a8cc <tcp_create_segment+0x130>)
 800a7ba:	f004 fd01 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d105      	bne.n	800a7d0 <tcp_create_segment+0x34>
 800a7c4:	4b3f      	ldr	r3, [pc, #252]	; (800a8c4 <tcp_create_segment+0x128>)
 800a7c6:	22a4      	movs	r2, #164	; 0xa4
 800a7c8:	4941      	ldr	r1, [pc, #260]	; (800a8d0 <tcp_create_segment+0x134>)
 800a7ca:	4840      	ldr	r0, [pc, #256]	; (800a8cc <tcp_create_segment+0x130>)
 800a7cc:	f004 fcf8 	bl	800f1c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a7d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a7de:	2003      	movs	r0, #3
 800a7e0:	f7fa ff8c 	bl	80056fc <memp_malloc>
 800a7e4:	6138      	str	r0, [r7, #16]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a7ec:	68b8      	ldr	r0, [r7, #8]
 800a7ee:	f7fb fde3 	bl	80063b8 <pbuf_free>
    return NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e061      	b.n	800a8ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a7fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	891a      	ldrh	r2, [r3, #8]
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	b29b      	uxth	r3, r3
 800a812:	429a      	cmp	r2, r3
 800a814:	d205      	bcs.n	800a822 <tcp_create_segment+0x86>
 800a816:	4b2b      	ldr	r3, [pc, #172]	; (800a8c4 <tcp_create_segment+0x128>)
 800a818:	22b0      	movs	r2, #176	; 0xb0
 800a81a:	492e      	ldr	r1, [pc, #184]	; (800a8d4 <tcp_create_segment+0x138>)
 800a81c:	482b      	ldr	r0, [pc, #172]	; (800a8cc <tcp_create_segment+0x130>)
 800a81e:	f004 fccf 	bl	800f1c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	891a      	ldrh	r2, [r3, #8]
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a832:	2114      	movs	r1, #20
 800a834:	68b8      	ldr	r0, [r7, #8]
 800a836:	f7fb fd29 	bl	800628c <pbuf_add_header>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a840:	6938      	ldr	r0, [r7, #16]
 800a842:	f7fd f8ce 	bl	80079e2 <tcp_seg_free>
    return NULL;
 800a846:	2300      	movs	r3, #0
 800a848:	e037      	b.n	800a8ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8ada      	ldrh	r2, [r3, #22]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	68dc      	ldr	r4, [r3, #12]
 800a85c:	4610      	mov	r0, r2
 800a85e:	f7fa faf7 	bl	8004e50 <lwip_htons>
 800a862:	4603      	mov	r3, r0
 800a864:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	8b1a      	ldrh	r2, [r3, #24]
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	68dc      	ldr	r4, [r3, #12]
 800a86e:	4610      	mov	r0, r2
 800a870:	f7fa faee 	bl	8004e50 <lwip_htons>
 800a874:	4603      	mov	r3, r0
 800a876:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	68dc      	ldr	r4, [r3, #12]
 800a87c:	6838      	ldr	r0, [r7, #0]
 800a87e:	f7fa fafc 	bl	8004e7a <lwip_htonl>
 800a882:	4603      	mov	r3, r0
 800a884:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	089b      	lsrs	r3, r3, #2
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	3305      	adds	r3, #5
 800a890:	b29b      	uxth	r3, r3
 800a892:	031b      	lsls	r3, r3, #12
 800a894:	b29a      	uxth	r2, r3
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	b29b      	uxth	r3, r3
 800a89a:	4313      	orrs	r3, r2
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	68dc      	ldr	r4, [r3, #12]
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	f7fa fad4 	bl	8004e50 <lwip_htons>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	749a      	strb	r2, [r3, #18]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	74da      	strb	r2, [r3, #19]
  return seg;
 800a8b8:	693b      	ldr	r3, [r7, #16]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd90      	pop	{r4, r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	08011cac 	.word	0x08011cac
 800a8c8:	08011ce0 	.word	0x08011ce0
 800a8cc:	08011d00 	.word	0x08011d00
 800a8d0:	08011d28 	.word	0x08011d28
 800a8d4:	08011d4c 	.word	0x08011d4c

0800a8d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b08b      	sub	sp, #44	; 0x2c
 800a8dc:	af02      	add	r7, sp, #8
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <tcp_split_unsent_seg+0x2c>
 800a8f6:	4b95      	ldr	r3, [pc, #596]	; (800ab4c <tcp_split_unsent_seg+0x274>)
 800a8f8:	f240 324b 	movw	r2, #843	; 0x34b
 800a8fc:	4994      	ldr	r1, [pc, #592]	; (800ab50 <tcp_split_unsent_seg+0x278>)
 800a8fe:	4895      	ldr	r0, [pc, #596]	; (800ab54 <tcp_split_unsent_seg+0x27c>)
 800a900:	f004 fc5e 	bl	800f1c0 <iprintf>

  useg = pcb->unsent;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a908:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d102      	bne.n	800a916 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a910:	f04f 33ff 	mov.w	r3, #4294967295
 800a914:	e116      	b.n	800ab44 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a916:	887b      	ldrh	r3, [r7, #2]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d109      	bne.n	800a930 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a91c:	4b8b      	ldr	r3, [pc, #556]	; (800ab4c <tcp_split_unsent_seg+0x274>)
 800a91e:	f240 3253 	movw	r2, #851	; 0x353
 800a922:	498d      	ldr	r1, [pc, #564]	; (800ab58 <tcp_split_unsent_seg+0x280>)
 800a924:	488b      	ldr	r0, [pc, #556]	; (800ab54 <tcp_split_unsent_seg+0x27c>)
 800a926:	f004 fc4b 	bl	800f1c0 <iprintf>
    return ERR_VAL;
 800a92a:	f06f 0305 	mvn.w	r3, #5
 800a92e:	e109      	b.n	800ab44 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	891b      	ldrh	r3, [r3, #8]
 800a934:	887a      	ldrh	r2, [r7, #2]
 800a936:	429a      	cmp	r2, r3
 800a938:	d301      	bcc.n	800a93e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e102      	b.n	800ab44 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a942:	887a      	ldrh	r2, [r7, #2]
 800a944:	429a      	cmp	r2, r3
 800a946:	d906      	bls.n	800a956 <tcp_split_unsent_seg+0x7e>
 800a948:	4b80      	ldr	r3, [pc, #512]	; (800ab4c <tcp_split_unsent_seg+0x274>)
 800a94a:	f240 325b 	movw	r2, #859	; 0x35b
 800a94e:	4983      	ldr	r1, [pc, #524]	; (800ab5c <tcp_split_unsent_seg+0x284>)
 800a950:	4880      	ldr	r0, [pc, #512]	; (800ab54 <tcp_split_unsent_seg+0x27c>)
 800a952:	f004 fc35 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	891b      	ldrh	r3, [r3, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <tcp_split_unsent_seg+0x94>
 800a95e:	4b7b      	ldr	r3, [pc, #492]	; (800ab4c <tcp_split_unsent_seg+0x274>)
 800a960:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a964:	497e      	ldr	r1, [pc, #504]	; (800ab60 <tcp_split_unsent_seg+0x288>)
 800a966:	487b      	ldr	r0, [pc, #492]	; (800ab54 <tcp_split_unsent_seg+0x27c>)
 800a968:	f004 fc2a 	bl	800f1c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	7a9b      	ldrb	r3, [r3, #10]
 800a970:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	891a      	ldrh	r2, [r3, #8]
 800a982:	887b      	ldrh	r3, [r7, #2]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a988:	7bbb      	ldrb	r3, [r7, #14]
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	89bb      	ldrh	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	b29b      	uxth	r3, r3
 800a992:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a996:	4619      	mov	r1, r3
 800a998:	2036      	movs	r0, #54	; 0x36
 800a99a:	f7fb fa29 	bl	8005df0 <pbuf_alloc>
 800a99e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f000 80b7 	beq.w	800ab16 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	891a      	ldrh	r2, [r3, #8]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	891b      	ldrh	r3, [r3, #8]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	887b      	ldrh	r3, [r7, #2]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	6858      	ldr	r0, [r3, #4]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	18d1      	adds	r1, r2, r3
 800a9c8:	897b      	ldrh	r3, [r7, #10]
 800a9ca:	89ba      	ldrh	r2, [r7, #12]
 800a9cc:	f7fb feee 	bl	80067ac <pbuf_copy_partial>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	89bb      	ldrh	r3, [r7, #12]
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	f040 809f 	bne.w	800ab1a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	899b      	ldrh	r3, [r3, #12]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fa fa33 	bl	8004e50 <lwip_htons>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a9f8:	7efb      	ldrb	r3, [r7, #27]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d007      	beq.n	800aa12 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800aa02:	7efb      	ldrb	r3, [r7, #27]
 800aa04:	f023 0308 	bic.w	r3, r3, #8
 800aa08:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800aa0a:	7ebb      	ldrb	r3, [r7, #26]
 800aa0c:	f043 0308 	orr.w	r3, r3, #8
 800aa10:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800aa12:	7efb      	ldrb	r3, [r7, #27]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d007      	beq.n	800aa2c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800aa1c:	7efb      	ldrb	r3, [r7, #27]
 800aa1e:	f023 0301 	bic.w	r3, r3, #1
 800aa22:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800aa24:	7ebb      	ldrb	r3, [r7, #26]
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fa fa21 	bl	8004e7a <lwip_htonl>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	887b      	ldrh	r3, [r7, #2]
 800aa3c:	18d1      	adds	r1, r2, r3
 800aa3e:	7eba      	ldrb	r2, [r7, #26]
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	460b      	mov	r3, r1
 800aa46:	6939      	ldr	r1, [r7, #16]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff fea7 	bl	800a79c <tcp_create_segment>
 800aa4e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d063      	beq.n	800ab1e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fb fd34 	bl	80064c8 <pbuf_clen>
 800aa60:	4603      	mov	r3, r0
 800aa62:	461a      	mov	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	6858      	ldr	r0, [r3, #4]
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	891a      	ldrh	r2, [r3, #8]
 800aa7e:	89bb      	ldrh	r3, [r7, #12]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	f7fb fb11 	bl	80060ac <pbuf_realloc>
  useg->len -= remainder;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	891a      	ldrh	r2, [r3, #8]
 800aa8e:	89bb      	ldrh	r3, [r7, #12]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	899b      	ldrh	r3, [r3, #12]
 800aa9e:	b29c      	uxth	r4, r3
 800aaa0:	7efb      	ldrb	r3, [r7, #27]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fa f9d3 	bl	8004e50 <lwip_htons>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	461a      	mov	r2, r3
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	4322      	orrs	r2, r4
 800aab4:	b292      	uxth	r2, r2
 800aab6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fb fd03 	bl	80064c8 <pbuf_clen>
 800aac2:	4603      	mov	r3, r0
 800aac4:	461a      	mov	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aacc:	4413      	add	r3, r2
 800aace:	b29a      	uxth	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fb fcf4 	bl	80064c8 <pbuf_clen>
 800aae0:	4603      	mov	r3, r0
 800aae2:	461a      	mov	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aaea:	4413      	add	r3, r2
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d103      	bne.n	800ab12 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e016      	b.n	800ab44 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ab16:	bf00      	nop
 800ab18:	e002      	b.n	800ab20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ab1a:	bf00      	nop
 800ab1c:	e000      	b.n	800ab20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ab1e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d006      	beq.n	800ab34 <tcp_split_unsent_seg+0x25c>
 800ab26:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <tcp_split_unsent_seg+0x274>)
 800ab28:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ab2c:	490d      	ldr	r1, [pc, #52]	; (800ab64 <tcp_split_unsent_seg+0x28c>)
 800ab2e:	4809      	ldr	r0, [pc, #36]	; (800ab54 <tcp_split_unsent_seg+0x27c>)
 800ab30:	f004 fb46 	bl	800f1c0 <iprintf>
  if (p != NULL) {
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ab3a:	6938      	ldr	r0, [r7, #16]
 800ab3c:	f7fb fc3c 	bl	80063b8 <pbuf_free>
  }

  return ERR_MEM;
 800ab40:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3724      	adds	r7, #36	; 0x24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd90      	pop	{r4, r7, pc}
 800ab4c:	08011cac 	.word	0x08011cac
 800ab50:	08012040 	.word	0x08012040
 800ab54:	08011d00 	.word	0x08011d00
 800ab58:	08012064 	.word	0x08012064
 800ab5c:	08012088 	.word	0x08012088
 800ab60:	08012098 	.word	0x08012098
 800ab64:	080120a8 	.word	0x080120a8

0800ab68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ab68:	b590      	push	{r4, r7, lr}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <tcp_send_fin+0x1c>
 800ab76:	4b21      	ldr	r3, [pc, #132]	; (800abfc <tcp_send_fin+0x94>)
 800ab78:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ab7c:	4920      	ldr	r1, [pc, #128]	; (800ac00 <tcp_send_fin+0x98>)
 800ab7e:	4821      	ldr	r0, [pc, #132]	; (800ac04 <tcp_send_fin+0x9c>)
 800ab80:	f004 fb1e 	bl	800f1c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d02e      	beq.n	800abea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e002      	b.n	800ab9a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1f8      	bne.n	800ab94 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	899b      	ldrh	r3, [r3, #12]
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fa f950 	bl	8004e50 <lwip_htons>
 800abb0:	4603      	mov	r3, r0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f003 0307 	and.w	r3, r3, #7
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d116      	bne.n	800abea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	899b      	ldrh	r3, [r3, #12]
 800abc2:	b29c      	uxth	r4, r3
 800abc4:	2001      	movs	r0, #1
 800abc6:	f7fa f943 	bl	8004e50 <lwip_htons>
 800abca:	4603      	mov	r3, r0
 800abcc:	461a      	mov	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	4322      	orrs	r2, r4
 800abd4:	b292      	uxth	r2, r2
 800abd6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8b5b      	ldrh	r3, [r3, #26]
 800abdc:	f043 0320 	orr.w	r3, r3, #32
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e004      	b.n	800abf4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800abea:	2101      	movs	r1, #1
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f80b 	bl	800ac08 <tcp_enqueue_flags>
 800abf2:	4603      	mov	r3, r0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd90      	pop	{r4, r7, pc}
 800abfc:	08011cac 	.word	0x08011cac
 800ac00:	080120b4 	.word	0x080120b4
 800ac04:	08011d00 	.word	0x08011d00

0800ac08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <tcp_enqueue_flags+0x2c>
 800ac26:	4b67      	ldr	r3, [pc, #412]	; (800adc4 <tcp_enqueue_flags+0x1bc>)
 800ac28:	f240 4211 	movw	r2, #1041	; 0x411
 800ac2c:	4966      	ldr	r1, [pc, #408]	; (800adc8 <tcp_enqueue_flags+0x1c0>)
 800ac2e:	4867      	ldr	r0, [pc, #412]	; (800adcc <tcp_enqueue_flags+0x1c4>)
 800ac30:	f004 fac6 	bl	800f1c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <tcp_enqueue_flags+0x40>
 800ac3a:	4b62      	ldr	r3, [pc, #392]	; (800adc4 <tcp_enqueue_flags+0x1bc>)
 800ac3c:	f240 4213 	movw	r2, #1043	; 0x413
 800ac40:	4963      	ldr	r1, [pc, #396]	; (800add0 <tcp_enqueue_flags+0x1c8>)
 800ac42:	4862      	ldr	r0, [pc, #392]	; (800adcc <tcp_enqueue_flags+0x1c4>)
 800ac44:	f004 fabc 	bl	800f1c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	f003 0302 	and.w	r3, r3, #2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ac52:	2301      	movs	r3, #1
 800ac54:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac56:	7ffb      	ldrb	r3, [r7, #31]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	2036      	movs	r0, #54	; 0x36
 800ac6e:	f7fb f8bf 	bl	8005df0 <pbuf_alloc>
 800ac72:	6138      	str	r0, [r7, #16]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d109      	bne.n	800ac8e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	8b5b      	ldrh	r3, [r3, #26]
 800ac7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ac88:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8c:	e095      	b.n	800adba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	895a      	ldrh	r2, [r3, #10]
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d206      	bcs.n	800aca8 <tcp_enqueue_flags+0xa0>
 800ac9a:	4b4a      	ldr	r3, [pc, #296]	; (800adc4 <tcp_enqueue_flags+0x1bc>)
 800ac9c:	f240 4239 	movw	r2, #1081	; 0x439
 800aca0:	494c      	ldr	r1, [pc, #304]	; (800add4 <tcp_enqueue_flags+0x1cc>)
 800aca2:	484a      	ldr	r0, [pc, #296]	; (800adcc <tcp_enqueue_flags+0x1c4>)
 800aca4:	f004 fa8c 	bl	800f1c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	7ffb      	ldrb	r3, [r7, #31]
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	460b      	mov	r3, r1
 800acb4:	6939      	ldr	r1, [r7, #16]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fd70 	bl	800a79c <tcp_create_segment>
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d109      	bne.n	800acd8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8b5b      	ldrh	r3, [r3, #26]
 800acc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800accc:	b29a      	uxth	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800acd2:	f04f 33ff 	mov.w	r3, #4294967295
 800acd6:	e070      	b.n	800adba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0303 	and.w	r3, r3, #3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d006      	beq.n	800acf2 <tcp_enqueue_flags+0xea>
 800ace4:	4b37      	ldr	r3, [pc, #220]	; (800adc4 <tcp_enqueue_flags+0x1bc>)
 800ace6:	f240 4242 	movw	r2, #1090	; 0x442
 800acea:	493b      	ldr	r1, [pc, #236]	; (800add8 <tcp_enqueue_flags+0x1d0>)
 800acec:	4837      	ldr	r0, [pc, #220]	; (800adcc <tcp_enqueue_flags+0x1c4>)
 800acee:	f004 fa67 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	891b      	ldrh	r3, [r3, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d006      	beq.n	800ad08 <tcp_enqueue_flags+0x100>
 800acfa:	4b32      	ldr	r3, [pc, #200]	; (800adc4 <tcp_enqueue_flags+0x1bc>)
 800acfc:	f240 4243 	movw	r2, #1091	; 0x443
 800ad00:	4936      	ldr	r1, [pc, #216]	; (800addc <tcp_enqueue_flags+0x1d4>)
 800ad02:	4832      	ldr	r0, [pc, #200]	; (800adcc <tcp_enqueue_flags+0x1c4>)
 800ad04:	f004 fa5c 	bl	800f1c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d103      	bne.n	800ad18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	66da      	str	r2, [r3, #108]	; 0x6c
 800ad16:	e00d      	b.n	800ad34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad1c:	61bb      	str	r3, [r7, #24]
 800ad1e:	e002      	b.n	800ad26 <tcp_enqueue_flags+0x11e>
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	61bb      	str	r3, [r7, #24]
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f8      	bne.n	800ad20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d104      	bne.n	800ad50 <tcp_enqueue_flags+0x148>
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d006      	beq.n	800ad72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8b5b      	ldrh	r3, [r3, #26]
 800ad68:	f043 0320 	orr.w	r3, r3, #32
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fb fba6 	bl	80064c8 <pbuf_clen>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad86:	4413      	add	r3, r2
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00e      	beq.n	800adb8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <tcp_enqueue_flags+0x1b0>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d106      	bne.n	800adb8 <tcp_enqueue_flags+0x1b0>
 800adaa:	4b06      	ldr	r3, [pc, #24]	; (800adc4 <tcp_enqueue_flags+0x1bc>)
 800adac:	f240 4265 	movw	r2, #1125	; 0x465
 800adb0:	490b      	ldr	r1, [pc, #44]	; (800ade0 <tcp_enqueue_flags+0x1d8>)
 800adb2:	4806      	ldr	r0, [pc, #24]	; (800adcc <tcp_enqueue_flags+0x1c4>)
 800adb4:	f004 fa04 	bl	800f1c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3720      	adds	r7, #32
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	08011cac 	.word	0x08011cac
 800adc8:	080120d0 	.word	0x080120d0
 800adcc:	08011d00 	.word	0x08011d00
 800add0:	08012128 	.word	0x08012128
 800add4:	08012148 	.word	0x08012148
 800add8:	08012184 	.word	0x08012184
 800addc:	0801219c 	.word	0x0801219c
 800ade0:	080121c8 	.word	0x080121c8

0800ade4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ade4:	b5b0      	push	{r4, r5, r7, lr}
 800ade6:	b08a      	sub	sp, #40	; 0x28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <tcp_output+0x1c>
 800adf2:	4b8a      	ldr	r3, [pc, #552]	; (800b01c <tcp_output+0x238>)
 800adf4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800adf8:	4989      	ldr	r1, [pc, #548]	; (800b020 <tcp_output+0x23c>)
 800adfa:	488a      	ldr	r0, [pc, #552]	; (800b024 <tcp_output+0x240>)
 800adfc:	f004 f9e0 	bl	800f1c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7d1b      	ldrb	r3, [r3, #20]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d106      	bne.n	800ae16 <tcp_output+0x32>
 800ae08:	4b84      	ldr	r3, [pc, #528]	; (800b01c <tcp_output+0x238>)
 800ae0a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ae0e:	4986      	ldr	r1, [pc, #536]	; (800b028 <tcp_output+0x244>)
 800ae10:	4884      	ldr	r0, [pc, #528]	; (800b024 <tcp_output+0x240>)
 800ae12:	f004 f9d5 	bl	800f1c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ae16:	4b85      	ldr	r3, [pc, #532]	; (800b02c <tcp_output+0x248>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d101      	bne.n	800ae24 <tcp_output+0x40>
    return ERR_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e1ce      	b.n	800b1c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae30:	4293      	cmp	r3, r2
 800ae32:	bf28      	it	cs
 800ae34:	4613      	movcs	r3, r2
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	8b5b      	ldrh	r3, [r3, #26]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 81aa 	beq.w	800b1a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fdcb 	bl	800b9f0 <tcp_send_empty_ack>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	e1b1      	b.n	800b1c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3304      	adds	r3, #4
 800ae64:	461a      	mov	r2, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff fc7c 	bl	800a764 <tcp_route>
 800ae6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d102      	bne.n	800ae7a <tcp_output+0x96>
    return ERR_RTE;
 800ae74:	f06f 0303 	mvn.w	r3, #3
 800ae78:	e1a3      	b.n	800b1c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <tcp_output+0xa4>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d111      	bne.n	800aeac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <tcp_output+0xb0>
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	3304      	adds	r3, #4
 800ae92:	e000      	b.n	800ae96 <tcp_output+0xb2>
 800ae94:	2300      	movs	r3, #0
 800ae96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d102      	bne.n	800aea4 <tcp_output+0xc0>
      return ERR_RTE;
 800ae9e:	f06f 0303 	mvn.w	r3, #3
 800aea2:	e18e      	b.n	800b1c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7f9 ffe1 	bl	8004e7a <lwip_htonl>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec2:	8912      	ldrh	r2, [r2, #8]
 800aec4:	4413      	add	r3, r2
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d227      	bcs.n	800af1c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aed2:	461a      	mov	r2, r3
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d114      	bne.n	800af04 <tcp_output+0x120>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d110      	bne.n	800af04 <tcp_output+0x120>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10b      	bne.n	800af04 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	8b5b      	ldrh	r3, [r3, #26]
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 814d 	beq.w	800b1ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fd6c 	bl	800b9f0 <tcp_send_empty_ack>
 800af18:	4603      	mov	r3, r0
 800af1a:	e152      	b.n	800b1c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 811c 	beq.w	800b16a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800af32:	e002      	b.n	800af3a <tcp_output+0x156>
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	623b      	str	r3, [r7, #32]
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f8      	bne.n	800af34 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800af42:	e112      	b.n	800b16a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	899b      	ldrh	r3, [r3, #12]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f9 ff7f 	bl	8004e50 <lwip_htons>
 800af52:	4603      	mov	r3, r0
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 0304 	and.w	r3, r3, #4
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d006      	beq.n	800af6c <tcp_output+0x188>
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <tcp_output+0x238>)
 800af60:	f240 5236 	movw	r2, #1334	; 0x536
 800af64:	4932      	ldr	r1, [pc, #200]	; (800b030 <tcp_output+0x24c>)
 800af66:	482f      	ldr	r0, [pc, #188]	; (800b024 <tcp_output+0x240>)
 800af68:	f004 f92a 	bl	800f1c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01f      	beq.n	800afb4 <tcp_output+0x1d0>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	8b5b      	ldrh	r3, [r3, #26]
 800af78:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d119      	bne.n	800afb4 <tcp_output+0x1d0>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <tcp_output+0x1bc>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d110      	bne.n	800afb4 <tcp_output+0x1d0>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af96:	891a      	ldrh	r2, [r3, #8]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d209      	bcs.n	800afb4 <tcp_output+0x1d0>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d004      	beq.n	800afb4 <tcp_output+0x1d0>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d901      	bls.n	800afb8 <tcp_output+0x1d4>
 800afb4:	2301      	movs	r3, #1
 800afb6:	e000      	b.n	800afba <tcp_output+0x1d6>
 800afb8:	2300      	movs	r3, #0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	8b5b      	ldrh	r3, [r3, #26]
 800afc2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 80e4 	beq.w	800b194 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	7d1b      	ldrb	r3, [r3, #20]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d00d      	beq.n	800aff0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	899b      	ldrh	r3, [r3, #12]
 800afda:	b29c      	uxth	r4, r3
 800afdc:	2010      	movs	r0, #16
 800afde:	f7f9 ff37 	bl	8004e50 <lwip_htons>
 800afe2:	4603      	mov	r3, r0
 800afe4:	461a      	mov	r2, r3
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	4322      	orrs	r2, r4
 800afec:	b292      	uxth	r2, r2
 800afee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aff6:	f000 f909 	bl	800b20c <tcp_output_segment>
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800affe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d016      	beq.n	800b034 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	8b5b      	ldrh	r3, [r3, #26]
 800b00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	835a      	strh	r2, [r3, #26]
      return err;
 800b014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b018:	e0d3      	b.n	800b1c2 <tcp_output+0x3de>
 800b01a:	bf00      	nop
 800b01c:	08011cac 	.word	0x08011cac
 800b020:	080121f0 	.word	0x080121f0
 800b024:	08011d00 	.word	0x08011d00
 800b028:	08012208 	.word	0x08012208
 800b02c:	200089d0 	.word	0x200089d0
 800b030:	08012230 	.word	0x08012230
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	2b02      	cmp	r3, #2
 800b042:	d006      	beq.n	800b052 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	8b5b      	ldrh	r3, [r3, #26]
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f9 ff0e 	bl	8004e7a <lwip_htonl>
 800b05e:	4604      	mov	r4, r0
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	891b      	ldrh	r3, [r3, #8]
 800b064:	461d      	mov	r5, r3
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	899b      	ldrh	r3, [r3, #12]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	4618      	mov	r0, r3
 800b070:	f7f9 feee 	bl	8004e50 <lwip_htons>
 800b074:	4603      	mov	r3, r0
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 0303 	and.w	r3, r3, #3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <tcp_output+0x2a0>
 800b080:	2301      	movs	r3, #1
 800b082:	e000      	b.n	800b086 <tcp_output+0x2a2>
 800b084:	2300      	movs	r3, #0
 800b086:	442b      	add	r3, r5
 800b088:	4423      	add	r3, r4
 800b08a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	da02      	bge.n	800b09e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	891b      	ldrh	r3, [r3, #8]
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	899b      	ldrh	r3, [r3, #12]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7f9 fecf 	bl	8004e50 <lwip_htons>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	f003 0303 	and.w	r3, r3, #3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <tcp_output+0x2de>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e000      	b.n	800b0c4 <tcp_output+0x2e0>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4423      	add	r3, r4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d049      	beq.n	800b15e <tcp_output+0x37a>
      seg->next = NULL;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d105      	bne.n	800b0e4 <tcp_output+0x300>
        pcb->unacked = seg;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0dc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	623b      	str	r3, [r7, #32]
 800b0e2:	e03f      	b.n	800b164 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f9 fec5 	bl	8004e7a <lwip_htonl>
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7f9 febe 	bl	8004e7a <lwip_htonl>
 800b0fe:	4603      	mov	r3, r0
 800b100:	1ae3      	subs	r3, r4, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	da24      	bge.n	800b150 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3370      	adds	r3, #112	; 0x70
 800b10a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b10c:	e002      	b.n	800b114 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d011      	beq.n	800b140 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	f7f9 fea8 	bl	8004e7a <lwip_htonl>
 800b12a:	4604      	mov	r4, r0
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	4618      	mov	r0, r3
 800b134:	f7f9 fea1 	bl	8004e7a <lwip_htonl>
 800b138:	4603      	mov	r3, r0
 800b13a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dbe6      	blt.n	800b10e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	e009      	b.n	800b164 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b154:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	623b      	str	r3, [r7, #32]
 800b15c:	e002      	b.n	800b164 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b15e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b160:	f7fc fc3f 	bl	80079e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d012      	beq.n	800b196 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	4618      	mov	r0, r3
 800b178:	f7f9 fe7f 	bl	8004e7a <lwip_htonl>
 800b17c:	4602      	mov	r2, r0
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b186:	8912      	ldrh	r2, [r2, #8]
 800b188:	4413      	add	r3, r2
  while (seg != NULL &&
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	f4bf aed9 	bcs.w	800af44 <tcp_output+0x160>
 800b192:	e000      	b.n	800b196 <tcp_output+0x3b2>
      break;
 800b194:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d108      	bne.n	800b1b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b1a6:	e004      	b.n	800b1b2 <tcp_output+0x3ce>
    goto output_done;
 800b1a8:	bf00      	nop
 800b1aa:	e002      	b.n	800b1b2 <tcp_output+0x3ce>
    goto output_done;
 800b1ac:	bf00      	nop
 800b1ae:	e000      	b.n	800b1b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b1b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	8b5b      	ldrh	r3, [r3, #26]
 800b1b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3728      	adds	r7, #40	; 0x28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ca:	bf00      	nop

0800b1cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <tcp_output_segment_busy+0x1c>
 800b1da:	4b09      	ldr	r3, [pc, #36]	; (800b200 <tcp_output_segment_busy+0x34>)
 800b1dc:	f240 529a 	movw	r2, #1434	; 0x59a
 800b1e0:	4908      	ldr	r1, [pc, #32]	; (800b204 <tcp_output_segment_busy+0x38>)
 800b1e2:	4809      	ldr	r0, [pc, #36]	; (800b208 <tcp_output_segment_busy+0x3c>)
 800b1e4:	f003 ffec 	bl	800f1c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	7b9b      	ldrb	r3, [r3, #14]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d001      	beq.n	800b1f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	08011cac 	.word	0x08011cac
 800b204:	08012248 	.word	0x08012248
 800b208:	08011d00 	.word	0x08011d00

0800b20c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b20c:	b5b0      	push	{r4, r5, r7, lr}
 800b20e:	b08c      	sub	sp, #48	; 0x30
 800b210:	af04      	add	r7, sp, #16
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <tcp_output_segment+0x20>
 800b21e:	4b63      	ldr	r3, [pc, #396]	; (800b3ac <tcp_output_segment+0x1a0>)
 800b220:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b224:	4962      	ldr	r1, [pc, #392]	; (800b3b0 <tcp_output_segment+0x1a4>)
 800b226:	4863      	ldr	r0, [pc, #396]	; (800b3b4 <tcp_output_segment+0x1a8>)
 800b228:	f003 ffca 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <tcp_output_segment+0x34>
 800b232:	4b5e      	ldr	r3, [pc, #376]	; (800b3ac <tcp_output_segment+0x1a0>)
 800b234:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b238:	495f      	ldr	r1, [pc, #380]	; (800b3b8 <tcp_output_segment+0x1ac>)
 800b23a:	485e      	ldr	r0, [pc, #376]	; (800b3b4 <tcp_output_segment+0x1a8>)
 800b23c:	f003 ffc0 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <tcp_output_segment+0x48>
 800b246:	4b59      	ldr	r3, [pc, #356]	; (800b3ac <tcp_output_segment+0x1a0>)
 800b248:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b24c:	495b      	ldr	r1, [pc, #364]	; (800b3bc <tcp_output_segment+0x1b0>)
 800b24e:	4859      	ldr	r0, [pc, #356]	; (800b3b4 <tcp_output_segment+0x1a8>)
 800b250:	f003 ffb6 	bl	800f1c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f7ff ffb9 	bl	800b1cc <tcp_output_segment_busy>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	e09f      	b.n	800b3a4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68dc      	ldr	r4, [r3, #12]
 800b26c:	4610      	mov	r0, r2
 800b26e:	f7f9 fe04 	bl	8004e7a <lwip_htonl>
 800b272:	4603      	mov	r3, r0
 800b274:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68dc      	ldr	r4, [r3, #12]
 800b27e:	4610      	mov	r0, r2
 800b280:	f7f9 fde6 	bl	8004e50 <lwip_htons>
 800b284:	4603      	mov	r3, r0
 800b286:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b290:	441a      	add	r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	3314      	adds	r3, #20
 800b29c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	7a9b      	ldrb	r3, [r3, #10]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d015      	beq.n	800b2d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b2b6:	f7fc fe8b 	bl	8007fd0 <tcp_eff_send_mss_netif>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b2be:	8b7b      	ldrh	r3, [r7, #26]
 800b2c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7f9 fdd8 	bl	8004e7a <lwip_htonl>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da02      	bge.n	800b2e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10c      	bne.n	800b308 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b2ee:	4b34      	ldr	r3, [pc, #208]	; (800b3c0 <tcp_output_segment+0x1b4>)
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f9 fdbc 	bl	8004e7a <lwip_htonl>
 800b302:	4602      	mov	r2, r0
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	8959      	ldrh	r1, [r3, #10]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	8b3a      	ldrh	r2, [r7, #24]
 800b322:	1a8a      	subs	r2, r1, r2
 800b324:	b292      	uxth	r2, r2
 800b326:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	8919      	ldrh	r1, [r3, #8]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	8b3a      	ldrh	r2, [r7, #24]
 800b334:	1a8a      	subs	r2, r1, r2
 800b336:	b292      	uxth	r2, r2
 800b338:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	68d2      	ldr	r2, [r2, #12]
 800b342:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	741a      	strb	r2, [r3, #16]
 800b34c:	2200      	movs	r2, #0
 800b34e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f103 0214 	add.w	r2, r3, #20
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	7a9b      	ldrb	r3, [r3, #10]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	f003 0304 	and.w	r3, r3, #4
 800b362:	4413      	add	r3, r2
 800b364:	69fa      	ldr	r2, [r7, #28]
 800b366:	429a      	cmp	r2, r3
 800b368:	d006      	beq.n	800b378 <tcp_output_segment+0x16c>
 800b36a:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <tcp_output_segment+0x1a0>)
 800b36c:	f240 621c 	movw	r2, #1564	; 0x61c
 800b370:	4914      	ldr	r1, [pc, #80]	; (800b3c4 <tcp_output_segment+0x1b8>)
 800b372:	4810      	ldr	r0, [pc, #64]	; (800b3b4 <tcp_output_segment+0x1a8>)
 800b374:	f003 ff24 	bl	800f1c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6858      	ldr	r0, [r3, #4]
 800b37c:	68b9      	ldr	r1, [r7, #8]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	1d1c      	adds	r4, r3, #4
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	7add      	ldrb	r5, [r3, #11]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	7a9b      	ldrb	r3, [r3, #10]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	9202      	str	r2, [sp, #8]
 800b38e:	2206      	movs	r2, #6
 800b390:	9201      	str	r2, [sp, #4]
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462b      	mov	r3, r5
 800b396:	4622      	mov	r2, r4
 800b398:	f002 fdf0 	bl	800df7c <ip4_output_if>
 800b39c:	4603      	mov	r3, r0
 800b39e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b3a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ac:	08011cac 	.word	0x08011cac
 800b3b0:	08012270 	.word	0x08012270
 800b3b4:	08011d00 	.word	0x08011d00
 800b3b8:	08012290 	.word	0x08012290
 800b3bc:	080122b0 	.word	0x080122b0
 800b3c0:	20008984 	.word	0x20008984
 800b3c4:	080122d4 	.word	0x080122d4

0800b3c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b3c8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d106      	bne.n	800b3e4 <tcp_rexmit_rto_prepare+0x1c>
 800b3d6:	4b31      	ldr	r3, [pc, #196]	; (800b49c <tcp_rexmit_rto_prepare+0xd4>)
 800b3d8:	f240 6263 	movw	r2, #1635	; 0x663
 800b3dc:	4930      	ldr	r1, [pc, #192]	; (800b4a0 <tcp_rexmit_rto_prepare+0xd8>)
 800b3de:	4831      	ldr	r0, [pc, #196]	; (800b4a4 <tcp_rexmit_rto_prepare+0xdc>)
 800b3e0:	f003 feee 	bl	800f1c0 <iprintf>

  if (pcb->unacked == NULL) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d102      	bne.n	800b3f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b3ec:	f06f 0305 	mvn.w	r3, #5
 800b3f0:	e050      	b.n	800b494 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	e00b      	b.n	800b412 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f7ff fee6 	bl	800b1cc <tcp_output_segment_busy>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b406:	f06f 0305 	mvn.w	r3, #5
 800b40a:	e043      	b.n	800b494 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1ef      	bne.n	800b3fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff fed6 	bl	800b1cc <tcp_output_segment_busy>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b426:	f06f 0305 	mvn.w	r3, #5
 800b42a:	e033      	b.n	800b494 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	8b5b      	ldrh	r3, [r3, #26]
 800b446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	4618      	mov	r0, r3
 800b458:	f7f9 fd0f 	bl	8004e7a <lwip_htonl>
 800b45c:	4604      	mov	r4, r0
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	891b      	ldrh	r3, [r3, #8]
 800b462:	461d      	mov	r5, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	899b      	ldrh	r3, [r3, #12]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7f9 fcef 	bl	8004e50 <lwip_htons>
 800b472:	4603      	mov	r3, r0
 800b474:	b2db      	uxtb	r3, r3
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <tcp_rexmit_rto_prepare+0xba>
 800b47e:	2301      	movs	r3, #1
 800b480:	e000      	b.n	800b484 <tcp_rexmit_rto_prepare+0xbc>
 800b482:	2300      	movs	r3, #0
 800b484:	442b      	add	r3, r5
 800b486:	18e2      	adds	r2, r4, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bdb0      	pop	{r4, r5, r7, pc}
 800b49c:	08011cac 	.word	0x08011cac
 800b4a0:	080122e8 	.word	0x080122e8
 800b4a4:	08011d00 	.word	0x08011d00

0800b4a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <tcp_rexmit_rto_commit+0x1c>
 800b4b6:	4b0d      	ldr	r3, [pc, #52]	; (800b4ec <tcp_rexmit_rto_commit+0x44>)
 800b4b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b4bc:	490c      	ldr	r1, [pc, #48]	; (800b4f0 <tcp_rexmit_rto_commit+0x48>)
 800b4be:	480d      	ldr	r0, [pc, #52]	; (800b4f4 <tcp_rexmit_rto_commit+0x4c>)
 800b4c0:	f003 fe7e 	bl	800f1c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ca:	2bff      	cmp	r3, #255	; 0xff
 800b4cc:	d007      	beq.n	800b4de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff fc80 	bl	800ade4 <tcp_output>
}
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	08011cac 	.word	0x08011cac
 800b4f0:	0801230c 	.word	0x0801230c
 800b4f4:	08011d00 	.word	0x08011d00

0800b4f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <tcp_rexmit_rto+0x1c>
 800b506:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <tcp_rexmit_rto+0x38>)
 800b508:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b50c:	4909      	ldr	r1, [pc, #36]	; (800b534 <tcp_rexmit_rto+0x3c>)
 800b50e:	480a      	ldr	r0, [pc, #40]	; (800b538 <tcp_rexmit_rto+0x40>)
 800b510:	f003 fe56 	bl	800f1c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ff57 	bl	800b3c8 <tcp_rexmit_rto_prepare>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff ffc1 	bl	800b4a8 <tcp_rexmit_rto_commit>
  }
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	08011cac 	.word	0x08011cac
 800b534:	08012330 	.word	0x08012330
 800b538:	08011d00 	.word	0x08011d00

0800b53c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b53c:	b590      	push	{r4, r7, lr}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <tcp_rexmit+0x1c>
 800b54a:	4b2f      	ldr	r3, [pc, #188]	; (800b608 <tcp_rexmit+0xcc>)
 800b54c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b550:	492e      	ldr	r1, [pc, #184]	; (800b60c <tcp_rexmit+0xd0>)
 800b552:	482f      	ldr	r0, [pc, #188]	; (800b610 <tcp_rexmit+0xd4>)
 800b554:	f003 fe34 	bl	800f1c0 <iprintf>

  if (pcb->unacked == NULL) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b560:	f06f 0305 	mvn.w	r3, #5
 800b564:	e04c      	b.n	800b600 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b56c:	68b8      	ldr	r0, [r7, #8]
 800b56e:	f7ff fe2d 	bl	800b1cc <tcp_output_segment_busy>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b578:	f06f 0305 	mvn.w	r3, #5
 800b57c:	e040      	b.n	800b600 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	336c      	adds	r3, #108	; 0x6c
 800b58a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b58c:	e002      	b.n	800b594 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d011      	beq.n	800b5c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f9 fc68 	bl	8004e7a <lwip_htonl>
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7f9 fc61 	bl	8004e7a <lwip_htonl>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	dbe6      	blt.n	800b58e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5e4:	2bff      	cmp	r3, #255	; 0xff
 800b5e6:	d007      	beq.n	800b5f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	bd90      	pop	{r4, r7, pc}
 800b608:	08011cac 	.word	0x08011cac
 800b60c:	0801234c 	.word	0x0801234c
 800b610:	08011d00 	.word	0x08011d00

0800b614 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <tcp_rexmit_fast+0x1c>
 800b622:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <tcp_rexmit_fast+0xb8>)
 800b624:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b628:	4929      	ldr	r1, [pc, #164]	; (800b6d0 <tcp_rexmit_fast+0xbc>)
 800b62a:	482a      	ldr	r0, [pc, #168]	; (800b6d4 <tcp_rexmit_fast+0xc0>)
 800b62c:	f003 fdc8 	bl	800f1c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b634:	2b00      	cmp	r3, #0
 800b636:	d045      	beq.n	800b6c4 <tcp_rexmit_fast+0xb0>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	8b5b      	ldrh	r3, [r3, #26]
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d13f      	bne.n	800b6c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff79 	bl	800b53c <tcp_rexmit>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d139      	bne.n	800b6c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b65c:	4293      	cmp	r3, r2
 800b65e:	bf28      	it	cs
 800b660:	4613      	movcs	r3, r2
 800b662:	b29b      	uxth	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	da00      	bge.n	800b66a <tcp_rexmit_fast+0x56>
 800b668:	3301      	adds	r3, #1
 800b66a:	105b      	asrs	r3, r3, #1
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b67a:	461a      	mov	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b680:	005b      	lsls	r3, r3, #1
 800b682:	429a      	cmp	r2, r3
 800b684:	d206      	bcs.n	800b694 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b68a:	005b      	lsls	r3, r3, #1
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b69e:	4619      	mov	r1, r3
 800b6a0:	0049      	lsls	r1, r1, #1
 800b6a2:	440b      	add	r3, r1
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	8b5b      	ldrh	r3, [r3, #26]
 800b6b4:	f043 0304 	orr.w	r3, r3, #4
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	08011cac 	.word	0x08011cac
 800b6d0:	08012364 	.word	0x08012364
 800b6d4:	08011d00 	.word	0x08011d00

0800b6d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	607b      	str	r3, [r7, #4]
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	817b      	strh	r3, [r7, #10]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b6ea:	897a      	ldrh	r2, [r7, #10]
 800b6ec:	893b      	ldrh	r3, [r7, #8]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	3314      	adds	r3, #20
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	2022      	movs	r0, #34	; 0x22
 800b6fe:	f7fa fb77 	bl	8005df0 <pbuf_alloc>
 800b702:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d04d      	beq.n	800b7a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b70a:	897b      	ldrh	r3, [r7, #10]
 800b70c:	3313      	adds	r3, #19
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	8952      	ldrh	r2, [r2, #10]
 800b712:	4293      	cmp	r3, r2
 800b714:	db06      	blt.n	800b724 <tcp_output_alloc_header_common+0x4c>
 800b716:	4b26      	ldr	r3, [pc, #152]	; (800b7b0 <tcp_output_alloc_header_common+0xd8>)
 800b718:	f240 7223 	movw	r2, #1827	; 0x723
 800b71c:	4925      	ldr	r1, [pc, #148]	; (800b7b4 <tcp_output_alloc_header_common+0xdc>)
 800b71e:	4826      	ldr	r0, [pc, #152]	; (800b7b8 <tcp_output_alloc_header_common+0xe0>)
 800b720:	f003 fd4e 	bl	800f1c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b72a:	8c3b      	ldrh	r3, [r7, #32]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f9 fb8f 	bl	8004e50 <lwip_htons>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f9 fb87 	bl	8004e50 <lwip_htons>
 800b742:	4603      	mov	r3, r0
 800b744:	461a      	mov	r2, r3
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7f9 fb92 	bl	8004e7a <lwip_htonl>
 800b756:	4602      	mov	r2, r0
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b75c:	897b      	ldrh	r3, [r7, #10]
 800b75e:	089b      	lsrs	r3, r3, #2
 800b760:	b29b      	uxth	r3, r3
 800b762:	3305      	adds	r3, #5
 800b764:	b29b      	uxth	r3, r3
 800b766:	031b      	lsls	r3, r3, #12
 800b768:	b29a      	uxth	r2, r3
 800b76a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b76e:	b29b      	uxth	r3, r3
 800b770:	4313      	orrs	r3, r2
 800b772:	b29b      	uxth	r3, r3
 800b774:	4618      	mov	r0, r3
 800b776:	f7f9 fb6b 	bl	8004e50 <lwip_htons>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b782:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b784:	4618      	mov	r0, r3
 800b786:	f7f9 fb63 	bl	8004e50 <lwip_htons>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2200      	movs	r2, #0
 800b796:	741a      	strb	r2, [r3, #16]
 800b798:	2200      	movs	r2, #0
 800b79a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	749a      	strb	r2, [r3, #18]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b7a6:	697b      	ldr	r3, [r7, #20]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	08011cac 	.word	0x08011cac
 800b7b4:	08012384 	.word	0x08012384
 800b7b8:	08011d00 	.word	0x08011d00

0800b7bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b7bc:	b5b0      	push	{r4, r5, r7, lr}
 800b7be:	b08a      	sub	sp, #40	; 0x28
 800b7c0:	af04      	add	r7, sp, #16
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	607b      	str	r3, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	817b      	strh	r3, [r7, #10]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <tcp_output_alloc_header+0x26>
 800b7d4:	4b15      	ldr	r3, [pc, #84]	; (800b82c <tcp_output_alloc_header+0x70>)
 800b7d6:	f240 7242 	movw	r2, #1858	; 0x742
 800b7da:	4915      	ldr	r1, [pc, #84]	; (800b830 <tcp_output_alloc_header+0x74>)
 800b7dc:	4815      	ldr	r0, [pc, #84]	; (800b834 <tcp_output_alloc_header+0x78>)
 800b7de:	f003 fcef 	bl	800f1c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8adb      	ldrh	r3, [r3, #22]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	8b12      	ldrh	r2, [r2, #24]
 800b7ee:	68f9      	ldr	r1, [r7, #12]
 800b7f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b7f2:	893d      	ldrh	r5, [r7, #8]
 800b7f4:	897c      	ldrh	r4, [r7, #10]
 800b7f6:	9103      	str	r1, [sp, #12]
 800b7f8:	2110      	movs	r1, #16
 800b7fa:	9102      	str	r1, [sp, #8]
 800b7fc:	9201      	str	r2, [sp, #4]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	462a      	mov	r2, r5
 800b804:	4621      	mov	r1, r4
 800b806:	f7ff ff67 	bl	800b6d8 <tcp_output_alloc_header_common>
 800b80a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d006      	beq.n	800b820 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b81a:	441a      	add	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b820:	697b      	ldr	r3, [r7, #20]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bdb0      	pop	{r4, r5, r7, pc}
 800b82a:	bf00      	nop
 800b82c:	08011cac 	.word	0x08011cac
 800b830:	080123b4 	.word	0x080123b4
 800b834:	08011d00 	.word	0x08011d00

0800b838 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4611      	mov	r1, r2
 800b844:	461a      	mov	r2, r3
 800b846:	460b      	mov	r3, r1
 800b848:	71fb      	strb	r3, [r7, #7]
 800b84a:	4613      	mov	r3, r2
 800b84c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <tcp_output_fill_options+0x2e>
 800b858:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <tcp_output_fill_options+0x70>)
 800b85a:	f240 7256 	movw	r2, #1878	; 0x756
 800b85e:	4913      	ldr	r1, [pc, #76]	; (800b8ac <tcp_output_fill_options+0x74>)
 800b860:	4813      	ldr	r0, [pc, #76]	; (800b8b0 <tcp_output_fill_options+0x78>)
 800b862:	f003 fcad 	bl	800f1c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	3314      	adds	r3, #20
 800b870:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	f103 0214 	add.w	r2, r3, #20
 800b878:	8bfb      	ldrh	r3, [r7, #30]
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4619      	mov	r1, r3
 800b87e:	79fb      	ldrb	r3, [r7, #7]
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	f003 0304 	and.w	r3, r3, #4
 800b886:	440b      	add	r3, r1
 800b888:	4413      	add	r3, r2
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d006      	beq.n	800b89e <tcp_output_fill_options+0x66>
 800b890:	4b05      	ldr	r3, [pc, #20]	; (800b8a8 <tcp_output_fill_options+0x70>)
 800b892:	f240 7275 	movw	r2, #1909	; 0x775
 800b896:	4907      	ldr	r1, [pc, #28]	; (800b8b4 <tcp_output_fill_options+0x7c>)
 800b898:	4805      	ldr	r0, [pc, #20]	; (800b8b0 <tcp_output_fill_options+0x78>)
 800b89a:	f003 fc91 	bl	800f1c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b89e:	bf00      	nop
 800b8a0:	3720      	adds	r7, #32
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	08011cac 	.word	0x08011cac
 800b8ac:	080123dc 	.word	0x080123dc
 800b8b0:	08011d00 	.word	0x08011d00
 800b8b4:	080122d4 	.word	0x080122d4

0800b8b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08a      	sub	sp, #40	; 0x28
 800b8bc:	af04      	add	r7, sp, #16
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <tcp_output_control_segment+0x22>
 800b8cc:	4b1c      	ldr	r3, [pc, #112]	; (800b940 <tcp_output_control_segment+0x88>)
 800b8ce:	f240 7287 	movw	r2, #1927	; 0x787
 800b8d2:	491c      	ldr	r1, [pc, #112]	; (800b944 <tcp_output_control_segment+0x8c>)
 800b8d4:	481c      	ldr	r0, [pc, #112]	; (800b948 <tcp_output_control_segment+0x90>)
 800b8d6:	f003 fc73 	bl	800f1c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7fe ff40 	bl	800a764 <tcp_route>
 800b8e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d102      	bne.n	800b8f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b8ec:	23fc      	movs	r3, #252	; 0xfc
 800b8ee:	75fb      	strb	r3, [r7, #23]
 800b8f0:	e01c      	b.n	800b92c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d006      	beq.n	800b906 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	7adb      	ldrb	r3, [r3, #11]
 800b8fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	7a9b      	ldrb	r3, [r3, #10]
 800b902:	757b      	strb	r3, [r7, #21]
 800b904:	e003      	b.n	800b90e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b906:	23ff      	movs	r3, #255	; 0xff
 800b908:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b90e:	7dba      	ldrb	r2, [r7, #22]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	2306      	movs	r3, #6
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	7d7b      	ldrb	r3, [r7, #21]
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	4613      	mov	r3, r2
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	68b8      	ldr	r0, [r7, #8]
 800b924:	f002 fb2a 	bl	800df7c <ip4_output_if>
 800b928:	4603      	mov	r3, r0
 800b92a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b92c:	68b8      	ldr	r0, [r7, #8]
 800b92e:	f7fa fd43 	bl	80063b8 <pbuf_free>
  return err;
 800b932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	08011cac 	.word	0x08011cac
 800b944:	08012404 	.word	0x08012404
 800b948:	08011d00 	.word	0x08011d00

0800b94c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b08b      	sub	sp, #44	; 0x2c
 800b950:	af04      	add	r7, sp, #16
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <tcp_rst+0x22>
 800b960:	4b1f      	ldr	r3, [pc, #124]	; (800b9e0 <tcp_rst+0x94>)
 800b962:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b966:	491f      	ldr	r1, [pc, #124]	; (800b9e4 <tcp_rst+0x98>)
 800b968:	481f      	ldr	r0, [pc, #124]	; (800b9e8 <tcp_rst+0x9c>)
 800b96a:	f003 fc29 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	2b00      	cmp	r3, #0
 800b972:	d106      	bne.n	800b982 <tcp_rst+0x36>
 800b974:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <tcp_rst+0x94>)
 800b976:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b97a:	491c      	ldr	r1, [pc, #112]	; (800b9ec <tcp_rst+0xa0>)
 800b97c:	481a      	ldr	r0, [pc, #104]	; (800b9e8 <tcp_rst+0x9c>)
 800b97e:	f003 fc1f 	bl	800f1c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b982:	2300      	movs	r3, #0
 800b984:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b986:	f246 0308 	movw	r3, #24584	; 0x6008
 800b98a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	b29c      	uxth	r4, r3
 800b990:	68b8      	ldr	r0, [r7, #8]
 800b992:	f7f9 fa72 	bl	8004e7a <lwip_htonl>
 800b996:	4602      	mov	r2, r0
 800b998:	8abb      	ldrh	r3, [r7, #20]
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	2314      	movs	r3, #20
 800b99e:	9302      	str	r3, [sp, #8]
 800b9a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fe92 	bl	800b6d8 <tcp_output_alloc_header_common>
 800b9b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00c      	beq.n	800b9d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	6939      	ldr	r1, [r7, #16]
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f7ff ff38 	bl	800b838 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	6939      	ldr	r1, [r7, #16]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7ff ff72 	bl	800b8b8 <tcp_output_control_segment>
 800b9d4:	e000      	b.n	800b9d8 <tcp_rst+0x8c>
    return;
 800b9d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b9d8:	371c      	adds	r7, #28
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd90      	pop	{r4, r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	08011cac 	.word	0x08011cac
 800b9e4:	08012430 	.word	0x08012430
 800b9e8:	08011d00 	.word	0x08011d00
 800b9ec:	0801244c 	.word	0x0801244c

0800b9f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b9f0:	b590      	push	{r4, r7, lr}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <tcp_send_empty_ack+0x24>
 800ba06:	4b28      	ldr	r3, [pc, #160]	; (800baa8 <tcp_send_empty_ack+0xb8>)
 800ba08:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ba0c:	4927      	ldr	r1, [pc, #156]	; (800baac <tcp_send_empty_ack+0xbc>)
 800ba0e:	4828      	ldr	r0, [pc, #160]	; (800bab0 <tcp_send_empty_ack+0xc0>)
 800ba10:	f003 fbd6 	bl	800f1c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	f003 0304 	and.w	r3, r3, #4
 800ba1e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ba20:	7d7b      	ldrb	r3, [r7, #21]
 800ba22:	b29c      	uxth	r4, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7f9 fa26 	bl	8004e7a <lwip_htonl>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2200      	movs	r2, #0
 800ba32:	4621      	mov	r1, r4
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff fec1 	bl	800b7bc <tcp_output_alloc_header>
 800ba3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d109      	bne.n	800ba56 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	8b5b      	ldrh	r3, [r3, #26]
 800ba46:	f043 0303 	orr.w	r3, r3, #3
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ba50:	f06f 0301 	mvn.w	r3, #1
 800ba54:	e023      	b.n	800ba9e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
 800ba58:	7dfa      	ldrb	r2, [r7, #23]
 800ba5a:	6939      	ldr	r1, [r7, #16]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff feeb 	bl	800b838 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3304      	adds	r3, #4
 800ba68:	6939      	ldr	r1, [r7, #16]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7ff ff24 	bl	800b8b8 <tcp_output_control_segment>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ba74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d007      	beq.n	800ba8c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	8b5b      	ldrh	r3, [r3, #26]
 800ba80:	f043 0303 	orr.w	r3, r3, #3
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	835a      	strh	r2, [r3, #26]
 800ba8a:	e006      	b.n	800ba9a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8b5b      	ldrh	r3, [r3, #26]
 800ba90:	f023 0303 	bic.w	r3, r3, #3
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ba9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	371c      	adds	r7, #28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd90      	pop	{r4, r7, pc}
 800baa6:	bf00      	nop
 800baa8:	08011cac 	.word	0x08011cac
 800baac:	08012468 	.word	0x08012468
 800bab0:	08011d00 	.word	0x08011d00

0800bab4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bab4:	b590      	push	{r4, r7, lr}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800babc:	2300      	movs	r3, #0
 800babe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d106      	bne.n	800bad4 <tcp_keepalive+0x20>
 800bac6:	4b18      	ldr	r3, [pc, #96]	; (800bb28 <tcp_keepalive+0x74>)
 800bac8:	f640 0224 	movw	r2, #2084	; 0x824
 800bacc:	4917      	ldr	r1, [pc, #92]	; (800bb2c <tcp_keepalive+0x78>)
 800bace:	4818      	ldr	r0, [pc, #96]	; (800bb30 <tcp_keepalive+0x7c>)
 800bad0:	f003 fb76 	bl	800f1c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
 800bad6:	b29c      	uxth	r4, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800badc:	3b01      	subs	r3, #1
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f9 f9cb 	bl	8004e7a <lwip_htonl>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2200      	movs	r2, #0
 800bae8:	4621      	mov	r1, r4
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff fe66 	bl	800b7bc <tcp_output_alloc_header>
 800baf0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800baf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bafc:	e010      	b.n	800bb20 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	2200      	movs	r2, #0
 800bb02:	6939      	ldr	r1, [r7, #16]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff fe97 	bl	800b838 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	6939      	ldr	r1, [r7, #16]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fed0 	bl	800b8b8 <tcp_output_control_segment>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	371c      	adds	r7, #28
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd90      	pop	{r4, r7, pc}
 800bb28:	08011cac 	.word	0x08011cac
 800bb2c:	08012488 	.word	0x08012488
 800bb30:	08011d00 	.word	0x08011d00

0800bb34 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bb34:	b590      	push	{r4, r7, lr}
 800bb36:	b08b      	sub	sp, #44	; 0x2c
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d106      	bne.n	800bb56 <tcp_zero_window_probe+0x22>
 800bb48:	4b4c      	ldr	r3, [pc, #304]	; (800bc7c <tcp_zero_window_probe+0x148>)
 800bb4a:	f640 024f 	movw	r2, #2127	; 0x84f
 800bb4e:	494c      	ldr	r1, [pc, #304]	; (800bc80 <tcp_zero_window_probe+0x14c>)
 800bb50:	484c      	ldr	r0, [pc, #304]	; (800bc84 <tcp_zero_window_probe+0x150>)
 800bb52:	f003 fb35 	bl	800f1c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb5a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	e086      	b.n	800bc74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bb6c:	2bff      	cmp	r3, #255	; 0xff
 800bb6e:	d007      	beq.n	800bb80 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bb76:	3301      	adds	r3, #1
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	899b      	ldrh	r3, [r3, #12]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f9 f961 	bl	8004e50 <lwip_htons>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d005      	beq.n	800bba6 <tcp_zero_window_probe+0x72>
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	891b      	ldrh	r3, [r3, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d101      	bne.n	800bba6 <tcp_zero_window_probe+0x72>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e000      	b.n	800bba8 <tcp_zero_window_probe+0x74>
 800bba6:	2300      	movs	r3, #0
 800bba8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bbaa:	7ffb      	ldrb	r3, [r7, #31]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bf0c      	ite	eq
 800bbb0:	2301      	moveq	r3, #1
 800bbb2:	2300      	movne	r3, #0
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bbb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbbc:	b299      	uxth	r1, r3
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	8bba      	ldrh	r2, [r7, #28]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff fdf8 	bl	800b7bc <tcp_output_alloc_header>
 800bbcc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd8:	e04c      	b.n	800bc74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bbe0:	7ffb      	ldrb	r3, [r7, #31]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d011      	beq.n	800bc0a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	899b      	ldrh	r3, [r3, #12]
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	b21b      	sxth	r3, r3
 800bbee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbf2:	b21c      	sxth	r4, r3
 800bbf4:	2011      	movs	r0, #17
 800bbf6:	f7f9 f92b 	bl	8004e50 <lwip_htons>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	b21b      	sxth	r3, r3
 800bbfe:	4323      	orrs	r3, r4
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	819a      	strh	r2, [r3, #12]
 800bc08:	e010      	b.n	800bc2c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	3314      	adds	r3, #20
 800bc10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	6858      	ldr	r0, [r3, #4]
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	891a      	ldrh	r2, [r3, #8]
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
 800bc1e:	891b      	ldrh	r3, [r3, #8]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	2201      	movs	r2, #1
 800bc26:	6939      	ldr	r1, [r7, #16]
 800bc28:	f7fa fdc0 	bl	80067ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f9 f921 	bl	8004e7a <lwip_htonl>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	da02      	bge.n	800bc50 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc54:	2200      	movs	r2, #0
 800bc56:	69b9      	ldr	r1, [r7, #24]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fded 	bl	800b838 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3304      	adds	r3, #4
 800bc64:	69b9      	ldr	r1, [r7, #24]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7ff fe26 	bl	800b8b8 <tcp_output_control_segment>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bc70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	372c      	adds	r7, #44	; 0x2c
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd90      	pop	{r4, r7, pc}
 800bc7c:	08011cac 	.word	0x08011cac
 800bc80:	080124a4 	.word	0x080124a4
 800bc84:	08011d00 	.word	0x08011d00

0800bc88 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bc90:	f7fa ff0c 	bl	8006aac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bc94:	4b0a      	ldr	r3, [pc, #40]	; (800bcc0 <tcpip_tcp_timer+0x38>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d103      	bne.n	800bca4 <tcpip_tcp_timer+0x1c>
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <tcpip_tcp_timer+0x3c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d005      	beq.n	800bcb0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bca4:	2200      	movs	r2, #0
 800bca6:	4908      	ldr	r1, [pc, #32]	; (800bcc8 <tcpip_tcp_timer+0x40>)
 800bca8:	20fa      	movs	r0, #250	; 0xfa
 800bcaa:	f000 f8f3 	bl	800be94 <sys_timeout>
 800bcae:	e003      	b.n	800bcb8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bcb0:	4b06      	ldr	r3, [pc, #24]	; (800bccc <tcpip_tcp_timer+0x44>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20008990 	.word	0x20008990
 800bcc4:	20008994 	.word	0x20008994
 800bcc8:	0800bc89 	.word	0x0800bc89
 800bccc:	200089dc 	.word	0x200089dc

0800bcd0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <tcp_timer_needed+0x30>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10f      	bne.n	800bcfc <tcp_timer_needed+0x2c>
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <tcp_timer_needed+0x34>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d103      	bne.n	800bcec <tcp_timer_needed+0x1c>
 800bce4:	4b08      	ldr	r3, [pc, #32]	; (800bd08 <tcp_timer_needed+0x38>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d007      	beq.n	800bcfc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bcec:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <tcp_timer_needed+0x30>)
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4905      	ldr	r1, [pc, #20]	; (800bd0c <tcp_timer_needed+0x3c>)
 800bcf6:	20fa      	movs	r0, #250	; 0xfa
 800bcf8:	f000 f8cc 	bl	800be94 <sys_timeout>
  }
}
 800bcfc:	bf00      	nop
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	200089dc 	.word	0x200089dc
 800bd04:	20008990 	.word	0x20008990
 800bd08:	20008994 	.word	0x20008994
 800bd0c:	0800bc89 	.word	0x0800bc89

0800bd10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bd1c:	2006      	movs	r0, #6
 800bd1e:	f7f9 fced 	bl	80056fc <memp_malloc>
 800bd22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d109      	bne.n	800bd3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d151      	bne.n	800bdd4 <sys_timeout_abs+0xc4>
 800bd30:	4b2a      	ldr	r3, [pc, #168]	; (800bddc <sys_timeout_abs+0xcc>)
 800bd32:	22be      	movs	r2, #190	; 0xbe
 800bd34:	492a      	ldr	r1, [pc, #168]	; (800bde0 <sys_timeout_abs+0xd0>)
 800bd36:	482b      	ldr	r0, [pc, #172]	; (800bde4 <sys_timeout_abs+0xd4>)
 800bd38:	f003 fa42 	bl	800f1c0 <iprintf>
    return;
 800bd3c:	e04a      	b.n	800bdd4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bd56:	4b24      	ldr	r3, [pc, #144]	; (800bde8 <sys_timeout_abs+0xd8>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d103      	bne.n	800bd66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bd5e:	4a22      	ldr	r2, [pc, #136]	; (800bde8 <sys_timeout_abs+0xd8>)
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	6013      	str	r3, [r2, #0]
    return;
 800bd64:	e037      	b.n	800bdd6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	4b1f      	ldr	r3, [pc, #124]	; (800bde8 <sys_timeout_abs+0xd8>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	0fdb      	lsrs	r3, r3, #31
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d007      	beq.n	800bd8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bd7e:	4b1a      	ldr	r3, [pc, #104]	; (800bde8 <sys_timeout_abs+0xd8>)
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bd86:	4a18      	ldr	r2, [pc, #96]	; (800bde8 <sys_timeout_abs+0xd8>)
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	6013      	str	r3, [r2, #0]
 800bd8c:	e023      	b.n	800bdd6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bd8e:	4b16      	ldr	r3, [pc, #88]	; (800bde8 <sys_timeout_abs+0xd8>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	e01a      	b.n	800bdcc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <sys_timeout_abs+0xa6>
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	0fdb      	lsrs	r3, r3, #31
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d007      	beq.n	800bdc6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	693a      	ldr	r2, [r7, #16]
 800bdc2:	601a      	str	r2, [r3, #0]
        break;
 800bdc4:	e007      	b.n	800bdd6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e1      	bne.n	800bd96 <sys_timeout_abs+0x86>
 800bdd2:	e000      	b.n	800bdd6 <sys_timeout_abs+0xc6>
    return;
 800bdd4:	bf00      	nop
      }
    }
  }
}
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	080124c8 	.word	0x080124c8
 800bde0:	080124fc 	.word	0x080124fc
 800bde4:	0801253c 	.word	0x0801253c
 800bde8:	200089d4 	.word	0x200089d4

0800bdec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	4798      	blx	r3

  now = sys_now();
 800bdfe:	f7f8 ff99 	bl	8004d34 <sys_now>
 800be02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	4b0f      	ldr	r3, [pc, #60]	; (800be48 <lwip_cyclic_timer+0x5c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4413      	add	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	0fdb      	lsrs	r3, r3, #31
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d009      	beq.n	800be36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	4413      	add	r3, r2
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	4907      	ldr	r1, [pc, #28]	; (800be4c <lwip_cyclic_timer+0x60>)
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff ff6e 	bl	800bd10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800be34:	e004      	b.n	800be40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	4904      	ldr	r1, [pc, #16]	; (800be4c <lwip_cyclic_timer+0x60>)
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff ff68 	bl	800bd10 <sys_timeout_abs>
}
 800be40:	bf00      	nop
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	200089d8 	.word	0x200089d8
 800be4c:	0800bded 	.word	0x0800bded

0800be50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be56:	2301      	movs	r3, #1
 800be58:	607b      	str	r3, [r7, #4]
 800be5a:	e00e      	b.n	800be7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800be5c:	4a0b      	ldr	r2, [pc, #44]	; (800be8c <sys_timeouts_init+0x3c>)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	4a08      	ldr	r2, [pc, #32]	; (800be8c <sys_timeouts_init+0x3c>)
 800be6a:	4413      	add	r3, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	4908      	ldr	r1, [pc, #32]	; (800be90 <sys_timeouts_init+0x40>)
 800be70:	f000 f810 	bl	800be94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3301      	adds	r3, #1
 800be78:	607b      	str	r3, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d9ed      	bls.n	800be5c <sys_timeouts_init+0xc>
  }
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	080130a8 	.word	0x080130a8
 800be90:	0800bded 	.word	0x0800bded

0800be94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea6:	d306      	bcc.n	800beb6 <sys_timeout+0x22>
 800bea8:	4b0a      	ldr	r3, [pc, #40]	; (800bed4 <sys_timeout+0x40>)
 800beaa:	f240 1229 	movw	r2, #297	; 0x129
 800beae:	490a      	ldr	r1, [pc, #40]	; (800bed8 <sys_timeout+0x44>)
 800beb0:	480a      	ldr	r0, [pc, #40]	; (800bedc <sys_timeout+0x48>)
 800beb2:	f003 f985 	bl	800f1c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800beb6:	f7f8 ff3d 	bl	8004d34 <sys_now>
 800beba:	4602      	mov	r2, r0
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4413      	add	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	6978      	ldr	r0, [r7, #20]
 800bec8:	f7ff ff22 	bl	800bd10 <sys_timeout_abs>
#endif
}
 800becc:	bf00      	nop
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	080124c8 	.word	0x080124c8
 800bed8:	08012564 	.word	0x08012564
 800bedc:	0801253c 	.word	0x0801253c

0800bee0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bee6:	f7f8 ff25 	bl	8004d34 <sys_now>
 800beea:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800beec:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <sys_check_timeouts+0x78>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <sys_check_timeouts+0x1a>
 800bef6:	f7f9 ff25 	bl	8005d44 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800befa:	4b18      	ldr	r3, [pc, #96]	; (800bf5c <sys_check_timeouts+0x7c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d022      	beq.n	800bf4c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	0fdb      	lsrs	r3, r3, #31
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d11a      	bne.n	800bf50 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a0f      	ldr	r2, [pc, #60]	; (800bf5c <sys_check_timeouts+0x7c>)
 800bf20:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	4a0b      	ldr	r2, [pc, #44]	; (800bf60 <sys_check_timeouts+0x80>)
 800bf34:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	2006      	movs	r0, #6
 800bf3a:	f7f9 fc2b 	bl	8005794 <memp_free>
    if (handler != NULL) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0d3      	beq.n	800beec <sys_check_timeouts+0xc>
      handler(arg);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6838      	ldr	r0, [r7, #0]
 800bf48:	4798      	blx	r3
  do {
 800bf4a:	e7cf      	b.n	800beec <sys_check_timeouts+0xc>
      return;
 800bf4c:	bf00      	nop
 800bf4e:	e000      	b.n	800bf52 <sys_check_timeouts+0x72>
      return;
 800bf50:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20008981 	.word	0x20008981
 800bf5c:	200089d4 	.word	0x200089d4
 800bf60:	200089d8 	.word	0x200089d8

0800bf64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf68:	f003 f942 	bl	800f1f0 <rand>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	4b01      	ldr	r3, [pc, #4]	; (800bf84 <udp_init+0x20>)
 800bf7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf80:	bf00      	nop
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	20000010 	.word	0x20000010

0800bf88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bf92:	4b17      	ldr	r3, [pc, #92]	; (800bff0 <udp_new_port+0x68>)
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	b291      	uxth	r1, r2
 800bf9a:	4a15      	ldr	r2, [pc, #84]	; (800bff0 <udp_new_port+0x68>)
 800bf9c:	8011      	strh	r1, [r2, #0]
 800bf9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d103      	bne.n	800bfae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bfa6:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <udp_new_port+0x68>)
 800bfa8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bfac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfae:	4b11      	ldr	r3, [pc, #68]	; (800bff4 <udp_new_port+0x6c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	e011      	b.n	800bfda <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	8a5a      	ldrh	r2, [r3, #18]
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <udp_new_port+0x68>)
 800bfbc:	881b      	ldrh	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d108      	bne.n	800bfd4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	80fb      	strh	r3, [r7, #6]
 800bfc8:	88fb      	ldrh	r3, [r7, #6]
 800bfca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfce:	d3e0      	bcc.n	800bf92 <udp_new_port+0xa>
        return 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e007      	b.n	800bfe4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	603b      	str	r3, [r7, #0]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1ea      	bne.n	800bfb6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bfe0:	4b03      	ldr	r3, [pc, #12]	; (800bff0 <udp_new_port+0x68>)
 800bfe2:	881b      	ldrh	r3, [r3, #0]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	20000010 	.word	0x20000010
 800bff4:	200089e0 	.word	0x200089e0

0800bff8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <udp_input_local_match+0x20>
 800c00c:	4b27      	ldr	r3, [pc, #156]	; (800c0ac <udp_input_local_match+0xb4>)
 800c00e:	2287      	movs	r2, #135	; 0x87
 800c010:	4927      	ldr	r1, [pc, #156]	; (800c0b0 <udp_input_local_match+0xb8>)
 800c012:	4828      	ldr	r0, [pc, #160]	; (800c0b4 <udp_input_local_match+0xbc>)
 800c014:	f003 f8d4 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d105      	bne.n	800c02a <udp_input_local_match+0x32>
 800c01e:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <udp_input_local_match+0xb4>)
 800c020:	2288      	movs	r2, #136	; 0x88
 800c022:	4925      	ldr	r1, [pc, #148]	; (800c0b8 <udp_input_local_match+0xc0>)
 800c024:	4823      	ldr	r0, [pc, #140]	; (800c0b4 <udp_input_local_match+0xbc>)
 800c026:	f003 f8cb 	bl	800f1c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	7a1b      	ldrb	r3, [r3, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00b      	beq.n	800c04a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	7a1a      	ldrb	r2, [r3, #8]
 800c036:	4b21      	ldr	r3, [pc, #132]	; (800c0bc <udp_input_local_match+0xc4>)
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c03e:	3301      	adds	r3, #1
 800c040:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c042:	429a      	cmp	r2, r3
 800c044:	d001      	beq.n	800c04a <udp_input_local_match+0x52>
    return 0;
 800c046:	2300      	movs	r3, #0
 800c048:	e02b      	b.n	800c0a2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d018      	beq.n	800c082 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d013      	beq.n	800c07e <udp_input_local_match+0x86>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00f      	beq.n	800c07e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c05e:	4b17      	ldr	r3, [pc, #92]	; (800c0bc <udp_input_local_match+0xc4>)
 800c060:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c066:	d00a      	beq.n	800c07e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	4b13      	ldr	r3, [pc, #76]	; (800c0bc <udp_input_local_match+0xc4>)
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	405a      	eors	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	3308      	adds	r3, #8
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d110      	bne.n	800c0a0 <udp_input_local_match+0xa8>
          return 1;
 800c07e:	2301      	movs	r3, #1
 800c080:	e00f      	b.n	800c0a2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <udp_input_local_match+0xa4>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d005      	beq.n	800c09c <udp_input_local_match+0xa4>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <udp_input_local_match+0xc4>)
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d101      	bne.n	800c0a0 <udp_input_local_match+0xa8>
        return 1;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e000      	b.n	800c0a2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	080125b0 	.word	0x080125b0
 800c0b0:	080125e0 	.word	0x080125e0
 800c0b4:	08012604 	.word	0x08012604
 800c0b8:	0801262c 	.word	0x0801262c
 800c0bc:	20003254 	.word	0x20003254

0800c0c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b08d      	sub	sp, #52	; 0x34
 800c0c4:	af02      	add	r7, sp, #8
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d105      	bne.n	800c0e0 <udp_input+0x20>
 800c0d4:	4b7c      	ldr	r3, [pc, #496]	; (800c2c8 <udp_input+0x208>)
 800c0d6:	22cf      	movs	r2, #207	; 0xcf
 800c0d8:	497c      	ldr	r1, [pc, #496]	; (800c2cc <udp_input+0x20c>)
 800c0da:	487d      	ldr	r0, [pc, #500]	; (800c2d0 <udp_input+0x210>)
 800c0dc:	f003 f870 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d105      	bne.n	800c0f2 <udp_input+0x32>
 800c0e6:	4b78      	ldr	r3, [pc, #480]	; (800c2c8 <udp_input+0x208>)
 800c0e8:	22d0      	movs	r2, #208	; 0xd0
 800c0ea:	497a      	ldr	r1, [pc, #488]	; (800c2d4 <udp_input+0x214>)
 800c0ec:	4878      	ldr	r0, [pc, #480]	; (800c2d0 <udp_input+0x210>)
 800c0ee:	f003 f867 	bl	800f1c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	895b      	ldrh	r3, [r3, #10]
 800c0f6:	2b07      	cmp	r3, #7
 800c0f8:	d803      	bhi.n	800c102 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7fa f95c 	bl	80063b8 <pbuf_free>
    goto end;
 800c100:	e0de      	b.n	800c2c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c108:	4b73      	ldr	r3, [pc, #460]	; (800c2d8 <udp_input+0x218>)
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	4a72      	ldr	r2, [pc, #456]	; (800c2d8 <udp_input+0x218>)
 800c10e:	6812      	ldr	r2, [r2, #0]
 800c110:	4611      	mov	r1, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f002 f80a 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800c118:	4603      	mov	r3, r0
 800c11a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	b29b      	uxth	r3, r3
 800c122:	4618      	mov	r0, r3
 800c124:	f7f8 fe94 	bl	8004e50 <lwip_htons>
 800c128:	4603      	mov	r3, r0
 800c12a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	885b      	ldrh	r3, [r3, #2]
 800c130:	b29b      	uxth	r3, r3
 800c132:	4618      	mov	r0, r3
 800c134:	f7f8 fe8c 	bl	8004e50 <lwip_htons>
 800c138:	4603      	mov	r3, r0
 800c13a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c140:	2300      	movs	r3, #0
 800c142:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c144:	2300      	movs	r3, #0
 800c146:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c148:	4b64      	ldr	r3, [pc, #400]	; (800c2dc <udp_input+0x21c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	627b      	str	r3, [r7, #36]	; 0x24
 800c14e:	e054      	b.n	800c1fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	8a5b      	ldrh	r3, [r3, #18]
 800c154:	89fa      	ldrh	r2, [r7, #14]
 800c156:	429a      	cmp	r2, r3
 800c158:	d14a      	bne.n	800c1f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c15a:	7cfb      	ldrb	r3, [r7, #19]
 800c15c:	461a      	mov	r2, r3
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c162:	f7ff ff49 	bl	800bff8 <udp_input_local_match>
 800c166:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d041      	beq.n	800c1f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	7c1b      	ldrb	r3, [r3, #16]
 800c170:	f003 0304 	and.w	r3, r3, #4
 800c174:	2b00      	cmp	r3, #0
 800c176:	d11d      	bne.n	800c1b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d102      	bne.n	800c184 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	61fb      	str	r3, [r7, #28]
 800c182:	e017      	b.n	800c1b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c184:	7cfb      	ldrb	r3, [r7, #19]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d014      	beq.n	800c1b4 <udp_input+0xf4>
 800c18a:	4b53      	ldr	r3, [pc, #332]	; (800c2d8 <udp_input+0x218>)
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d10f      	bne.n	800c1b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	3304      	adds	r3, #4
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d008      	beq.n	800c1b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d101      	bne.n	800c1b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	8a9b      	ldrh	r3, [r3, #20]
 800c1b8:	8a3a      	ldrh	r2, [r7, #16]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d118      	bne.n	800c1f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d005      	beq.n	800c1d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	4b43      	ldr	r3, [pc, #268]	; (800c2d8 <udp_input+0x218>)
 800c1cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d10e      	bne.n	800c1f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d014      	beq.n	800c202 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	68da      	ldr	r2, [r3, #12]
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c1e0:	4b3e      	ldr	r3, [pc, #248]	; (800c2dc <udp_input+0x21c>)
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c1e8:	4a3c      	ldr	r2, [pc, #240]	; (800c2dc <udp_input+0x21c>)
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c1ee:	e008      	b.n	800c202 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1a7      	bne.n	800c150 <udp_input+0x90>
 800c200:	e000      	b.n	800c204 <udp_input+0x144>
        break;
 800c202:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <udp_input+0x14e>
    pcb = uncon_pcb;
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <udp_input+0x15a>
    for_us = 1;
 800c214:	2301      	movs	r3, #1
 800c216:	76fb      	strb	r3, [r7, #27]
 800c218:	e00a      	b.n	800c230 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	3304      	adds	r3, #4
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	4b2d      	ldr	r3, [pc, #180]	; (800c2d8 <udp_input+0x218>)
 800c222:	695b      	ldr	r3, [r3, #20]
 800c224:	429a      	cmp	r2, r3
 800c226:	bf0c      	ite	eq
 800c228:	2301      	moveq	r3, #1
 800c22a:	2300      	movne	r3, #0
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c230:	7efb      	ldrb	r3, [r7, #27]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d041      	beq.n	800c2ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c236:	2108      	movs	r1, #8
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7fa f837 	bl	80062ac <pbuf_remove_header>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00a      	beq.n	800c25a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c244:	4b20      	ldr	r3, [pc, #128]	; (800c2c8 <udp_input+0x208>)
 800c246:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c24a:	4925      	ldr	r1, [pc, #148]	; (800c2e0 <udp_input+0x220>)
 800c24c:	4820      	ldr	r0, [pc, #128]	; (800c2d0 <udp_input+0x210>)
 800c24e:	f002 ffb7 	bl	800f1c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7fa f8b0 	bl	80063b8 <pbuf_free>
      goto end;
 800c258:	e032      	b.n	800c2c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d012      	beq.n	800c286 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00a      	beq.n	800c27e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	699c      	ldr	r4, [r3, #24]
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	69d8      	ldr	r0, [r3, #28]
 800c270:	8a3b      	ldrh	r3, [r7, #16]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	4b1b      	ldr	r3, [pc, #108]	; (800c2e4 <udp_input+0x224>)
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c27a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c27c:	e021      	b.n	800c2c2 <udp_input+0x202>
        pbuf_free(p);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7fa f89a 	bl	80063b8 <pbuf_free>
        goto end;
 800c284:	e01c      	b.n	800c2c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c286:	7cfb      	ldrb	r3, [r7, #19]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d112      	bne.n	800c2b2 <udp_input+0x1f2>
 800c28c:	4b12      	ldr	r3, [pc, #72]	; (800c2d8 <udp_input+0x218>)
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c294:	2be0      	cmp	r3, #224	; 0xe0
 800c296:	d00c      	beq.n	800c2b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c298:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <udp_input+0x218>)
 800c29a:	899b      	ldrh	r3, [r3, #12]
 800c29c:	3308      	adds	r3, #8
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	b21b      	sxth	r3, r3
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f7fa f874 	bl	8006392 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c2aa:	2103      	movs	r1, #3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 fc1d 	bl	800daec <icmp_dest_unreach>
      pbuf_free(p);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7fa f880 	bl	80063b8 <pbuf_free>
  return;
 800c2b8:	e003      	b.n	800c2c2 <udp_input+0x202>
    pbuf_free(p);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7fa f87c 	bl	80063b8 <pbuf_free>
  return;
 800c2c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c2c2:	372c      	adds	r7, #44	; 0x2c
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd90      	pop	{r4, r7, pc}
 800c2c8:	080125b0 	.word	0x080125b0
 800c2cc:	08012654 	.word	0x08012654
 800c2d0:	08012604 	.word	0x08012604
 800c2d4:	0801266c 	.word	0x0801266c
 800c2d8:	20003254 	.word	0x20003254
 800c2dc:	200089e0 	.word	0x200089e0
 800c2e0:	08012688 	.word	0x08012688
 800c2e4:	20003264 	.word	0x20003264

0800c2e8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d109      	bne.n	800c30c <udp_send+0x24>
 800c2f8:	4b11      	ldr	r3, [pc, #68]	; (800c340 <udp_send+0x58>)
 800c2fa:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c2fe:	4911      	ldr	r1, [pc, #68]	; (800c344 <udp_send+0x5c>)
 800c300:	4811      	ldr	r0, [pc, #68]	; (800c348 <udp_send+0x60>)
 800c302:	f002 ff5d 	bl	800f1c0 <iprintf>
 800c306:	f06f 030f 	mvn.w	r3, #15
 800c30a:	e015      	b.n	800c338 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d109      	bne.n	800c326 <udp_send+0x3e>
 800c312:	4b0b      	ldr	r3, [pc, #44]	; (800c340 <udp_send+0x58>)
 800c314:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c318:	490c      	ldr	r1, [pc, #48]	; (800c34c <udp_send+0x64>)
 800c31a:	480b      	ldr	r0, [pc, #44]	; (800c348 <udp_send+0x60>)
 800c31c:	f002 ff50 	bl	800f1c0 <iprintf>
 800c320:	f06f 030f 	mvn.w	r3, #15
 800c324:	e008      	b.n	800c338 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	1d1a      	adds	r2, r3, #4
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	8a9b      	ldrh	r3, [r3, #20]
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f80d 	bl	800c350 <udp_sendto>
 800c336:	4603      	mov	r3, r0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	080125b0 	.word	0x080125b0
 800c344:	080126a4 	.word	0x080126a4
 800c348:	08012604 	.word	0x08012604
 800c34c:	080126bc 	.word	0x080126bc

0800c350 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b088      	sub	sp, #32
 800c354:	af02      	add	r7, sp, #8
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <udp_sendto+0x28>
 800c364:	4b23      	ldr	r3, [pc, #140]	; (800c3f4 <udp_sendto+0xa4>)
 800c366:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c36a:	4923      	ldr	r1, [pc, #140]	; (800c3f8 <udp_sendto+0xa8>)
 800c36c:	4823      	ldr	r0, [pc, #140]	; (800c3fc <udp_sendto+0xac>)
 800c36e:	f002 ff27 	bl	800f1c0 <iprintf>
 800c372:	f06f 030f 	mvn.w	r3, #15
 800c376:	e038      	b.n	800c3ea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d109      	bne.n	800c392 <udp_sendto+0x42>
 800c37e:	4b1d      	ldr	r3, [pc, #116]	; (800c3f4 <udp_sendto+0xa4>)
 800c380:	f240 2219 	movw	r2, #537	; 0x219
 800c384:	491e      	ldr	r1, [pc, #120]	; (800c400 <udp_sendto+0xb0>)
 800c386:	481d      	ldr	r0, [pc, #116]	; (800c3fc <udp_sendto+0xac>)
 800c388:	f002 ff1a 	bl	800f1c0 <iprintf>
 800c38c:	f06f 030f 	mvn.w	r3, #15
 800c390:	e02b      	b.n	800c3ea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d109      	bne.n	800c3ac <udp_sendto+0x5c>
 800c398:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <udp_sendto+0xa4>)
 800c39a:	f240 221a 	movw	r2, #538	; 0x21a
 800c39e:	4919      	ldr	r1, [pc, #100]	; (800c404 <udp_sendto+0xb4>)
 800c3a0:	4816      	ldr	r0, [pc, #88]	; (800c3fc <udp_sendto+0xac>)
 800c3a2:	f002 ff0d 	bl	800f1c0 <iprintf>
 800c3a6:	f06f 030f 	mvn.w	r3, #15
 800c3aa:	e01e      	b.n	800c3ea <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	7a1b      	ldrb	r3, [r3, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	7a1b      	ldrb	r3, [r3, #8]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f9 fc9d 	bl	8005cf8 <netif_get_by_index>
 800c3be:	6178      	str	r0, [r7, #20]
 800c3c0:	e003      	b.n	800c3ca <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f001 fc1c 	bl	800dc00 <ip4_route>
 800c3c8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c3d0:	f06f 0303 	mvn.w	r3, #3
 800c3d4:	e009      	b.n	800c3ea <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c3d6:	887a      	ldrh	r2, [r7, #2]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 f810 	bl	800c408 <udp_sendto_if>
 800c3e8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	080125b0 	.word	0x080125b0
 800c3f8:	080126d4 	.word	0x080126d4
 800c3fc:	08012604 	.word	0x08012604
 800c400:	080126ec 	.word	0x080126ec
 800c404:	08012708 	.word	0x08012708

0800c408 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af02      	add	r7, sp, #8
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d109      	bne.n	800c430 <udp_sendto_if+0x28>
 800c41c:	4b2e      	ldr	r3, [pc, #184]	; (800c4d8 <udp_sendto_if+0xd0>)
 800c41e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c422:	492e      	ldr	r1, [pc, #184]	; (800c4dc <udp_sendto_if+0xd4>)
 800c424:	482e      	ldr	r0, [pc, #184]	; (800c4e0 <udp_sendto_if+0xd8>)
 800c426:	f002 fecb 	bl	800f1c0 <iprintf>
 800c42a:	f06f 030f 	mvn.w	r3, #15
 800c42e:	e04f      	b.n	800c4d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <udp_sendto_if+0x42>
 800c436:	4b28      	ldr	r3, [pc, #160]	; (800c4d8 <udp_sendto_if+0xd0>)
 800c438:	f240 2281 	movw	r2, #641	; 0x281
 800c43c:	4929      	ldr	r1, [pc, #164]	; (800c4e4 <udp_sendto_if+0xdc>)
 800c43e:	4828      	ldr	r0, [pc, #160]	; (800c4e0 <udp_sendto_if+0xd8>)
 800c440:	f002 febe 	bl	800f1c0 <iprintf>
 800c444:	f06f 030f 	mvn.w	r3, #15
 800c448:	e042      	b.n	800c4d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d109      	bne.n	800c464 <udp_sendto_if+0x5c>
 800c450:	4b21      	ldr	r3, [pc, #132]	; (800c4d8 <udp_sendto_if+0xd0>)
 800c452:	f240 2282 	movw	r2, #642	; 0x282
 800c456:	4924      	ldr	r1, [pc, #144]	; (800c4e8 <udp_sendto_if+0xe0>)
 800c458:	4821      	ldr	r0, [pc, #132]	; (800c4e0 <udp_sendto_if+0xd8>)
 800c45a:	f002 feb1 	bl	800f1c0 <iprintf>
 800c45e:	f06f 030f 	mvn.w	r3, #15
 800c462:	e035      	b.n	800c4d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d109      	bne.n	800c47e <udp_sendto_if+0x76>
 800c46a:	4b1b      	ldr	r3, [pc, #108]	; (800c4d8 <udp_sendto_if+0xd0>)
 800c46c:	f240 2283 	movw	r2, #643	; 0x283
 800c470:	491e      	ldr	r1, [pc, #120]	; (800c4ec <udp_sendto_if+0xe4>)
 800c472:	481b      	ldr	r0, [pc, #108]	; (800c4e0 <udp_sendto_if+0xd8>)
 800c474:	f002 fea4 	bl	800f1c0 <iprintf>
 800c478:	f06f 030f 	mvn.w	r3, #15
 800c47c:	e028      	b.n	800c4d0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <udp_sendto_if+0x90>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c494:	2be0      	cmp	r3, #224	; 0xe0
 800c496:	d103      	bne.n	800c4a0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	3304      	adds	r3, #4
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	e00b      	b.n	800c4b8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d002      	beq.n	800c4b4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c4ae:	f06f 0303 	mvn.w	r3, #3
 800c4b2:	e00d      	b.n	800c4d0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c4b8:	887a      	ldrh	r2, [r7, #2]
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	6a3b      	ldr	r3, [r7, #32]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f811 	bl	800c4f0 <udp_sendto_if_src>
 800c4ce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	080125b0 	.word	0x080125b0
 800c4dc:	08012724 	.word	0x08012724
 800c4e0:	08012604 	.word	0x08012604
 800c4e4:	08012740 	.word	0x08012740
 800c4e8:	0801275c 	.word	0x0801275c
 800c4ec:	0801277c 	.word	0x0801277c

0800c4f0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08c      	sub	sp, #48	; 0x30
 800c4f4:	af04      	add	r7, sp, #16
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d109      	bne.n	800c518 <udp_sendto_if_src+0x28>
 800c504:	4b65      	ldr	r3, [pc, #404]	; (800c69c <udp_sendto_if_src+0x1ac>)
 800c506:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c50a:	4965      	ldr	r1, [pc, #404]	; (800c6a0 <udp_sendto_if_src+0x1b0>)
 800c50c:	4865      	ldr	r0, [pc, #404]	; (800c6a4 <udp_sendto_if_src+0x1b4>)
 800c50e:	f002 fe57 	bl	800f1c0 <iprintf>
 800c512:	f06f 030f 	mvn.w	r3, #15
 800c516:	e0bc      	b.n	800c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <udp_sendto_if_src+0x42>
 800c51e:	4b5f      	ldr	r3, [pc, #380]	; (800c69c <udp_sendto_if_src+0x1ac>)
 800c520:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c524:	4960      	ldr	r1, [pc, #384]	; (800c6a8 <udp_sendto_if_src+0x1b8>)
 800c526:	485f      	ldr	r0, [pc, #380]	; (800c6a4 <udp_sendto_if_src+0x1b4>)
 800c528:	f002 fe4a 	bl	800f1c0 <iprintf>
 800c52c:	f06f 030f 	mvn.w	r3, #15
 800c530:	e0af      	b.n	800c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d109      	bne.n	800c54c <udp_sendto_if_src+0x5c>
 800c538:	4b58      	ldr	r3, [pc, #352]	; (800c69c <udp_sendto_if_src+0x1ac>)
 800c53a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c53e:	495b      	ldr	r1, [pc, #364]	; (800c6ac <udp_sendto_if_src+0x1bc>)
 800c540:	4858      	ldr	r0, [pc, #352]	; (800c6a4 <udp_sendto_if_src+0x1b4>)
 800c542:	f002 fe3d 	bl	800f1c0 <iprintf>
 800c546:	f06f 030f 	mvn.w	r3, #15
 800c54a:	e0a2      	b.n	800c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d109      	bne.n	800c566 <udp_sendto_if_src+0x76>
 800c552:	4b52      	ldr	r3, [pc, #328]	; (800c69c <udp_sendto_if_src+0x1ac>)
 800c554:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c558:	4955      	ldr	r1, [pc, #340]	; (800c6b0 <udp_sendto_if_src+0x1c0>)
 800c55a:	4852      	ldr	r0, [pc, #328]	; (800c6a4 <udp_sendto_if_src+0x1b4>)
 800c55c:	f002 fe30 	bl	800f1c0 <iprintf>
 800c560:	f06f 030f 	mvn.w	r3, #15
 800c564:	e095      	b.n	800c692 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d109      	bne.n	800c580 <udp_sendto_if_src+0x90>
 800c56c:	4b4b      	ldr	r3, [pc, #300]	; (800c69c <udp_sendto_if_src+0x1ac>)
 800c56e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c572:	4950      	ldr	r1, [pc, #320]	; (800c6b4 <udp_sendto_if_src+0x1c4>)
 800c574:	484b      	ldr	r0, [pc, #300]	; (800c6a4 <udp_sendto_if_src+0x1b4>)
 800c576:	f002 fe23 	bl	800f1c0 <iprintf>
 800c57a:	f06f 030f 	mvn.w	r3, #15
 800c57e:	e088      	b.n	800c692 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	8a5b      	ldrh	r3, [r3, #18]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10f      	bne.n	800c5a8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c588:	68f9      	ldr	r1, [r7, #12]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	8a5b      	ldrh	r3, [r3, #18]
 800c58e:	461a      	mov	r2, r3
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f000 f893 	bl	800c6bc <udp_bind>
 800c596:	4603      	mov	r3, r0
 800c598:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c59a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c5a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c5a6:	e074      	b.n	800c692 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	891b      	ldrh	r3, [r3, #8]
 800c5ac:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d902      	bls.n	800c5ba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b8:	e06b      	b.n	800c692 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c5ba:	2108      	movs	r1, #8
 800c5bc:	68b8      	ldr	r0, [r7, #8]
 800c5be:	f7f9 fe65 	bl	800628c <pbuf_add_header>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d015      	beq.n	800c5f4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c5c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c5cc:	2108      	movs	r1, #8
 800c5ce:	2022      	movs	r0, #34	; 0x22
 800c5d0:	f7f9 fc0e 	bl	8005df0 <pbuf_alloc>
 800c5d4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e0:	e057      	b.n	800c692 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	891b      	ldrh	r3, [r3, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d006      	beq.n	800c5f8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	69f8      	ldr	r0, [r7, #28]
 800c5ee:	f7f9 fffb 	bl	80065e8 <pbuf_chain>
 800c5f2:	e001      	b.n	800c5f8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	895b      	ldrh	r3, [r3, #10]
 800c5fc:	2b07      	cmp	r3, #7
 800c5fe:	d806      	bhi.n	800c60e <udp_sendto_if_src+0x11e>
 800c600:	4b26      	ldr	r3, [pc, #152]	; (800c69c <udp_sendto_if_src+0x1ac>)
 800c602:	f240 320d 	movw	r2, #781	; 0x30d
 800c606:	492c      	ldr	r1, [pc, #176]	; (800c6b8 <udp_sendto_if_src+0x1c8>)
 800c608:	4826      	ldr	r0, [pc, #152]	; (800c6a4 <udp_sendto_if_src+0x1b4>)
 800c60a:	f002 fdd9 	bl	800f1c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	8a5b      	ldrh	r3, [r3, #18]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7f8 fc19 	bl	8004e50 <lwip_htons>
 800c61e:	4603      	mov	r3, r0
 800c620:	461a      	mov	r2, r3
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c626:	887b      	ldrh	r3, [r7, #2]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7f8 fc11 	bl	8004e50 <lwip_htons>
 800c62e:	4603      	mov	r3, r0
 800c630:	461a      	mov	r2, r3
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2200      	movs	r2, #0
 800c63a:	719a      	strb	r2, [r3, #6]
 800c63c:	2200      	movs	r2, #0
 800c63e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	891b      	ldrh	r3, [r3, #8]
 800c644:	4618      	mov	r0, r3
 800c646:	f7f8 fc03 	bl	8004e50 <lwip_htons>
 800c64a:	4603      	mov	r3, r0
 800c64c:	461a      	mov	r2, r3
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c652:	2311      	movs	r3, #17
 800c654:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	7adb      	ldrb	r3, [r3, #11]
 800c65a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	7a9b      	ldrb	r3, [r3, #10]
 800c660:	7cb9      	ldrb	r1, [r7, #18]
 800c662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c664:	9202      	str	r2, [sp, #8]
 800c666:	7cfa      	ldrb	r2, [r7, #19]
 800c668:	9201      	str	r2, [sp, #4]
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	460b      	mov	r3, r1
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c672:	69f8      	ldr	r0, [r7, #28]
 800c674:	f001 fcac 	bl	800dfd0 <ip4_output_if_src>
 800c678:	4603      	mov	r3, r0
 800c67a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c67c:	69fa      	ldr	r2, [r7, #28]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	429a      	cmp	r2, r3
 800c682:	d004      	beq.n	800c68e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c684:	69f8      	ldr	r0, [r7, #28]
 800c686:	f7f9 fe97 	bl	80063b8 <pbuf_free>
    q = NULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c68e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3720      	adds	r7, #32
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	080125b0 	.word	0x080125b0
 800c6a0:	0801279c 	.word	0x0801279c
 800c6a4:	08012604 	.word	0x08012604
 800c6a8:	080127bc 	.word	0x080127bc
 800c6ac:	080127dc 	.word	0x080127dc
 800c6b0:	08012800 	.word	0x08012800
 800c6b4:	08012824 	.word	0x08012824
 800c6b8:	08012848 	.word	0x08012848

0800c6bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c6d0:	4b39      	ldr	r3, [pc, #228]	; (800c7b8 <udp_bind+0xfc>)
 800c6d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d109      	bne.n	800c6ee <udp_bind+0x32>
 800c6da:	4b38      	ldr	r3, [pc, #224]	; (800c7bc <udp_bind+0x100>)
 800c6dc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c6e0:	4937      	ldr	r1, [pc, #220]	; (800c7c0 <udp_bind+0x104>)
 800c6e2:	4838      	ldr	r0, [pc, #224]	; (800c7c4 <udp_bind+0x108>)
 800c6e4:	f002 fd6c 	bl	800f1c0 <iprintf>
 800c6e8:	f06f 030f 	mvn.w	r3, #15
 800c6ec:	e060      	b.n	800c7b0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c6f2:	4b35      	ldr	r3, [pc, #212]	; (800c7c8 <udp_bind+0x10c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	e009      	b.n	800c70e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d102      	bne.n	800c708 <udp_bind+0x4c>
      rebind = 1;
 800c702:	2301      	movs	r3, #1
 800c704:	74fb      	strb	r3, [r7, #19]
      break;
 800c706:	e005      	b.n	800c714 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1f2      	bne.n	800c6fa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c714:	88fb      	ldrh	r3, [r7, #6]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d109      	bne.n	800c72e <udp_bind+0x72>
    port = udp_new_port();
 800c71a:	f7ff fc35 	bl	800bf88 <udp_new_port>
 800c71e:	4603      	mov	r3, r0
 800c720:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c722:	88fb      	ldrh	r3, [r7, #6]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d12c      	bne.n	800c782 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c728:	f06f 0307 	mvn.w	r3, #7
 800c72c:	e040      	b.n	800c7b0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c72e:	4b26      	ldr	r3, [pc, #152]	; (800c7c8 <udp_bind+0x10c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	617b      	str	r3, [r7, #20]
 800c734:	e022      	b.n	800c77c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d01b      	beq.n	800c776 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	8a5b      	ldrh	r3, [r3, #18]
 800c742:	88fa      	ldrh	r2, [r7, #6]
 800c744:	429a      	cmp	r2, r3
 800c746:	d116      	bne.n	800c776 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c750:	429a      	cmp	r2, r3
 800c752:	d00d      	beq.n	800c770 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00a      	beq.n	800c770 <udp_bind+0xb4>
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d006      	beq.n	800c770 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c762:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c770:	f06f 0307 	mvn.w	r3, #7
 800c774:	e01c      	b.n	800c7b0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1d9      	bne.n	800c736 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <udp_bind+0xd2>
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	e000      	b.n	800c790 <udp_bind+0xd4>
 800c78e:	2300      	movs	r3, #0
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	88fa      	ldrh	r2, [r7, #6]
 800c798:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c79a:	7cfb      	ldrb	r3, [r7, #19]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d106      	bne.n	800c7ae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c7a0:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <udp_bind+0x10c>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c7a8:	4a07      	ldr	r2, [pc, #28]	; (800c7c8 <udp_bind+0x10c>)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	080130c0 	.word	0x080130c0
 800c7bc:	080125b0 	.word	0x080125b0
 800c7c0:	08012878 	.word	0x08012878
 800c7c4:	08012604 	.word	0x08012604
 800c7c8:	200089e0 	.word	0x200089e0

0800c7cc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d109      	bne.n	800c7f4 <udp_connect+0x28>
 800c7e0:	4b2c      	ldr	r3, [pc, #176]	; (800c894 <udp_connect+0xc8>)
 800c7e2:	f240 4235 	movw	r2, #1077	; 0x435
 800c7e6:	492c      	ldr	r1, [pc, #176]	; (800c898 <udp_connect+0xcc>)
 800c7e8:	482c      	ldr	r0, [pc, #176]	; (800c89c <udp_connect+0xd0>)
 800c7ea:	f002 fce9 	bl	800f1c0 <iprintf>
 800c7ee:	f06f 030f 	mvn.w	r3, #15
 800c7f2:	e04b      	b.n	800c88c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d109      	bne.n	800c80e <udp_connect+0x42>
 800c7fa:	4b26      	ldr	r3, [pc, #152]	; (800c894 <udp_connect+0xc8>)
 800c7fc:	f240 4236 	movw	r2, #1078	; 0x436
 800c800:	4927      	ldr	r1, [pc, #156]	; (800c8a0 <udp_connect+0xd4>)
 800c802:	4826      	ldr	r0, [pc, #152]	; (800c89c <udp_connect+0xd0>)
 800c804:	f002 fcdc 	bl	800f1c0 <iprintf>
 800c808:	f06f 030f 	mvn.w	r3, #15
 800c80c:	e03e      	b.n	800c88c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8a5b      	ldrh	r3, [r3, #18]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10f      	bne.n	800c836 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c816:	68f9      	ldr	r1, [r7, #12]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	8a5b      	ldrh	r3, [r3, #18]
 800c81c:	461a      	mov	r2, r3
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f7ff ff4c 	bl	800c6bc <udp_bind>
 800c824:	4603      	mov	r3, r0
 800c826:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d002      	beq.n	800c836 <udp_connect+0x6a>
      return err;
 800c830:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c834:	e02a      	b.n	800c88c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <udp_connect+0x76>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	e000      	b.n	800c844 <udp_connect+0x78>
 800c842:	2300      	movs	r3, #0
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	88fa      	ldrh	r2, [r7, #6]
 800c84c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	7c1b      	ldrb	r3, [r3, #16]
 800c852:	f043 0304 	orr.w	r3, r3, #4
 800c856:	b2da      	uxtb	r2, r3
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c85c:	4b11      	ldr	r3, [pc, #68]	; (800c8a4 <udp_connect+0xd8>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	e008      	b.n	800c876 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d101      	bne.n	800c870 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	e00d      	b.n	800c88c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	617b      	str	r3, [r7, #20]
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1f3      	bne.n	800c864 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c87c:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <udp_connect+0xd8>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c884:	4a07      	ldr	r2, [pc, #28]	; (800c8a4 <udp_connect+0xd8>)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	080125b0 	.word	0x080125b0
 800c898:	08012890 	.word	0x08012890
 800c89c:	08012604 	.word	0x08012604
 800c8a0:	080128ac 	.word	0x080128ac
 800c8a4:	200089e0 	.word	0x200089e0

0800c8a8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d107      	bne.n	800c8c6 <udp_disconnect+0x1e>
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <udp_disconnect+0x44>)
 800c8b8:	f240 426a 	movw	r2, #1130	; 0x46a
 800c8bc:	490c      	ldr	r1, [pc, #48]	; (800c8f0 <udp_disconnect+0x48>)
 800c8be:	480d      	ldr	r0, [pc, #52]	; (800c8f4 <udp_disconnect+0x4c>)
 800c8c0:	f002 fc7e 	bl	800f1c0 <iprintf>
 800c8c4:	e00f      	b.n	800c8e6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7c1b      	ldrb	r3, [r3, #16]
 800c8dc:	f023 0304 	bic.w	r3, r3, #4
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	741a      	strb	r2, [r3, #16]
}
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	080125b0 	.word	0x080125b0
 800c8f0:	080128c8 	.word	0x080128c8
 800c8f4:	08012604 	.word	0x08012604

0800c8f8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d107      	bne.n	800c91a <udp_recv+0x22>
 800c90a:	4b08      	ldr	r3, [pc, #32]	; (800c92c <udp_recv+0x34>)
 800c90c:	f240 428a 	movw	r2, #1162	; 0x48a
 800c910:	4907      	ldr	r1, [pc, #28]	; (800c930 <udp_recv+0x38>)
 800c912:	4808      	ldr	r0, [pc, #32]	; (800c934 <udp_recv+0x3c>)
 800c914:	f002 fc54 	bl	800f1c0 <iprintf>
 800c918:	e005      	b.n	800c926 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	61da      	str	r2, [r3, #28]
}
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	080125b0 	.word	0x080125b0
 800c930:	080128e4 	.word	0x080128e4
 800c934:	08012604 	.word	0x08012604

0800c938 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d107      	bne.n	800c956 <udp_remove+0x1e>
 800c946:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <udp_remove+0x74>)
 800c948:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c94c:	4918      	ldr	r1, [pc, #96]	; (800c9b0 <udp_remove+0x78>)
 800c94e:	4819      	ldr	r0, [pc, #100]	; (800c9b4 <udp_remove+0x7c>)
 800c950:	f002 fc36 	bl	800f1c0 <iprintf>
 800c954:	e026      	b.n	800c9a4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c956:	4b18      	ldr	r3, [pc, #96]	; (800c9b8 <udp_remove+0x80>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d105      	bne.n	800c96c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c960:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <udp_remove+0x80>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	4a14      	ldr	r2, [pc, #80]	; (800c9b8 <udp_remove+0x80>)
 800c968:	6013      	str	r3, [r2, #0]
 800c96a:	e017      	b.n	800c99c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c96c:	4b12      	ldr	r3, [pc, #72]	; (800c9b8 <udp_remove+0x80>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	60fb      	str	r3, [r7, #12]
 800c972:	e010      	b.n	800c996 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d009      	beq.n	800c990 <udp_remove+0x58>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	429a      	cmp	r2, r3
 800c984:	d104      	bne.n	800c990 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	60da      	str	r2, [r3, #12]
        break;
 800c98e:	e005      	b.n	800c99c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	60fb      	str	r3, [r7, #12]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1eb      	bne.n	800c974 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c99c:	6879      	ldr	r1, [r7, #4]
 800c99e:	2000      	movs	r0, #0
 800c9a0:	f7f8 fef8 	bl	8005794 <memp_free>
}
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	080125b0 	.word	0x080125b0
 800c9b0:	080128fc 	.word	0x080128fc
 800c9b4:	08012604 	.word	0x08012604
 800c9b8:	200089e0 	.word	0x200089e0

0800c9bc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	f7f8 fe9a 	bl	80056fc <memp_malloc>
 800c9c8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f002 fbeb 	bl	800f1b0 <memset>
    pcb->ttl = UDP_TTL;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	22ff      	movs	r2, #255	; 0xff
 800c9de:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c9e0:	687b      	ldr	r3, [r7, #4]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01e      	beq.n	800ca3a <udp_netif_ip_addr_changed+0x4e>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01a      	beq.n	800ca3a <udp_netif_ip_addr_changed+0x4e>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d017      	beq.n	800ca3a <udp_netif_ip_addr_changed+0x4e>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d013      	beq.n	800ca3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca12:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <udp_netif_ip_addr_changed+0x5c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	60fb      	str	r3, [r7, #12]
 800ca18:	e00c      	b.n	800ca34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d103      	bne.n	800ca2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1ef      	bne.n	800ca1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ca3a:	bf00      	nop
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	200089e0 	.word	0x200089e0

0800ca4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ca54:	4915      	ldr	r1, [pc, #84]	; (800caac <etharp_free_entry+0x60>)
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	440b      	add	r3, r1
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d013      	beq.n	800ca90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ca68:	4910      	ldr	r1, [pc, #64]	; (800caac <etharp_free_entry+0x60>)
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	005b      	lsls	r3, r3, #1
 800ca70:	4413      	add	r3, r2
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	440b      	add	r3, r1
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7f9 fc9d 	bl	80063b8 <pbuf_free>
    arp_table[i].q = NULL;
 800ca7e:	490b      	ldr	r1, [pc, #44]	; (800caac <etharp_free_entry+0x60>)
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	4613      	mov	r3, r2
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	4413      	add	r3, r2
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	440b      	add	r3, r1
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ca90:	4906      	ldr	r1, [pc, #24]	; (800caac <etharp_free_entry+0x60>)
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	4613      	mov	r3, r2
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	4413      	add	r3, r2
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	440b      	add	r3, r1
 800ca9e:	3314      	adds	r3, #20
 800caa0:	2200      	movs	r2, #0
 800caa2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	200089e4 	.word	0x200089e4

0800cab0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cab6:	2300      	movs	r3, #0
 800cab8:	607b      	str	r3, [r7, #4]
 800caba:	e096      	b.n	800cbea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cabc:	494f      	ldr	r1, [pc, #316]	; (800cbfc <etharp_tmr+0x14c>)
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4613      	mov	r3, r2
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	4413      	add	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	440b      	add	r3, r1
 800caca:	3314      	adds	r3, #20
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cad0:	78fb      	ldrb	r3, [r7, #3]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 8086 	beq.w	800cbe4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cad8:	4948      	ldr	r1, [pc, #288]	; (800cbfc <etharp_tmr+0x14c>)
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	4613      	mov	r3, r2
 800cade:	005b      	lsls	r3, r3, #1
 800cae0:	4413      	add	r3, r2
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	440b      	add	r3, r1
 800cae6:	3312      	adds	r3, #18
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	3301      	adds	r3, #1
 800caec:	b298      	uxth	r0, r3
 800caee:	4943      	ldr	r1, [pc, #268]	; (800cbfc <etharp_tmr+0x14c>)
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	4613      	mov	r3, r2
 800caf4:	005b      	lsls	r3, r3, #1
 800caf6:	4413      	add	r3, r2
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	440b      	add	r3, r1
 800cafc:	3312      	adds	r3, #18
 800cafe:	4602      	mov	r2, r0
 800cb00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cb02:	493e      	ldr	r1, [pc, #248]	; (800cbfc <etharp_tmr+0x14c>)
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	440b      	add	r3, r1
 800cb10:	3312      	adds	r3, #18
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cb18:	d215      	bcs.n	800cb46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cb1a:	4938      	ldr	r1, [pc, #224]	; (800cbfc <etharp_tmr+0x14c>)
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	005b      	lsls	r3, r3, #1
 800cb22:	4413      	add	r3, r2
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	440b      	add	r3, r1
 800cb28:	3314      	adds	r3, #20
 800cb2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d10e      	bne.n	800cb4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cb30:	4932      	ldr	r1, [pc, #200]	; (800cbfc <etharp_tmr+0x14c>)
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	4613      	mov	r3, r2
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	4413      	add	r3, r2
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	440b      	add	r3, r1
 800cb3e:	3312      	adds	r3, #18
 800cb40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cb42:	2b04      	cmp	r3, #4
 800cb44:	d903      	bls.n	800cb4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ff80 	bl	800ca4c <etharp_free_entry>
 800cb4c:	e04a      	b.n	800cbe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cb4e:	492b      	ldr	r1, [pc, #172]	; (800cbfc <etharp_tmr+0x14c>)
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4613      	mov	r3, r2
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	4413      	add	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	440b      	add	r3, r1
 800cb5c:	3314      	adds	r3, #20
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d10a      	bne.n	800cb7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cb64:	4925      	ldr	r1, [pc, #148]	; (800cbfc <etharp_tmr+0x14c>)
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	4413      	add	r3, r2
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	440b      	add	r3, r1
 800cb72:	3314      	adds	r3, #20
 800cb74:	2204      	movs	r2, #4
 800cb76:	701a      	strb	r2, [r3, #0]
 800cb78:	e034      	b.n	800cbe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cb7a:	4920      	ldr	r1, [pc, #128]	; (800cbfc <etharp_tmr+0x14c>)
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	4413      	add	r3, r2
 800cb84:	00db      	lsls	r3, r3, #3
 800cb86:	440b      	add	r3, r1
 800cb88:	3314      	adds	r3, #20
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	d10a      	bne.n	800cba6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cb90:	491a      	ldr	r1, [pc, #104]	; (800cbfc <etharp_tmr+0x14c>)
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4613      	mov	r3, r2
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	4413      	add	r3, r2
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	440b      	add	r3, r1
 800cb9e:	3314      	adds	r3, #20
 800cba0:	2202      	movs	r2, #2
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e01e      	b.n	800cbe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cba6:	4915      	ldr	r1, [pc, #84]	; (800cbfc <etharp_tmr+0x14c>)
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	4413      	add	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	440b      	add	r3, r1
 800cbb4:	3314      	adds	r3, #20
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d113      	bne.n	800cbe4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cbbc:	490f      	ldr	r1, [pc, #60]	; (800cbfc <etharp_tmr+0x14c>)
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	005b      	lsls	r3, r3, #1
 800cbc4:	4413      	add	r3, r2
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	440b      	add	r3, r1
 800cbca:	3308      	adds	r3, #8
 800cbcc:	6818      	ldr	r0, [r3, #0]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	4413      	add	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	4a08      	ldr	r2, [pc, #32]	; (800cbfc <etharp_tmr+0x14c>)
 800cbda:	4413      	add	r3, r2
 800cbdc:	3304      	adds	r3, #4
 800cbde:	4619      	mov	r1, r3
 800cbe0:	f000 fe6e 	bl	800d8c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	607b      	str	r3, [r7, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b09      	cmp	r3, #9
 800cbee:	f77f af65 	ble.w	800cabc <etharp_tmr+0xc>
      }
    }
  }
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	200089e4 	.word	0x200089e4

0800cc00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08a      	sub	sp, #40	; 0x28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cc0e:	230a      	movs	r3, #10
 800cc10:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cc12:	230a      	movs	r3, #10
 800cc14:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cc16:	230a      	movs	r3, #10
 800cc18:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cc1e:	230a      	movs	r3, #10
 800cc20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	83bb      	strh	r3, [r7, #28]
 800cc26:	2300      	movs	r3, #0
 800cc28:	837b      	strh	r3, [r7, #26]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc2e:	2300      	movs	r3, #0
 800cc30:	843b      	strh	r3, [r7, #32]
 800cc32:	e0ae      	b.n	800cd92 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cc34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc38:	49a6      	ldr	r1, [pc, #664]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	4413      	add	r3, r2
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	440b      	add	r3, r1
 800cc44:	3314      	adds	r3, #20
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cc4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc4e:	2b0a      	cmp	r3, #10
 800cc50:	d105      	bne.n	800cc5e <etharp_find_entry+0x5e>
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d102      	bne.n	800cc5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cc58:	8c3b      	ldrh	r3, [r7, #32]
 800cc5a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc5c:	e095      	b.n	800cd8a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 8092 	beq.w	800cd8a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d009      	beq.n	800cc80 <etharp_find_entry+0x80>
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d806      	bhi.n	800cc80 <etharp_find_entry+0x80>
 800cc72:	4b99      	ldr	r3, [pc, #612]	; (800ced8 <etharp_find_entry+0x2d8>)
 800cc74:	f240 1223 	movw	r2, #291	; 0x123
 800cc78:	4998      	ldr	r1, [pc, #608]	; (800cedc <etharp_find_entry+0x2dc>)
 800cc7a:	4899      	ldr	r0, [pc, #612]	; (800cee0 <etharp_find_entry+0x2e0>)
 800cc7c:	f002 faa0 	bl	800f1c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d020      	beq.n	800ccc8 <etharp_find_entry+0xc8>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6819      	ldr	r1, [r3, #0]
 800cc8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc8e:	4891      	ldr	r0, [pc, #580]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cc90:	4613      	mov	r3, r2
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	4413      	add	r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	4403      	add	r3, r0
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4299      	cmp	r1, r3
 800cca0:	d112      	bne.n	800ccc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00c      	beq.n	800ccc2 <etharp_find_entry+0xc2>
 800cca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccac:	4989      	ldr	r1, [pc, #548]	; (800ced4 <etharp_find_entry+0x2d4>)
 800ccae:	4613      	mov	r3, r2
 800ccb0:	005b      	lsls	r3, r3, #1
 800ccb2:	4413      	add	r3, r2
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	440b      	add	r3, r1
 800ccb8:	3308      	adds	r3, #8
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d102      	bne.n	800ccc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ccc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccc6:	e100      	b.n	800ceca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d140      	bne.n	800cd50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ccce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccd2:	4980      	ldr	r1, [pc, #512]	; (800ced4 <etharp_find_entry+0x2d4>)
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	4413      	add	r3, r2
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	440b      	add	r3, r1
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01a      	beq.n	800cd1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cce8:	497a      	ldr	r1, [pc, #488]	; (800ced4 <etharp_find_entry+0x2d4>)
 800ccea:	4613      	mov	r3, r2
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4413      	add	r3, r2
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3312      	adds	r3, #18
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	8bba      	ldrh	r2, [r7, #28]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d845      	bhi.n	800cd8a <etharp_find_entry+0x18a>
            old_queue = i;
 800ccfe:	8c3b      	ldrh	r3, [r7, #32]
 800cd00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cd02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd06:	4973      	ldr	r1, [pc, #460]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cd08:	4613      	mov	r3, r2
 800cd0a:	005b      	lsls	r3, r3, #1
 800cd0c:	4413      	add	r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	440b      	add	r3, r1
 800cd12:	3312      	adds	r3, #18
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	83bb      	strh	r3, [r7, #28]
 800cd18:	e037      	b.n	800cd8a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cd1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd1e:	496d      	ldr	r1, [pc, #436]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cd20:	4613      	mov	r3, r2
 800cd22:	005b      	lsls	r3, r3, #1
 800cd24:	4413      	add	r3, r2
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	440b      	add	r3, r1
 800cd2a:	3312      	adds	r3, #18
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	8b7a      	ldrh	r2, [r7, #26]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d82a      	bhi.n	800cd8a <etharp_find_entry+0x18a>
            old_pending = i;
 800cd34:	8c3b      	ldrh	r3, [r7, #32]
 800cd36:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cd38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd3c:	4965      	ldr	r1, [pc, #404]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cd3e:	4613      	mov	r3, r2
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4413      	add	r3, r2
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	440b      	add	r3, r1
 800cd48:	3312      	adds	r3, #18
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	837b      	strh	r3, [r7, #26]
 800cd4e:	e01c      	b.n	800cd8a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d919      	bls.n	800cd8a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cd56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd5a:	495e      	ldr	r1, [pc, #376]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	4413      	add	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	440b      	add	r3, r1
 800cd66:	3312      	adds	r3, #18
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	8b3a      	ldrh	r2, [r7, #24]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d80c      	bhi.n	800cd8a <etharp_find_entry+0x18a>
            old_stable = i;
 800cd70:	8c3b      	ldrh	r3, [r7, #32]
 800cd72:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cd74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd78:	4956      	ldr	r1, [pc, #344]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	440b      	add	r3, r1
 800cd84:	3312      	adds	r3, #18
 800cd86:	881b      	ldrh	r3, [r3, #0]
 800cd88:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd8a:	8c3b      	ldrh	r3, [r7, #32]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	843b      	strh	r3, [r7, #32]
 800cd92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd96:	2b09      	cmp	r3, #9
 800cd98:	f77f af4c 	ble.w	800cc34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cd9c:	7afb      	ldrb	r3, [r7, #11]
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d108      	bne.n	800cdb8 <etharp_find_entry+0x1b8>
 800cda6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cdaa:	2b0a      	cmp	r3, #10
 800cdac:	d107      	bne.n	800cdbe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cdae:	7afb      	ldrb	r3, [r7, #11]
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdbc:	e085      	b.n	800ceca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cdbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cdc2:	2b09      	cmp	r3, #9
 800cdc4:	dc02      	bgt.n	800cdcc <etharp_find_entry+0x1cc>
    i = empty;
 800cdc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdc8:	843b      	strh	r3, [r7, #32]
 800cdca:	e039      	b.n	800ce40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cdcc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cdd0:	2b09      	cmp	r3, #9
 800cdd2:	dc14      	bgt.n	800cdfe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cdd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdd6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cdd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cddc:	493d      	ldr	r1, [pc, #244]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cdde:	4613      	mov	r3, r2
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d018      	beq.n	800ce20 <etharp_find_entry+0x220>
 800cdee:	4b3a      	ldr	r3, [pc, #232]	; (800ced8 <etharp_find_entry+0x2d8>)
 800cdf0:	f240 126d 	movw	r2, #365	; 0x16d
 800cdf4:	493b      	ldr	r1, [pc, #236]	; (800cee4 <etharp_find_entry+0x2e4>)
 800cdf6:	483a      	ldr	r0, [pc, #232]	; (800cee0 <etharp_find_entry+0x2e0>)
 800cdf8:	f002 f9e2 	bl	800f1c0 <iprintf>
 800cdfc:	e010      	b.n	800ce20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cdfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce02:	2b09      	cmp	r3, #9
 800ce04:	dc02      	bgt.n	800ce0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ce06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce08:	843b      	strh	r3, [r7, #32]
 800ce0a:	e009      	b.n	800ce20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ce0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce10:	2b09      	cmp	r3, #9
 800ce12:	dc02      	bgt.n	800ce1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ce14:	8bfb      	ldrh	r3, [r7, #30]
 800ce16:	843b      	strh	r3, [r7, #32]
 800ce18:	e002      	b.n	800ce20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ce1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1e:	e054      	b.n	800ceca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ce20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce24:	2b09      	cmp	r3, #9
 800ce26:	dd06      	ble.n	800ce36 <etharp_find_entry+0x236>
 800ce28:	4b2b      	ldr	r3, [pc, #172]	; (800ced8 <etharp_find_entry+0x2d8>)
 800ce2a:	f240 127f 	movw	r2, #383	; 0x17f
 800ce2e:	492e      	ldr	r1, [pc, #184]	; (800cee8 <etharp_find_entry+0x2e8>)
 800ce30:	482b      	ldr	r0, [pc, #172]	; (800cee0 <etharp_find_entry+0x2e0>)
 800ce32:	f002 f9c5 	bl	800f1c0 <iprintf>
    etharp_free_entry(i);
 800ce36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff fe06 	bl	800ca4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ce40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	dd06      	ble.n	800ce56 <etharp_find_entry+0x256>
 800ce48:	4b23      	ldr	r3, [pc, #140]	; (800ced8 <etharp_find_entry+0x2d8>)
 800ce4a:	f240 1283 	movw	r2, #387	; 0x183
 800ce4e:	4926      	ldr	r1, [pc, #152]	; (800cee8 <etharp_find_entry+0x2e8>)
 800ce50:	4823      	ldr	r0, [pc, #140]	; (800cee0 <etharp_find_entry+0x2e0>)
 800ce52:	f002 f9b5 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ce56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce5a:	491e      	ldr	r1, [pc, #120]	; (800ced4 <etharp_find_entry+0x2d4>)
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	4413      	add	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	440b      	add	r3, r1
 800ce66:	3314      	adds	r3, #20
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d006      	beq.n	800ce7c <etharp_find_entry+0x27c>
 800ce6e:	4b1a      	ldr	r3, [pc, #104]	; (800ced8 <etharp_find_entry+0x2d8>)
 800ce70:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ce74:	491d      	ldr	r1, [pc, #116]	; (800ceec <etharp_find_entry+0x2ec>)
 800ce76:	481a      	ldr	r0, [pc, #104]	; (800cee0 <etharp_find_entry+0x2e0>)
 800ce78:	f002 f9a2 	bl	800f1c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00b      	beq.n	800ce9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ce82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6819      	ldr	r1, [r3, #0]
 800ce8a:	4812      	ldr	r0, [pc, #72]	; (800ced4 <etharp_find_entry+0x2d4>)
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	4413      	add	r3, r2
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	4403      	add	r3, r0
 800ce96:	3304      	adds	r3, #4
 800ce98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ce9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce9e:	490d      	ldr	r1, [pc, #52]	; (800ced4 <etharp_find_entry+0x2d4>)
 800cea0:	4613      	mov	r3, r2
 800cea2:	005b      	lsls	r3, r3, #1
 800cea4:	4413      	add	r3, r2
 800cea6:	00db      	lsls	r3, r3, #3
 800cea8:	440b      	add	r3, r1
 800ceaa:	3312      	adds	r3, #18
 800ceac:	2200      	movs	r2, #0
 800ceae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ceb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ceb4:	4907      	ldr	r1, [pc, #28]	; (800ced4 <etharp_find_entry+0x2d4>)
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	4413      	add	r3, r2
 800cebc:	00db      	lsls	r3, r3, #3
 800cebe:	440b      	add	r3, r1
 800cec0:	3308      	adds	r3, #8
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cec6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3728      	adds	r7, #40	; 0x28
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	200089e4 	.word	0x200089e4
 800ced8:	08012914 	.word	0x08012914
 800cedc:	0801294c 	.word	0x0801294c
 800cee0:	0801298c 	.word	0x0801298c
 800cee4:	080129b4 	.word	0x080129b4
 800cee8:	080129cc 	.word	0x080129cc
 800ceec:	080129e0 	.word	0x080129e0

0800cef0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf04:	2b06      	cmp	r3, #6
 800cf06:	d006      	beq.n	800cf16 <etharp_update_arp_entry+0x26>
 800cf08:	4b48      	ldr	r3, [pc, #288]	; (800d02c <etharp_update_arp_entry+0x13c>)
 800cf0a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cf0e:	4948      	ldr	r1, [pc, #288]	; (800d030 <etharp_update_arp_entry+0x140>)
 800cf10:	4848      	ldr	r0, [pc, #288]	; (800d034 <etharp_update_arp_entry+0x144>)
 800cf12:	f002 f955 	bl	800f1c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d012      	beq.n	800cf42 <etharp_update_arp_entry+0x52>
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00e      	beq.n	800cf42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68f9      	ldr	r1, [r7, #12]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f001 f8fe 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800cf30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d105      	bne.n	800cf42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf3e:	2be0      	cmp	r3, #224	; 0xe0
 800cf40:	d102      	bne.n	800cf48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cf42:	f06f 030f 	mvn.w	r3, #15
 800cf46:	e06c      	b.n	800d022 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cf48:	78fb      	ldrb	r3, [r7, #3]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	68b8      	ldr	r0, [r7, #8]
 800cf50:	f7ff fe56 	bl	800cc00 <etharp_find_entry>
 800cf54:	4603      	mov	r3, r0
 800cf56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cf58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	da02      	bge.n	800cf66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cf60:	8afb      	ldrh	r3, [r7, #22]
 800cf62:	b25b      	sxtb	r3, r3
 800cf64:	e05d      	b.n	800d022 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cf66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf6a:	4933      	ldr	r1, [pc, #204]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	4413      	add	r3, r2
 800cf72:	00db      	lsls	r3, r3, #3
 800cf74:	440b      	add	r3, r1
 800cf76:	3314      	adds	r3, #20
 800cf78:	2202      	movs	r2, #2
 800cf7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cf7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf80:	492d      	ldr	r1, [pc, #180]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cf82:	4613      	mov	r3, r2
 800cf84:	005b      	lsls	r3, r3, #1
 800cf86:	4413      	add	r3, r2
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	440b      	add	r3, r1
 800cf8c:	3308      	adds	r3, #8
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cf92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf96:	4613      	mov	r3, r2
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4413      	add	r3, r2
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	4a25      	ldr	r2, [pc, #148]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cfa2:	4413      	add	r3, r2
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	2206      	movs	r2, #6
 800cfa8:	6879      	ldr	r1, [r7, #4]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f002 f8d8 	bl	800f160 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cfb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfb4:	4920      	ldr	r1, [pc, #128]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4413      	add	r3, r2
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3312      	adds	r3, #18
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cfc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfca:	491b      	ldr	r1, [pc, #108]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cfcc:	4613      	mov	r3, r2
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	4413      	add	r3, r2
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	440b      	add	r3, r1
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d021      	beq.n	800d020 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cfdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfe0:	4915      	ldr	r1, [pc, #84]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	4413      	add	r3, r2
 800cfe8:	00db      	lsls	r3, r3, #3
 800cfea:	440b      	add	r3, r1
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cff4:	4910      	ldr	r1, [pc, #64]	; (800d038 <etharp_update_arp_entry+0x148>)
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	440b      	add	r3, r1
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d00a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6939      	ldr	r1, [r7, #16]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f002 f827 	bl	800f068 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d01a:	6938      	ldr	r0, [r7, #16]
 800d01c:	f7f9 f9cc 	bl	80063b8 <pbuf_free>
  }
  return ERR_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	08012914 	.word	0x08012914
 800d030:	08012a0c 	.word	0x08012a0c
 800d034:	0801298c 	.word	0x0801298c
 800d038:	200089e4 	.word	0x200089e4

0800d03c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d044:	2300      	movs	r3, #0
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	e01e      	b.n	800d088 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d04a:	4913      	ldr	r1, [pc, #76]	; (800d098 <etharp_cleanup_netif+0x5c>)
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4613      	mov	r3, r2
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	4413      	add	r3, r2
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	440b      	add	r3, r1
 800d058:	3314      	adds	r3, #20
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d05e:	7afb      	ldrb	r3, [r7, #11]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00e      	beq.n	800d082 <etharp_cleanup_netif+0x46>
 800d064:	490c      	ldr	r1, [pc, #48]	; (800d098 <etharp_cleanup_netif+0x5c>)
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	4613      	mov	r3, r2
 800d06a:	005b      	lsls	r3, r3, #1
 800d06c:	4413      	add	r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	440b      	add	r3, r1
 800d072:	3308      	adds	r3, #8
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d102      	bne.n	800d082 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f7ff fce5 	bl	800ca4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3301      	adds	r3, #1
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b09      	cmp	r3, #9
 800d08c:	dddd      	ble.n	800d04a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d08e:	bf00      	nop
 800d090:	bf00      	nop
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	200089e4 	.word	0x200089e4

0800d09c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d09c:	b5b0      	push	{r4, r5, r7, lr}
 800d09e:	b08a      	sub	sp, #40	; 0x28
 800d0a0:	af04      	add	r7, sp, #16
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d107      	bne.n	800d0bc <etharp_input+0x20>
 800d0ac:	4b3d      	ldr	r3, [pc, #244]	; (800d1a4 <etharp_input+0x108>)
 800d0ae:	f240 228a 	movw	r2, #650	; 0x28a
 800d0b2:	493d      	ldr	r1, [pc, #244]	; (800d1a8 <etharp_input+0x10c>)
 800d0b4:	483d      	ldr	r0, [pc, #244]	; (800d1ac <etharp_input+0x110>)
 800d0b6:	f002 f883 	bl	800f1c0 <iprintf>
 800d0ba:	e06f      	b.n	800d19c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0cc:	d10c      	bne.n	800d0e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d0d2:	2b06      	cmp	r3, #6
 800d0d4:	d108      	bne.n	800d0e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d0da:	2b04      	cmp	r3, #4
 800d0dc:	d104      	bne.n	800d0e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	885b      	ldrh	r3, [r3, #2]
 800d0e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d0e4:	2b08      	cmp	r3, #8
 800d0e6:	d003      	beq.n	800d0f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7f9 f965 	bl	80063b8 <pbuf_free>
    return;
 800d0ee:	e055      	b.n	800d19c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	330e      	adds	r3, #14
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	3304      	adds	r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d102      	bne.n	800d110 <etharp_input+0x74>
    for_us = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	75fb      	strb	r3, [r7, #23]
 800d10e:	e009      	b.n	800d124 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	3304      	adds	r3, #4
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	429a      	cmp	r2, r3
 800d11a:	bf0c      	ite	eq
 800d11c:	2301      	moveq	r3, #1
 800d11e:	2300      	movne	r3, #0
 800d120:	b2db      	uxtb	r3, r3
 800d122:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	f103 0208 	add.w	r2, r3, #8
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <etharp_input+0x98>
 800d130:	2301      	movs	r3, #1
 800d132:	e000      	b.n	800d136 <etharp_input+0x9a>
 800d134:	2302      	movs	r3, #2
 800d136:	f107 010c 	add.w	r1, r7, #12
 800d13a:	6838      	ldr	r0, [r7, #0]
 800d13c:	f7ff fed8 	bl	800cef0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	88db      	ldrh	r3, [r3, #6]
 800d144:	b29b      	uxth	r3, r3
 800d146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d14a:	d003      	beq.n	800d154 <etharp_input+0xb8>
 800d14c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d150:	d01e      	beq.n	800d190 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d152:	e020      	b.n	800d196 <etharp_input+0xfa>
      if (for_us) {
 800d154:	7dfb      	ldrb	r3, [r7, #23]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d01c      	beq.n	800d194 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d170:	693a      	ldr	r2, [r7, #16]
 800d172:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d174:	2102      	movs	r1, #2
 800d176:	9103      	str	r1, [sp, #12]
 800d178:	f107 010c 	add.w	r1, r7, #12
 800d17c:	9102      	str	r1, [sp, #8]
 800d17e:	9201      	str	r2, [sp, #4]
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	462b      	mov	r3, r5
 800d184:	4622      	mov	r2, r4
 800d186:	4601      	mov	r1, r0
 800d188:	6838      	ldr	r0, [r7, #0]
 800d18a:	f000 faeb 	bl	800d764 <etharp_raw>
      break;
 800d18e:	e001      	b.n	800d194 <etharp_input+0xf8>
      break;
 800d190:	bf00      	nop
 800d192:	e000      	b.n	800d196 <etharp_input+0xfa>
      break;
 800d194:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7f9 f90e 	bl	80063b8 <pbuf_free>
}
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	08012914 	.word	0x08012914
 800d1a8:	08012a64 	.word	0x08012a64
 800d1ac:	0801298c 	.word	0x0801298c

0800d1b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d1be:	79fa      	ldrb	r2, [r7, #7]
 800d1c0:	4944      	ldr	r1, [pc, #272]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	4413      	add	r3, r2
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	440b      	add	r3, r1
 800d1cc:	3314      	adds	r3, #20
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d806      	bhi.n	800d1e2 <etharp_output_to_arp_index+0x32>
 800d1d4:	4b40      	ldr	r3, [pc, #256]	; (800d2d8 <etharp_output_to_arp_index+0x128>)
 800d1d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d1da:	4940      	ldr	r1, [pc, #256]	; (800d2dc <etharp_output_to_arp_index+0x12c>)
 800d1dc:	4840      	ldr	r0, [pc, #256]	; (800d2e0 <etharp_output_to_arp_index+0x130>)
 800d1de:	f001 ffef 	bl	800f1c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d1e2:	79fa      	ldrb	r2, [r7, #7]
 800d1e4:	493b      	ldr	r1, [pc, #236]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	4413      	add	r3, r2
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	440b      	add	r3, r1
 800d1f0:	3314      	adds	r3, #20
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d153      	bne.n	800d2a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d1f8:	79fa      	ldrb	r2, [r7, #7]
 800d1fa:	4936      	ldr	r1, [pc, #216]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	4413      	add	r3, r2
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	440b      	add	r3, r1
 800d206:	3312      	adds	r3, #18
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d20e:	d919      	bls.n	800d244 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d210:	79fa      	ldrb	r2, [r7, #7]
 800d212:	4613      	mov	r3, r2
 800d214:	005b      	lsls	r3, r3, #1
 800d216:	4413      	add	r3, r2
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	4a2e      	ldr	r2, [pc, #184]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d21c:	4413      	add	r3, r2
 800d21e:	3304      	adds	r3, #4
 800d220:	4619      	mov	r1, r3
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fb4c 	bl	800d8c0 <etharp_request>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d138      	bne.n	800d2a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d22e:	79fa      	ldrb	r2, [r7, #7]
 800d230:	4928      	ldr	r1, [pc, #160]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d232:	4613      	mov	r3, r2
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	4413      	add	r3, r2
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	440b      	add	r3, r1
 800d23c:	3314      	adds	r3, #20
 800d23e:	2203      	movs	r2, #3
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	e02d      	b.n	800d2a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d244:	79fa      	ldrb	r2, [r7, #7]
 800d246:	4923      	ldr	r1, [pc, #140]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d248:	4613      	mov	r3, r2
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	4413      	add	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	440b      	add	r3, r1
 800d252:	3312      	adds	r3, #18
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d25a:	d321      	bcc.n	800d2a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d25c:	79fa      	ldrb	r2, [r7, #7]
 800d25e:	4613      	mov	r3, r2
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	4413      	add	r3, r2
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	4a1b      	ldr	r2, [pc, #108]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d268:	4413      	add	r3, r2
 800d26a:	1d19      	adds	r1, r3, #4
 800d26c:	79fa      	ldrb	r2, [r7, #7]
 800d26e:	4613      	mov	r3, r2
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4413      	add	r3, r2
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	3308      	adds	r3, #8
 800d278:	4a16      	ldr	r2, [pc, #88]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d27a:	4413      	add	r3, r2
 800d27c:	3304      	adds	r3, #4
 800d27e:	461a      	mov	r2, r3
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 fafb 	bl	800d87c <etharp_request_dst>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d109      	bne.n	800d2a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d28c:	79fa      	ldrb	r2, [r7, #7]
 800d28e:	4911      	ldr	r1, [pc, #68]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d290:	4613      	mov	r3, r2
 800d292:	005b      	lsls	r3, r3, #1
 800d294:	4413      	add	r3, r2
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	440b      	add	r3, r1
 800d29a:	3314      	adds	r3, #20
 800d29c:	2203      	movs	r2, #3
 800d29e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d2a6:	79fa      	ldrb	r2, [r7, #7]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	4413      	add	r3, r2
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	3308      	adds	r3, #8
 800d2b2:	4a08      	ldr	r2, [pc, #32]	; (800d2d4 <etharp_output_to_arp_index+0x124>)
 800d2b4:	4413      	add	r3, r2
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2bc:	9200      	str	r2, [sp, #0]
 800d2be:	460a      	mov	r2, r1
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f001 fed0 	bl	800f068 <ethernet_output>
 800d2c8:	4603      	mov	r3, r0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	200089e4 	.word	0x200089e4
 800d2d8:	08012914 	.word	0x08012914
 800d2dc:	08012a84 	.word	0x08012a84
 800d2e0:	0801298c 	.word	0x0801298c

0800d2e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08a      	sub	sp, #40	; 0x28
 800d2e8:	af02      	add	r7, sp, #8
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <etharp_output+0x24>
 800d2fa:	4b73      	ldr	r3, [pc, #460]	; (800d4c8 <etharp_output+0x1e4>)
 800d2fc:	f240 321e 	movw	r2, #798	; 0x31e
 800d300:	4972      	ldr	r1, [pc, #456]	; (800d4cc <etharp_output+0x1e8>)
 800d302:	4873      	ldr	r0, [pc, #460]	; (800d4d0 <etharp_output+0x1ec>)
 800d304:	f001 ff5c 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <etharp_output+0x38>
 800d30e:	4b6e      	ldr	r3, [pc, #440]	; (800d4c8 <etharp_output+0x1e4>)
 800d310:	f240 321f 	movw	r2, #799	; 0x31f
 800d314:	496f      	ldr	r1, [pc, #444]	; (800d4d4 <etharp_output+0x1f0>)
 800d316:	486e      	ldr	r0, [pc, #440]	; (800d4d0 <etharp_output+0x1ec>)
 800d318:	f001 ff52 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <etharp_output+0x4c>
 800d322:	4b69      	ldr	r3, [pc, #420]	; (800d4c8 <etharp_output+0x1e4>)
 800d324:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d328:	496b      	ldr	r1, [pc, #428]	; (800d4d8 <etharp_output+0x1f4>)
 800d32a:	4869      	ldr	r0, [pc, #420]	; (800d4d0 <etharp_output+0x1ec>)
 800d32c:	f001 ff48 	bl	800f1c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68f9      	ldr	r1, [r7, #12]
 800d336:	4618      	mov	r0, r3
 800d338:	f000 fef8 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d342:	4b66      	ldr	r3, [pc, #408]	; (800d4dc <etharp_output+0x1f8>)
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	e0af      	b.n	800d4a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d350:	2be0      	cmp	r3, #224	; 0xe0
 800d352:	d118      	bne.n	800d386 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d354:	2301      	movs	r3, #1
 800d356:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d358:	2300      	movs	r3, #0
 800d35a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d35c:	235e      	movs	r3, #94	; 0x5e
 800d35e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3301      	adds	r3, #1
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	3302      	adds	r3, #2
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3303      	adds	r3, #3
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d37e:	f107 0310 	add.w	r3, r7, #16
 800d382:	61fb      	str	r3, [r7, #28]
 800d384:	e090      	b.n	800d4a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3304      	adds	r3, #4
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	405a      	eors	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3308      	adds	r3, #8
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4013      	ands	r3, r2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d012      	beq.n	800d3c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d3a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d00b      	beq.n	800d3c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	330c      	adds	r3, #12
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	61bb      	str	r3, [r7, #24]
 800d3bc:	e002      	b.n	800d3c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d3be:	f06f 0303 	mvn.w	r3, #3
 800d3c2:	e07d      	b.n	800d4c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d3c4:	4b46      	ldr	r3, [pc, #280]	; (800d4e0 <etharp_output+0x1fc>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4a46      	ldr	r2, [pc, #280]	; (800d4e4 <etharp_output+0x200>)
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	005b      	lsls	r3, r3, #1
 800d3d0:	440b      	add	r3, r1
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	4413      	add	r3, r2
 800d3d6:	3314      	adds	r3, #20
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d925      	bls.n	800d42a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d3de:	4b40      	ldr	r3, [pc, #256]	; (800d4e0 <etharp_output+0x1fc>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4a3f      	ldr	r2, [pc, #252]	; (800d4e4 <etharp_output+0x200>)
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	005b      	lsls	r3, r3, #1
 800d3ea:	440b      	add	r3, r1
 800d3ec:	00db      	lsls	r3, r3, #3
 800d3ee:	4413      	add	r3, r2
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d117      	bne.n	800d42a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	4b38      	ldr	r3, [pc, #224]	; (800d4e0 <etharp_output+0x1fc>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	4618      	mov	r0, r3
 800d404:	4937      	ldr	r1, [pc, #220]	; (800d4e4 <etharp_output+0x200>)
 800d406:	4603      	mov	r3, r0
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	4403      	add	r3, r0
 800d40c:	00db      	lsls	r3, r3, #3
 800d40e:	440b      	add	r3, r1
 800d410:	3304      	adds	r3, #4
 800d412:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d414:	429a      	cmp	r2, r3
 800d416:	d108      	bne.n	800d42a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d418:	4b31      	ldr	r3, [pc, #196]	; (800d4e0 <etharp_output+0x1fc>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f7ff fec5 	bl	800d1b0 <etharp_output_to_arp_index>
 800d426:	4603      	mov	r3, r0
 800d428:	e04a      	b.n	800d4c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d42a:	2300      	movs	r3, #0
 800d42c:	75fb      	strb	r3, [r7, #23]
 800d42e:	e031      	b.n	800d494 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d430:	7dfa      	ldrb	r2, [r7, #23]
 800d432:	492c      	ldr	r1, [pc, #176]	; (800d4e4 <etharp_output+0x200>)
 800d434:	4613      	mov	r3, r2
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	4413      	add	r3, r2
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	440b      	add	r3, r1
 800d43e:	3314      	adds	r3, #20
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d923      	bls.n	800d48e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d446:	7dfa      	ldrb	r2, [r7, #23]
 800d448:	4926      	ldr	r1, [pc, #152]	; (800d4e4 <etharp_output+0x200>)
 800d44a:	4613      	mov	r3, r2
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	4413      	add	r3, r2
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	440b      	add	r3, r1
 800d454:	3308      	adds	r3, #8
 800d456:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d117      	bne.n	800d48e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	6819      	ldr	r1, [r3, #0]
 800d462:	7dfa      	ldrb	r2, [r7, #23]
 800d464:	481f      	ldr	r0, [pc, #124]	; (800d4e4 <etharp_output+0x200>)
 800d466:	4613      	mov	r3, r2
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	4413      	add	r3, r2
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	4403      	add	r3, r0
 800d470:	3304      	adds	r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d474:	4299      	cmp	r1, r3
 800d476:	d10a      	bne.n	800d48e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d478:	4a19      	ldr	r2, [pc, #100]	; (800d4e0 <etharp_output+0x1fc>)
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	461a      	mov	r2, r3
 800d482:	68b9      	ldr	r1, [r7, #8]
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7ff fe93 	bl	800d1b0 <etharp_output_to_arp_index>
 800d48a:	4603      	mov	r3, r0
 800d48c:	e018      	b.n	800d4c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	3301      	adds	r3, #1
 800d492:	75fb      	strb	r3, [r7, #23]
 800d494:	7dfb      	ldrb	r3, [r7, #23]
 800d496:	2b09      	cmp	r3, #9
 800d498:	d9ca      	bls.n	800d430 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	69b9      	ldr	r1, [r7, #24]
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f000 f822 	bl	800d4e8 <etharp_query>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	e00b      	b.n	800d4c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d4ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	68b9      	ldr	r1, [r7, #8]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f001 fdd5 	bl	800f068 <ethernet_output>
 800d4be:	4603      	mov	r3, r0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	08012914 	.word	0x08012914
 800d4cc:	08012a64 	.word	0x08012a64
 800d4d0:	0801298c 	.word	0x0801298c
 800d4d4:	08012ab4 	.word	0x08012ab4
 800d4d8:	08012a54 	.word	0x08012a54
 800d4dc:	080130c4 	.word	0x080130c4
 800d4e0:	20008ad4 	.word	0x20008ad4
 800d4e4:	200089e4 	.word	0x200089e4

0800d4e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08c      	sub	sp, #48	; 0x30
 800d4ec:	af02      	add	r7, sp, #8
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3326      	adds	r3, #38	; 0x26
 800d4f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d4fa:	23ff      	movs	r3, #255	; 0xff
 800d4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d500:	2300      	movs	r3, #0
 800d502:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68f9      	ldr	r1, [r7, #12]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fe0e 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10c      	bne.n	800d530 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d51e:	2be0      	cmp	r3, #224	; 0xe0
 800d520:	d006      	beq.n	800d530 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d530:	f06f 030f 	mvn.w	r3, #15
 800d534:	e101      	b.n	800d73a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	2101      	movs	r1, #1
 800d53a:	68b8      	ldr	r0, [r7, #8]
 800d53c:	f7ff fb60 	bl	800cc00 <etharp_find_entry>
 800d540:	4603      	mov	r3, r0
 800d542:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d544:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	da02      	bge.n	800d552 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d54c:	8a7b      	ldrh	r3, [r7, #18]
 800d54e:	b25b      	sxtb	r3, r3
 800d550:	e0f3      	b.n	800d73a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d552:	8a7b      	ldrh	r3, [r7, #18]
 800d554:	2b7e      	cmp	r3, #126	; 0x7e
 800d556:	d906      	bls.n	800d566 <etharp_query+0x7e>
 800d558:	4b7a      	ldr	r3, [pc, #488]	; (800d744 <etharp_query+0x25c>)
 800d55a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d55e:	497a      	ldr	r1, [pc, #488]	; (800d748 <etharp_query+0x260>)
 800d560:	487a      	ldr	r0, [pc, #488]	; (800d74c <etharp_query+0x264>)
 800d562:	f001 fe2d 	bl	800f1c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d566:	8a7b      	ldrh	r3, [r7, #18]
 800d568:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d56a:	7c7a      	ldrb	r2, [r7, #17]
 800d56c:	4978      	ldr	r1, [pc, #480]	; (800d750 <etharp_query+0x268>)
 800d56e:	4613      	mov	r3, r2
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4413      	add	r3, r2
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	440b      	add	r3, r1
 800d578:	3314      	adds	r3, #20
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d115      	bne.n	800d5ac <etharp_query+0xc4>
    is_new_entry = 1;
 800d580:	2301      	movs	r3, #1
 800d582:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d584:	7c7a      	ldrb	r2, [r7, #17]
 800d586:	4972      	ldr	r1, [pc, #456]	; (800d750 <etharp_query+0x268>)
 800d588:	4613      	mov	r3, r2
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	4413      	add	r3, r2
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	440b      	add	r3, r1
 800d592:	3314      	adds	r3, #20
 800d594:	2201      	movs	r2, #1
 800d596:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d598:	7c7a      	ldrb	r2, [r7, #17]
 800d59a:	496d      	ldr	r1, [pc, #436]	; (800d750 <etharp_query+0x268>)
 800d59c:	4613      	mov	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	3308      	adds	r3, #8
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d5ac:	7c7a      	ldrb	r2, [r7, #17]
 800d5ae:	4968      	ldr	r1, [pc, #416]	; (800d750 <etharp_query+0x268>)
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	4413      	add	r3, r2
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	440b      	add	r3, r1
 800d5ba:	3314      	adds	r3, #20
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d011      	beq.n	800d5e6 <etharp_query+0xfe>
 800d5c2:	7c7a      	ldrb	r2, [r7, #17]
 800d5c4:	4962      	ldr	r1, [pc, #392]	; (800d750 <etharp_query+0x268>)
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	4413      	add	r3, r2
 800d5cc:	00db      	lsls	r3, r3, #3
 800d5ce:	440b      	add	r3, r1
 800d5d0:	3314      	adds	r3, #20
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d806      	bhi.n	800d5e6 <etharp_query+0xfe>
 800d5d8:	4b5a      	ldr	r3, [pc, #360]	; (800d744 <etharp_query+0x25c>)
 800d5da:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d5de:	495d      	ldr	r1, [pc, #372]	; (800d754 <etharp_query+0x26c>)
 800d5e0:	485a      	ldr	r0, [pc, #360]	; (800d74c <etharp_query+0x264>)
 800d5e2:	f001 fded 	bl	800f1c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d102      	bne.n	800d5f2 <etharp_query+0x10a>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10c      	bne.n	800d60c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d5f2:	68b9      	ldr	r1, [r7, #8]
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 f963 	bl	800d8c0 <etharp_request>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d102      	bne.n	800d60c <etharp_query+0x124>
      return result;
 800d606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d60a:	e096      	b.n	800d73a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d106      	bne.n	800d620 <etharp_query+0x138>
 800d612:	4b4c      	ldr	r3, [pc, #304]	; (800d744 <etharp_query+0x25c>)
 800d614:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d618:	494f      	ldr	r1, [pc, #316]	; (800d758 <etharp_query+0x270>)
 800d61a:	484c      	ldr	r0, [pc, #304]	; (800d74c <etharp_query+0x264>)
 800d61c:	f001 fdd0 	bl	800f1c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d620:	7c7a      	ldrb	r2, [r7, #17]
 800d622:	494b      	ldr	r1, [pc, #300]	; (800d750 <etharp_query+0x268>)
 800d624:	4613      	mov	r3, r2
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	4413      	add	r3, r2
 800d62a:	00db      	lsls	r3, r3, #3
 800d62c:	440b      	add	r3, r1
 800d62e:	3314      	adds	r3, #20
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d917      	bls.n	800d666 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d636:	4a49      	ldr	r2, [pc, #292]	; (800d75c <etharp_query+0x274>)
 800d638:	7c7b      	ldrb	r3, [r7, #17]
 800d63a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d63c:	7c7a      	ldrb	r2, [r7, #17]
 800d63e:	4613      	mov	r3, r2
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4413      	add	r3, r2
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	3308      	adds	r3, #8
 800d648:	4a41      	ldr	r2, [pc, #260]	; (800d750 <etharp_query+0x268>)
 800d64a:	4413      	add	r3, r2
 800d64c:	3304      	adds	r3, #4
 800d64e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d652:	9200      	str	r2, [sp, #0]
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f001 fd05 	bl	800f068 <ethernet_output>
 800d65e:	4603      	mov	r3, r0
 800d660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d664:	e067      	b.n	800d736 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d666:	7c7a      	ldrb	r2, [r7, #17]
 800d668:	4939      	ldr	r1, [pc, #228]	; (800d750 <etharp_query+0x268>)
 800d66a:	4613      	mov	r3, r2
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	4413      	add	r3, r2
 800d670:	00db      	lsls	r3, r3, #3
 800d672:	440b      	add	r3, r1
 800d674:	3314      	adds	r3, #20
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d15c      	bne.n	800d736 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d684:	e01c      	b.n	800d6c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	895a      	ldrh	r2, [r3, #10]
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	891b      	ldrh	r3, [r3, #8]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d10a      	bne.n	800d6a8 <etharp_query+0x1c0>
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d006      	beq.n	800d6a8 <etharp_query+0x1c0>
 800d69a:	4b2a      	ldr	r3, [pc, #168]	; (800d744 <etharp_query+0x25c>)
 800d69c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d6a0:	492f      	ldr	r1, [pc, #188]	; (800d760 <etharp_query+0x278>)
 800d6a2:	482a      	ldr	r0, [pc, #168]	; (800d74c <etharp_query+0x264>)
 800d6a4:	f001 fd8c 	bl	800f1c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	7b1b      	ldrb	r3, [r3, #12]
 800d6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <etharp_query+0x1d2>
        copy_needed = 1;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	61bb      	str	r3, [r7, #24]
        break;
 800d6b8:	e005      	b.n	800d6c6 <etharp_query+0x1de>
      }
      p = p->next;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d1df      	bne.n	800d686 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d007      	beq.n	800d6dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d6d2:	200e      	movs	r0, #14
 800d6d4:	f7f9 f96e 	bl	80069b4 <pbuf_clone>
 800d6d8:	61f8      	str	r0, [r7, #28]
 800d6da:	e004      	b.n	800d6e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d6e0:	69f8      	ldr	r0, [r7, #28]
 800d6e2:	f7f8 ff09 	bl	80064f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d021      	beq.n	800d730 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d6ec:	7c7a      	ldrb	r2, [r7, #17]
 800d6ee:	4918      	ldr	r1, [pc, #96]	; (800d750 <etharp_query+0x268>)
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	4413      	add	r3, r2
 800d6f6:	00db      	lsls	r3, r3, #3
 800d6f8:	440b      	add	r3, r1
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00a      	beq.n	800d716 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d700:	7c7a      	ldrb	r2, [r7, #17]
 800d702:	4913      	ldr	r1, [pc, #76]	; (800d750 <etharp_query+0x268>)
 800d704:	4613      	mov	r3, r2
 800d706:	005b      	lsls	r3, r3, #1
 800d708:	4413      	add	r3, r2
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	440b      	add	r3, r1
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4618      	mov	r0, r3
 800d712:	f7f8 fe51 	bl	80063b8 <pbuf_free>
      }
      arp_table[i].q = p;
 800d716:	7c7a      	ldrb	r2, [r7, #17]
 800d718:	490d      	ldr	r1, [pc, #52]	; (800d750 <etharp_query+0x268>)
 800d71a:	4613      	mov	r3, r2
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	4413      	add	r3, r2
 800d720:	00db      	lsls	r3, r3, #3
 800d722:	440b      	add	r3, r1
 800d724:	69fa      	ldr	r2, [r7, #28]
 800d726:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d72e:	e002      	b.n	800d736 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d730:	23ff      	movs	r3, #255	; 0xff
 800d732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3728      	adds	r7, #40	; 0x28
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	08012914 	.word	0x08012914
 800d748:	08012ac0 	.word	0x08012ac0
 800d74c:	0801298c 	.word	0x0801298c
 800d750:	200089e4 	.word	0x200089e4
 800d754:	08012ad0 	.word	0x08012ad0
 800d758:	08012ab4 	.word	0x08012ab4
 800d75c:	20008ad4 	.word	0x20008ad4
 800d760:	08012af8 	.word	0x08012af8

0800d764 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b08a      	sub	sp, #40	; 0x28
 800d768:	af02      	add	r7, sp, #8
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
 800d770:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <etharp_raw+0x26>
 800d77c:	4b3a      	ldr	r3, [pc, #232]	; (800d868 <etharp_raw+0x104>)
 800d77e:	f240 4257 	movw	r2, #1111	; 0x457
 800d782:	493a      	ldr	r1, [pc, #232]	; (800d86c <etharp_raw+0x108>)
 800d784:	483a      	ldr	r0, [pc, #232]	; (800d870 <etharp_raw+0x10c>)
 800d786:	f001 fd1b 	bl	800f1c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d78a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d78e:	211c      	movs	r1, #28
 800d790:	200e      	movs	r0, #14
 800d792:	f7f8 fb2d 	bl	8005df0 <pbuf_alloc>
 800d796:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d102      	bne.n	800d7a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a2:	e05d      	b.n	800d860 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	895b      	ldrh	r3, [r3, #10]
 800d7a8:	2b1b      	cmp	r3, #27
 800d7aa:	d806      	bhi.n	800d7ba <etharp_raw+0x56>
 800d7ac:	4b2e      	ldr	r3, [pc, #184]	; (800d868 <etharp_raw+0x104>)
 800d7ae:	f240 4262 	movw	r2, #1122	; 0x462
 800d7b2:	4930      	ldr	r1, [pc, #192]	; (800d874 <etharp_raw+0x110>)
 800d7b4:	482e      	ldr	r0, [pc, #184]	; (800d870 <etharp_raw+0x10c>)
 800d7b6:	f001 fd03 	bl	800f1c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d7c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f7 fb44 	bl	8004e50 <lwip_htons>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d7d6:	2b06      	cmp	r3, #6
 800d7d8:	d006      	beq.n	800d7e8 <etharp_raw+0x84>
 800d7da:	4b23      	ldr	r3, [pc, #140]	; (800d868 <etharp_raw+0x104>)
 800d7dc:	f240 4269 	movw	r2, #1129	; 0x469
 800d7e0:	4925      	ldr	r1, [pc, #148]	; (800d878 <etharp_raw+0x114>)
 800d7e2:	4823      	ldr	r0, [pc, #140]	; (800d870 <etharp_raw+0x10c>)
 800d7e4:	f001 fcec 	bl	800f1c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	2206      	movs	r2, #6
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 fcb5 	bl	800f160 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	3312      	adds	r3, #18
 800d7fa:	2206      	movs	r2, #6
 800d7fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fcae 	bl	800f160 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	330e      	adds	r3, #14
 800d808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d80a:	6812      	ldr	r2, [r2, #0]
 800d80c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	3318      	adds	r3, #24
 800d812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d814:	6812      	ldr	r2, [r2, #0]
 800d816:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2200      	movs	r2, #0
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	2200      	movs	r2, #0
 800d820:	f042 0201 	orr.w	r2, r2, #1
 800d824:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2200      	movs	r2, #0
 800d82a:	f042 0208 	orr.w	r2, r2, #8
 800d82e:	709a      	strb	r2, [r3, #2]
 800d830:	2200      	movs	r2, #0
 800d832:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2206      	movs	r2, #6
 800d838:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2204      	movs	r2, #4
 800d83e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d840:	f640 0306 	movw	r3, #2054	; 0x806
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	69b9      	ldr	r1, [r7, #24]
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f001 fc0b 	bl	800f068 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d852:	69b8      	ldr	r0, [r7, #24]
 800d854:	f7f8 fdb0 	bl	80063b8 <pbuf_free>
  p = NULL;
 800d858:	2300      	movs	r3, #0
 800d85a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d85c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3720      	adds	r7, #32
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	08012914 	.word	0x08012914
 800d86c:	08012a64 	.word	0x08012a64
 800d870:	0801298c 	.word	0x0801298c
 800d874:	08012b14 	.word	0x08012b14
 800d878:	08012b48 	.word	0x08012b48

0800d87c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af04      	add	r7, sp, #16
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d898:	2201      	movs	r2, #1
 800d89a:	9203      	str	r2, [sp, #12]
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	9202      	str	r2, [sp, #8]
 800d8a0:	4a06      	ldr	r2, [pc, #24]	; (800d8bc <etharp_request_dst+0x40>)
 800d8a2:	9201      	str	r2, [sp, #4]
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f7ff ff5a 	bl	800d764 <etharp_raw>
 800d8b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	080130cc 	.word	0x080130cc

0800d8c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d8ca:	4a05      	ldr	r2, [pc, #20]	; (800d8e0 <etharp_request+0x20>)
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff ffd4 	bl	800d87c <etharp_request_dst>
 800d8d4:	4603      	mov	r3, r0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	080130c4 	.word	0x080130c4

0800d8e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08e      	sub	sp, #56	; 0x38
 800d8e8:	af04      	add	r7, sp, #16
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d8ee:	4b79      	ldr	r3, [pc, #484]	; (800dad4 <icmp_input+0x1f0>)
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	f003 030f 	and.w	r3, r3, #15
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	b2db      	uxtb	r3, r3
 800d902:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d906:	2b13      	cmp	r3, #19
 800d908:	f240 80cd 	bls.w	800daa6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	895b      	ldrh	r3, [r3, #10]
 800d910:	2b03      	cmp	r3, #3
 800d912:	f240 80ca 	bls.w	800daaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d920:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 80b7 	beq.w	800da98 <icmp_input+0x1b4>
 800d92a:	2b08      	cmp	r3, #8
 800d92c:	f040 80b7 	bne.w	800da9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d930:	4b69      	ldr	r3, [pc, #420]	; (800dad8 <icmp_input+0x1f4>)
 800d932:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d934:	4b67      	ldr	r3, [pc, #412]	; (800dad4 <icmp_input+0x1f0>)
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d93c:	2be0      	cmp	r3, #224	; 0xe0
 800d93e:	f000 80bb 	beq.w	800dab8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d942:	4b64      	ldr	r3, [pc, #400]	; (800dad4 <icmp_input+0x1f0>)
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	4a63      	ldr	r2, [pc, #396]	; (800dad4 <icmp_input+0x1f0>)
 800d948:	6812      	ldr	r2, [r2, #0]
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 fbed 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	f040 80b1 	bne.w	800dabc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	891b      	ldrh	r3, [r3, #8]
 800d95e:	2b07      	cmp	r3, #7
 800d960:	f240 80a5 	bls.w	800daae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d966:	330e      	adds	r3, #14
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7f8 fc8e 	bl	800628c <pbuf_add_header>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d04b      	beq.n	800da0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	891a      	ldrh	r2, [r3, #8]
 800d97a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d97c:	4413      	add	r3, r2
 800d97e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	891b      	ldrh	r3, [r3, #8]
 800d984:	8b7a      	ldrh	r2, [r7, #26]
 800d986:	429a      	cmp	r2, r3
 800d988:	f0c0 809a 	bcc.w	800dac0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d98c:	8b7b      	ldrh	r3, [r7, #26]
 800d98e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d992:	4619      	mov	r1, r3
 800d994:	200e      	movs	r0, #14
 800d996:	f7f8 fa2b 	bl	8005df0 <pbuf_alloc>
 800d99a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	f000 8090 	beq.w	800dac4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	895b      	ldrh	r3, [r3, #10]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d203      	bcs.n	800d9ba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d9b2:	6978      	ldr	r0, [r7, #20]
 800d9b4:	f7f8 fd00 	bl	80063b8 <pbuf_free>
          goto icmperr;
 800d9b8:	e085      	b.n	800dac6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d9c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 fbcc 	bl	800f160 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d9c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6978      	ldr	r0, [r7, #20]
 800d9ce:	f7f8 fc6d 	bl	80062ac <pbuf_remove_header>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d009      	beq.n	800d9ec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d9d8:	4b40      	ldr	r3, [pc, #256]	; (800dadc <icmp_input+0x1f8>)
 800d9da:	22b6      	movs	r2, #182	; 0xb6
 800d9dc:	4940      	ldr	r1, [pc, #256]	; (800dae0 <icmp_input+0x1fc>)
 800d9de:	4841      	ldr	r0, [pc, #260]	; (800dae4 <icmp_input+0x200>)
 800d9e0:	f001 fbee 	bl	800f1c0 <iprintf>
          pbuf_free(r);
 800d9e4:	6978      	ldr	r0, [r7, #20]
 800d9e6:	f7f8 fce7 	bl	80063b8 <pbuf_free>
          goto icmperr;
 800d9ea:	e06c      	b.n	800dac6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	6978      	ldr	r0, [r7, #20]
 800d9f0:	f7f8 fe0a 	bl	8006608 <pbuf_copy>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d9fa:	6978      	ldr	r0, [r7, #20]
 800d9fc:	f7f8 fcdc 	bl	80063b8 <pbuf_free>
          goto icmperr;
 800da00:	e061      	b.n	800dac6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f8 fcd8 	bl	80063b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	607b      	str	r3, [r7, #4]
 800da0c:	e00f      	b.n	800da2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da10:	330e      	adds	r3, #14
 800da12:	4619      	mov	r1, r3
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7f8 fc49 	bl	80062ac <pbuf_remove_header>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d006      	beq.n	800da2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800da20:	4b2e      	ldr	r3, [pc, #184]	; (800dadc <icmp_input+0x1f8>)
 800da22:	22c7      	movs	r2, #199	; 0xc7
 800da24:	4930      	ldr	r1, [pc, #192]	; (800dae8 <icmp_input+0x204>)
 800da26:	482f      	ldr	r0, [pc, #188]	; (800dae4 <icmp_input+0x200>)
 800da28:	f001 fbca 	bl	800f1c0 <iprintf>
          goto icmperr;
 800da2c:	e04b      	b.n	800dac6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800da34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da36:	4619      	mov	r1, r3
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7f8 fc27 	bl	800628c <pbuf_add_header>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d12b      	bne.n	800da9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800da52:	4b20      	ldr	r3, [pc, #128]	; (800dad4 <icmp_input+0x1f0>)
 800da54:	691a      	ldr	r2, [r3, #16]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2200      	movs	r2, #0
 800da5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	2200      	movs	r2, #0
 800da64:	709a      	strb	r2, [r3, #2]
 800da66:	2200      	movs	r2, #0
 800da68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	22ff      	movs	r2, #255	; 0xff
 800da6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	729a      	strb	r2, [r3, #10]
 800da76:	2200      	movs	r2, #0
 800da78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	9302      	str	r3, [sp, #8]
 800da7e:	2301      	movs	r3, #1
 800da80:	9301      	str	r3, [sp, #4]
 800da82:	2300      	movs	r3, #0
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	23ff      	movs	r3, #255	; 0xff
 800da88:	2200      	movs	r2, #0
 800da8a:	69f9      	ldr	r1, [r7, #28]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fa75 	bl	800df7c <ip4_output_if>
 800da92:	4603      	mov	r3, r0
 800da94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800da96:	e001      	b.n	800da9c <icmp_input+0x1b8>
      break;
 800da98:	bf00      	nop
 800da9a:	e000      	b.n	800da9e <icmp_input+0x1ba>
      break;
 800da9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7f8 fc8a 	bl	80063b8 <pbuf_free>
  return;
 800daa4:	e013      	b.n	800dace <icmp_input+0x1ea>
    goto lenerr;
 800daa6:	bf00      	nop
 800daa8:	e002      	b.n	800dab0 <icmp_input+0x1cc>
    goto lenerr;
 800daaa:	bf00      	nop
 800daac:	e000      	b.n	800dab0 <icmp_input+0x1cc>
        goto lenerr;
 800daae:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7f8 fc81 	bl	80063b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dab6:	e00a      	b.n	800dace <icmp_input+0x1ea>
        goto icmperr;
 800dab8:	bf00      	nop
 800daba:	e004      	b.n	800dac6 <icmp_input+0x1e2>
        goto icmperr;
 800dabc:	bf00      	nop
 800dabe:	e002      	b.n	800dac6 <icmp_input+0x1e2>
          goto icmperr;
 800dac0:	bf00      	nop
 800dac2:	e000      	b.n	800dac6 <icmp_input+0x1e2>
          goto icmperr;
 800dac4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7f8 fc76 	bl	80063b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dacc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dace:	3728      	adds	r7, #40	; 0x28
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20003254 	.word	0x20003254
 800dad8:	20003268 	.word	0x20003268
 800dadc:	08012b8c 	.word	0x08012b8c
 800dae0:	08012bc4 	.word	0x08012bc4
 800dae4:	08012bfc 	.word	0x08012bfc
 800dae8:	08012c24 	.word	0x08012c24

0800daec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800daf8:	78fb      	ldrb	r3, [r7, #3]
 800dafa:	461a      	mov	r2, r3
 800dafc:	2103      	movs	r1, #3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f814 	bl	800db2c <icmp_send_response>
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	461a      	mov	r2, r3
 800db1c:	210b      	movs	r1, #11
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f804 	bl	800db2c <icmp_send_response>
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08c      	sub	sp, #48	; 0x30
 800db30:	af04      	add	r7, sp, #16
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	70fb      	strb	r3, [r7, #3]
 800db38:	4613      	mov	r3, r2
 800db3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800db3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db40:	2124      	movs	r1, #36	; 0x24
 800db42:	2022      	movs	r0, #34	; 0x22
 800db44:	f7f8 f954 	bl	8005df0 <pbuf_alloc>
 800db48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d04c      	beq.n	800dbea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	895b      	ldrh	r3, [r3, #10]
 800db54:	2b23      	cmp	r3, #35	; 0x23
 800db56:	d806      	bhi.n	800db66 <icmp_send_response+0x3a>
 800db58:	4b26      	ldr	r3, [pc, #152]	; (800dbf4 <icmp_send_response+0xc8>)
 800db5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800db5e:	4926      	ldr	r1, [pc, #152]	; (800dbf8 <icmp_send_response+0xcc>)
 800db60:	4826      	ldr	r0, [pc, #152]	; (800dbfc <icmp_send_response+0xd0>)
 800db62:	f001 fb2d 	bl	800f1c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	78fa      	ldrb	r2, [r7, #3]
 800db76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	78ba      	ldrb	r2, [r7, #2]
 800db7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2200      	movs	r2, #0
 800db82:	711a      	strb	r2, [r3, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2200      	movs	r2, #0
 800db8c:	719a      	strb	r2, [r3, #6]
 800db8e:	2200      	movs	r2, #0
 800db90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	f103 0008 	add.w	r0, r3, #8
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	221c      	movs	r2, #28
 800dba0:	4619      	mov	r1, r3
 800dba2:	f001 fadd 	bl	800f160 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dbac:	f107 030c 	add.w	r3, r7, #12
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 f825 	bl	800dc00 <ip4_route>
 800dbb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d011      	beq.n	800dbe2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	709a      	strb	r2, [r3, #2]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dbc8:	f107 020c 	add.w	r2, r7, #12
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	9302      	str	r3, [sp, #8]
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	23ff      	movs	r3, #255	; 0xff
 800dbda:	2100      	movs	r1, #0
 800dbdc:	69f8      	ldr	r0, [r7, #28]
 800dbde:	f000 f9cd 	bl	800df7c <ip4_output_if>
  }
  pbuf_free(q);
 800dbe2:	69f8      	ldr	r0, [r7, #28]
 800dbe4:	f7f8 fbe8 	bl	80063b8 <pbuf_free>
 800dbe8:	e000      	b.n	800dbec <icmp_send_response+0xc0>
    return;
 800dbea:	bf00      	nop
}
 800dbec:	3720      	adds	r7, #32
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	08012b8c 	.word	0x08012b8c
 800dbf8:	08012c58 	.word	0x08012c58
 800dbfc:	08012bfc 	.word	0x08012bfc

0800dc00 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dc08:	4b33      	ldr	r3, [pc, #204]	; (800dcd8 <ip4_route+0xd8>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60fb      	str	r3, [r7, #12]
 800dc0e:	e036      	b.n	800dc7e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d02b      	beq.n	800dc78 <ip4_route+0x78>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc26:	089b      	lsrs	r3, r3, #2
 800dc28:	f003 0301 	and.w	r3, r3, #1
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d022      	beq.n	800dc78 <ip4_route+0x78>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	3304      	adds	r3, #4
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01d      	beq.n	800dc78 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3304      	adds	r3, #4
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	405a      	eors	r2, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	3308      	adds	r3, #8
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4013      	ands	r3, r2
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	e038      	b.n	800dcca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc5e:	f003 0302 	and.w	r3, r3, #2
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d108      	bne.n	800dc78 <ip4_route+0x78>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	330c      	adds	r3, #12
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d101      	bne.n	800dc78 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	e028      	b.n	800dcca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	60fb      	str	r3, [r7, #12]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1c5      	bne.n	800dc10 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc84:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <ip4_route+0xdc>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01a      	beq.n	800dcc2 <ip4_route+0xc2>
 800dc8c:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <ip4_route+0xdc>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d012      	beq.n	800dcc2 <ip4_route+0xc2>
 800dc9c:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <ip4_route+0xdc>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dca4:	f003 0304 	and.w	r3, r3, #4
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00a      	beq.n	800dcc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dcac:	4b0b      	ldr	r3, [pc, #44]	; (800dcdc <ip4_route+0xdc>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b7f      	cmp	r3, #127	; 0x7f
 800dcc0:	d101      	bne.n	800dcc6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e001      	b.n	800dcca <ip4_route+0xca>
  }

  return netif_default;
 800dcc6:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <ip4_route+0xdc>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	20008978 	.word	0x20008978
 800dcdc:	2000897c 	.word	0x2000897c

0800dce0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d016      	beq.n	800dd26 <ip4_input_accept+0x46>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d011      	beq.n	800dd26 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dd02:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <ip4_input_accept+0x50>)
 800dd04:	695a      	ldr	r2, [r3, #20]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d008      	beq.n	800dd22 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <ip4_input_accept+0x50>)
 800dd12:	695b      	ldr	r3, [r3, #20]
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 fa08 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800dd1c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e000      	b.n	800dd28 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20003254 	.word	0x20003254

0800dd34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	091b      	lsrs	r3, r3, #4
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b04      	cmp	r3, #4
 800dd4e:	d004      	beq.n	800dd5a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7f8 fb31 	bl	80063b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	e107      	b.n	800df6a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	f003 030f 	and.w	r3, r3, #15
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	885b      	ldrh	r3, [r3, #2]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f7 f86d 	bl	8004e50 <lwip_htons>
 800dd76:	4603      	mov	r3, r0
 800dd78:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	891b      	ldrh	r3, [r3, #8]
 800dd7e:	89ba      	ldrh	r2, [r7, #12]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d204      	bcs.n	800dd8e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dd84:	89bb      	ldrh	r3, [r7, #12]
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7f8 f98f 	bl	80060ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	895b      	ldrh	r3, [r3, #10]
 800dd92:	89fa      	ldrh	r2, [r7, #14]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d807      	bhi.n	800dda8 <ip4_input+0x74>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	891b      	ldrh	r3, [r3, #8]
 800dd9c:	89ba      	ldrh	r2, [r7, #12]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d802      	bhi.n	800dda8 <ip4_input+0x74>
 800dda2:	89fb      	ldrh	r3, [r7, #14]
 800dda4:	2b13      	cmp	r3, #19
 800dda6:	d804      	bhi.n	800ddb2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f7f8 fb05 	bl	80063b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e0db      	b.n	800df6a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	4a6f      	ldr	r2, [pc, #444]	; (800df74 <ip4_input+0x240>)
 800ddb8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	4a6d      	ldr	r2, [pc, #436]	; (800df74 <ip4_input+0x240>)
 800ddc0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ddc2:	4b6c      	ldr	r3, [pc, #432]	; (800df74 <ip4_input+0x240>)
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddca:	2be0      	cmp	r3, #224	; 0xe0
 800ddcc:	d112      	bne.n	800ddf4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddd4:	f003 0301 	and.w	r3, r3, #1
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d007      	beq.n	800ddee <ip4_input+0xba>
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	3304      	adds	r3, #4
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <ip4_input+0xba>
      netif = inp;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	613b      	str	r3, [r7, #16]
 800ddec:	e02a      	b.n	800de44 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	e027      	b.n	800de44 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ddf4:	6838      	ldr	r0, [r7, #0]
 800ddf6:	f7ff ff73 	bl	800dce0 <ip4_input_accept>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <ip4_input+0xd2>
      netif = inp;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	613b      	str	r3, [r7, #16]
 800de04:	e01e      	b.n	800de44 <ip4_input+0x110>
    } else {
      netif = NULL;
 800de06:	2300      	movs	r3, #0
 800de08:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800de0a:	4b5a      	ldr	r3, [pc, #360]	; (800df74 <ip4_input+0x240>)
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b7f      	cmp	r3, #127	; 0x7f
 800de12:	d017      	beq.n	800de44 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800de14:	4b58      	ldr	r3, [pc, #352]	; (800df78 <ip4_input+0x244>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	613b      	str	r3, [r7, #16]
 800de1a:	e00e      	b.n	800de3a <ip4_input+0x106>
          if (netif == inp) {
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	429a      	cmp	r2, r3
 800de22:	d006      	beq.n	800de32 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800de24:	6938      	ldr	r0, [r7, #16]
 800de26:	f7ff ff5b 	bl	800dce0 <ip4_input_accept>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d108      	bne.n	800de42 <ip4_input+0x10e>
 800de30:	e000      	b.n	800de34 <ip4_input+0x100>
            continue;
 800de32:	bf00      	nop
        NETIF_FOREACH(netif) {
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	613b      	str	r3, [r7, #16]
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1ed      	bne.n	800de1c <ip4_input+0xe8>
 800de40:	e000      	b.n	800de44 <ip4_input+0x110>
            break;
 800de42:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de44:	4b4b      	ldr	r3, [pc, #300]	; (800df74 <ip4_input+0x240>)
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 f96e 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d105      	bne.n	800de62 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800de56:	4b47      	ldr	r3, [pc, #284]	; (800df74 <ip4_input+0x240>)
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de5e:	2be0      	cmp	r3, #224	; 0xe0
 800de60:	d104      	bne.n	800de6c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7f8 faa8 	bl	80063b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	e07e      	b.n	800df6a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d104      	bne.n	800de7c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7f8 faa0 	bl	80063b8 <pbuf_free>
    return ERR_OK;
 800de78:	2300      	movs	r3, #0
 800de7a:	e076      	b.n	800df6a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	88db      	ldrh	r3, [r3, #6]
 800de80:	b29b      	uxth	r3, r3
 800de82:	461a      	mov	r2, r3
 800de84:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800de88:	4013      	ands	r3, r2
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00b      	beq.n	800dea6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 fd22 	bl	800e8d8 <ip4_reass>
 800de94:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d101      	bne.n	800dea0 <ip4_input+0x16c>
      return ERR_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	e064      	b.n	800df6a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dea6:	4a33      	ldr	r2, [pc, #204]	; (800df74 <ip4_input+0x240>)
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800deac:	4a31      	ldr	r2, [pc, #196]	; (800df74 <ip4_input+0x240>)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800deb2:	4a30      	ldr	r2, [pc, #192]	; (800df74 <ip4_input+0x240>)
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	f003 030f 	and.w	r3, r3, #15
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	4b2a      	ldr	r3, [pc, #168]	; (800df74 <ip4_input+0x240>)
 800deca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7f8 f9eb 	bl	80062ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	7a5b      	ldrb	r3, [r3, #9]
 800deda:	2b11      	cmp	r3, #17
 800dedc:	d006      	beq.n	800deec <ip4_input+0x1b8>
 800dede:	2b11      	cmp	r3, #17
 800dee0:	dc13      	bgt.n	800df0a <ip4_input+0x1d6>
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d00c      	beq.n	800df00 <ip4_input+0x1cc>
 800dee6:	2b06      	cmp	r3, #6
 800dee8:	d005      	beq.n	800def6 <ip4_input+0x1c2>
 800deea:	e00e      	b.n	800df0a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7fe f8e6 	bl	800c0c0 <udp_input>
        break;
 800def4:	e026      	b.n	800df44 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7fa f927 	bl	800814c <tcp_input>
        break;
 800defe:	e021      	b.n	800df44 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff fcee 	bl	800d8e4 <icmp_input>
        break;
 800df08:	e01c      	b.n	800df44 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df0a:	4b1a      	ldr	r3, [pc, #104]	; (800df74 <ip4_input+0x240>)
 800df0c:	695b      	ldr	r3, [r3, #20]
 800df0e:	6939      	ldr	r1, [r7, #16]
 800df10:	4618      	mov	r0, r3
 800df12:	f000 f90b 	bl	800e12c <ip4_addr_isbroadcast_u32>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10f      	bne.n	800df3c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df1c:	4b15      	ldr	r3, [pc, #84]	; (800df74 <ip4_input+0x240>)
 800df1e:	695b      	ldr	r3, [r3, #20]
 800df20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df24:	2be0      	cmp	r3, #224	; 0xe0
 800df26:	d009      	beq.n	800df3c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800df28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7f8 fa2f 	bl	8006392 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800df34:	2102      	movs	r1, #2
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fdd8 	bl	800daec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7f8 fa3b 	bl	80063b8 <pbuf_free>
        break;
 800df42:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800df44:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <ip4_input+0x240>)
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800df4a:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <ip4_input+0x240>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800df50:	4b08      	ldr	r3, [pc, #32]	; (800df74 <ip4_input+0x240>)
 800df52:	2200      	movs	r2, #0
 800df54:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800df56:	4b07      	ldr	r3, [pc, #28]	; (800df74 <ip4_input+0x240>)
 800df58:	2200      	movs	r2, #0
 800df5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800df5c:	4b05      	ldr	r3, [pc, #20]	; (800df74 <ip4_input+0x240>)
 800df5e:	2200      	movs	r2, #0
 800df60:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800df62:	4b04      	ldr	r3, [pc, #16]	; (800df74 <ip4_input+0x240>)
 800df64:	2200      	movs	r2, #0
 800df66:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3718      	adds	r7, #24
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	20003254 	.word	0x20003254
 800df78:	20008978 	.word	0x20008978

0800df7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b08a      	sub	sp, #40	; 0x28
 800df80:	af04      	add	r7, sp, #16
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
 800df88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d009      	beq.n	800dfa8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <ip4_output_if+0x26>
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	3304      	adds	r3, #4
 800dfa6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dfa8:	78fa      	ldrb	r2, [r7, #3]
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	9302      	str	r3, [sp, #8]
 800dfae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfb2:	9301      	str	r3, [sp, #4]
 800dfb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	6979      	ldr	r1, [r7, #20]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f000 f805 	bl	800dfd0 <ip4_output_if_src>
 800dfc6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	7b9b      	ldrb	r3, [r3, #14]
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d006      	beq.n	800dff4 <ip4_output_if_src+0x24>
 800dfe6:	4b4b      	ldr	r3, [pc, #300]	; (800e114 <ip4_output_if_src+0x144>)
 800dfe8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dfec:	494a      	ldr	r1, [pc, #296]	; (800e118 <ip4_output_if_src+0x148>)
 800dfee:	484b      	ldr	r0, [pc, #300]	; (800e11c <ip4_output_if_src+0x14c>)
 800dff0:	f001 f8e6 	bl	800f1c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d060      	beq.n	800e0bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dffa:	2314      	movs	r3, #20
 800dffc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dffe:	2114      	movs	r1, #20
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7f8 f943 	bl	800628c <pbuf_add_header>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e00c:	f06f 0301 	mvn.w	r3, #1
 800e010:	e07c      	b.n	800e10c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	895b      	ldrh	r3, [r3, #10]
 800e01c:	2b13      	cmp	r3, #19
 800e01e:	d806      	bhi.n	800e02e <ip4_output_if_src+0x5e>
 800e020:	4b3c      	ldr	r3, [pc, #240]	; (800e114 <ip4_output_if_src+0x144>)
 800e022:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e026:	493e      	ldr	r1, [pc, #248]	; (800e120 <ip4_output_if_src+0x150>)
 800e028:	483c      	ldr	r0, [pc, #240]	; (800e11c <ip4_output_if_src+0x14c>)
 800e02a:	f001 f8c9 	bl	800f1c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	78fa      	ldrb	r2, [r7, #3]
 800e032:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e03a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e044:	8b7b      	ldrh	r3, [r7, #26]
 800e046:	089b      	lsrs	r3, r3, #2
 800e048:	b29b      	uxth	r3, r3
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e050:	b2da      	uxtb	r2, r3
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e05c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	891b      	ldrh	r3, [r3, #8]
 800e062:	4618      	mov	r0, r3
 800e064:	f7f6 fef4 	bl	8004e50 <lwip_htons>
 800e068:	4603      	mov	r3, r0
 800e06a:	461a      	mov	r2, r3
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	2200      	movs	r2, #0
 800e074:	719a      	strb	r2, [r3, #6]
 800e076:	2200      	movs	r2, #0
 800e078:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e07a:	4b2a      	ldr	r3, [pc, #168]	; (800e124 <ip4_output_if_src+0x154>)
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f6 fee6 	bl	8004e50 <lwip_htons>
 800e084:	4603      	mov	r3, r0
 800e086:	461a      	mov	r2, r3
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e08c:	4b25      	ldr	r3, [pc, #148]	; (800e124 <ip4_output_if_src+0x154>)
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	3301      	adds	r3, #1
 800e092:	b29a      	uxth	r2, r3
 800e094:	4b23      	ldr	r3, [pc, #140]	; (800e124 <ip4_output_if_src+0x154>)
 800e096:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d104      	bne.n	800e0a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e09e:	4b22      	ldr	r3, [pc, #136]	; (800e128 <ip4_output_if_src+0x158>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	60da      	str	r2, [r3, #12]
 800e0a6:	e003      	b.n	800e0b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	729a      	strb	r2, [r3, #10]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	72da      	strb	r2, [r3, #11]
 800e0ba:	e00f      	b.n	800e0dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	895b      	ldrh	r3, [r3, #10]
 800e0c0:	2b13      	cmp	r3, #19
 800e0c2:	d802      	bhi.n	800e0ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e0c4:	f06f 0301 	mvn.w	r3, #1
 800e0c8:	e020      	b.n	800e10c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e0d6:	f107 0314 	add.w	r3, r7, #20
 800e0da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00c      	beq.n	800e0fe <ip4_output_if_src+0x12e>
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	891a      	ldrh	r2, [r3, #8]
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d906      	bls.n	800e0fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f000 fde3 	bl	800ecc0 <ip4_frag>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	e006      	b.n	800e10c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e100:	695b      	ldr	r3, [r3, #20]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	68f9      	ldr	r1, [r7, #12]
 800e106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e108:	4798      	blx	r3
 800e10a:	4603      	mov	r3, r0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3720      	adds	r7, #32
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	08012c84 	.word	0x08012c84
 800e118:	08012cb8 	.word	0x08012cb8
 800e11c:	08012cc4 	.word	0x08012cc4
 800e120:	08012cec 	.word	0x08012cec
 800e124:	20008ad6 	.word	0x20008ad6
 800e128:	080130c0 	.word	0x080130c0

0800e12c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b085      	sub	sp, #20
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e140:	d002      	beq.n	800e148 <ip4_addr_isbroadcast_u32+0x1c>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e148:	2301      	movs	r3, #1
 800e14a:	e02a      	b.n	800e1a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e152:	f003 0302 	and.w	r3, r3, #2
 800e156:	2b00      	cmp	r3, #0
 800e158:	d101      	bne.n	800e15e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e021      	b.n	800e1a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	3304      	adds	r3, #4
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	429a      	cmp	r2, r3
 800e168:	d101      	bne.n	800e16e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	e019      	b.n	800e1a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	3304      	adds	r3, #4
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	405a      	eors	r2, r3
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4013      	ands	r3, r2
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10d      	bne.n	800e1a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	3308      	adds	r3, #8
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	43da      	mvns	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	3308      	adds	r3, #8
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e198:	429a      	cmp	r2, r3
 800e19a:	d101      	bne.n	800e1a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e19c:	2301      	movs	r3, #1
 800e19e:	e000      	b.n	800e1a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e1a0:	2300      	movs	r3, #0
  }
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
	...

0800e1b0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e1b8:	2210      	movs	r2, #16
 800e1ba:	4904      	ldr	r1, [pc, #16]	; (800e1cc <ip4addr_ntoa+0x1c>)
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 f807 	bl	800e1d0 <ip4addr_ntoa_r>
 800e1c2:	4603      	mov	r3, r0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	20008ad8 	.word	0x20008ad8

0800e1d0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b08d      	sub	sp, #52	; 0x34
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e1ea:	f107 0318 	add.w	r3, r7, #24
 800e1ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1f6:	e058      	b.n	800e2aa <ip4addr_ntoa_r+0xda>
    i = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	781a      	ldrb	r2, [r3, #0]
 800e202:	4b32      	ldr	r3, [pc, #200]	; (800e2cc <ip4addr_ntoa_r+0xfc>)
 800e204:	fba3 1302 	umull	r1, r3, r3, r2
 800e208:	08d9      	lsrs	r1, r3, #3
 800e20a:	460b      	mov	r3, r1
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	440b      	add	r3, r1
 800e210:	005b      	lsls	r3, r3, #1
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	4a2c      	ldr	r2, [pc, #176]	; (800e2cc <ip4addr_ntoa_r+0xfc>)
 800e21c:	fba2 2303 	umull	r2, r3, r2, r3
 800e220:	08db      	lsrs	r3, r3, #3
 800e222:	b2da      	uxtb	r2, r3
 800e224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e226:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e232:	4619      	mov	r1, r3
 800e234:	7ffb      	ldrb	r3, [r7, #31]
 800e236:	3330      	adds	r3, #48	; 0x30
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800e23e:	443b      	add	r3, r7
 800e240:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1d8      	bne.n	800e1fe <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e24c:	e011      	b.n	800e272 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	623a      	str	r2, [r7, #32]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	429a      	cmp	r2, r3
 800e258:	dc01      	bgt.n	800e25e <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e25a:	2300      	movs	r3, #0
 800e25c:	e030      	b.n	800e2c0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e25e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	1c59      	adds	r1, r3, #1
 800e266:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e268:	3230      	adds	r2, #48	; 0x30
 800e26a:	443a      	add	r2, r7
 800e26c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e270:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e272:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e276:	1e5a      	subs	r2, r3, #1
 800e278:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1e6      	bne.n	800e24e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	623a      	str	r2, [r7, #32]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	429a      	cmp	r2, r3
 800e28a:	dc01      	bgt.n	800e290 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e28c:	2300      	movs	r3, #0
 800e28e:	e017      	b.n	800e2c0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e296:	222e      	movs	r2, #46	; 0x2e
 800e298:	701a      	strb	r2, [r3, #0]
    ap++;
 800e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29c:	3301      	adds	r3, #1
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ae:	2b03      	cmp	r3, #3
 800e2b0:	d9a2      	bls.n	800e1f8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	701a      	strb	r2, [r3, #0]
  return buf;
 800e2be:	68bb      	ldr	r3, [r7, #8]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3734      	adds	r7, #52	; 0x34
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	cccccccd 	.word	0xcccccccd

0800e2d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2da:	4b12      	ldr	r3, [pc, #72]	; (800e324 <ip_reass_tmr+0x54>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2e0:	e018      	b.n	800e314 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	7fdb      	ldrb	r3, [r3, #31]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00b      	beq.n	800e302 <ip_reass_tmr+0x32>
      r->timer--;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	7fdb      	ldrb	r3, [r3, #31]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
 800e300:	e008      	b.n	800e314 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 f80a 	bl	800e328 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e3      	bne.n	800e2e2 <ip_reass_tmr+0x12>
    }
  }
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20008ae8 	.word	0x20008ae8

0800e328 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d105      	bne.n	800e34a <ip_reass_free_complete_datagram+0x22>
 800e33e:	4b45      	ldr	r3, [pc, #276]	; (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e340:	22ab      	movs	r2, #171	; 0xab
 800e342:	4945      	ldr	r1, [pc, #276]	; (800e458 <ip_reass_free_complete_datagram+0x130>)
 800e344:	4845      	ldr	r0, [pc, #276]	; (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e346:	f000 ff3b 	bl	800f1c0 <iprintf>
  if (prev != NULL) {
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	429a      	cmp	r2, r3
 800e358:	d005      	beq.n	800e366 <ip_reass_free_complete_datagram+0x3e>
 800e35a:	4b3e      	ldr	r3, [pc, #248]	; (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e35c:	22ad      	movs	r2, #173	; 0xad
 800e35e:	4940      	ldr	r1, [pc, #256]	; (800e460 <ip_reass_free_complete_datagram+0x138>)
 800e360:	483e      	ldr	r0, [pc, #248]	; (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e362:	f000 ff2d 	bl	800f1c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	889b      	ldrh	r3, [r3, #4]
 800e372:	b29b      	uxth	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d12a      	bne.n	800e3ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	6858      	ldr	r0, [r3, #4]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3308      	adds	r3, #8
 800e38e:	2214      	movs	r2, #20
 800e390:	4619      	mov	r1, r3
 800e392:	f000 fee5 	bl	800f160 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e396:	2101      	movs	r1, #1
 800e398:	69b8      	ldr	r0, [r7, #24]
 800e39a:	f7ff fbb7 	bl	800db0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e39e:	69b8      	ldr	r0, [r7, #24]
 800e3a0:	f7f8 f892 	bl	80064c8 <pbuf_clen>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3a8:	8bfa      	ldrh	r2, [r7, #30]
 800e3aa:	8a7b      	ldrh	r3, [r7, #18]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3b2:	db05      	blt.n	800e3c0 <ip_reass_free_complete_datagram+0x98>
 800e3b4:	4b27      	ldr	r3, [pc, #156]	; (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e3b6:	22bc      	movs	r2, #188	; 0xbc
 800e3b8:	492a      	ldr	r1, [pc, #168]	; (800e464 <ip_reass_free_complete_datagram+0x13c>)
 800e3ba:	4828      	ldr	r0, [pc, #160]	; (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e3bc:	f000 ff00 	bl	800f1c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3c0:	8bfa      	ldrh	r2, [r7, #30]
 800e3c2:	8a7b      	ldrh	r3, [r7, #18]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3c8:	69b8      	ldr	r0, [r7, #24]
 800e3ca:	f7f7 fff5 	bl	80063b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3d4:	e01f      	b.n	800e416 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7f8 f86e 	bl	80064c8 <pbuf_clen>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3f0:	8bfa      	ldrh	r2, [r7, #30]
 800e3f2:	8a7b      	ldrh	r3, [r7, #18]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3fa:	db05      	blt.n	800e408 <ip_reass_free_complete_datagram+0xe0>
 800e3fc:	4b15      	ldr	r3, [pc, #84]	; (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e3fe:	22cc      	movs	r2, #204	; 0xcc
 800e400:	4918      	ldr	r1, [pc, #96]	; (800e464 <ip_reass_free_complete_datagram+0x13c>)
 800e402:	4816      	ldr	r0, [pc, #88]	; (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e404:	f000 fedc 	bl	800f1c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e408:	8bfa      	ldrh	r2, [r7, #30]
 800e40a:	8a7b      	ldrh	r3, [r7, #18]
 800e40c:	4413      	add	r3, r2
 800e40e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7f7 ffd1 	bl	80063b8 <pbuf_free>
  while (p != NULL) {
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1dc      	bne.n	800e3d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f8c2 	bl	800e5a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e424:	4b10      	ldr	r3, [pc, #64]	; (800e468 <ip_reass_free_complete_datagram+0x140>)
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	8bfa      	ldrh	r2, [r7, #30]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d905      	bls.n	800e43a <ip_reass_free_complete_datagram+0x112>
 800e42e:	4b09      	ldr	r3, [pc, #36]	; (800e454 <ip_reass_free_complete_datagram+0x12c>)
 800e430:	22d2      	movs	r2, #210	; 0xd2
 800e432:	490e      	ldr	r1, [pc, #56]	; (800e46c <ip_reass_free_complete_datagram+0x144>)
 800e434:	4809      	ldr	r0, [pc, #36]	; (800e45c <ip_reass_free_complete_datagram+0x134>)
 800e436:	f000 fec3 	bl	800f1c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e43a:	4b0b      	ldr	r3, [pc, #44]	; (800e468 <ip_reass_free_complete_datagram+0x140>)
 800e43c:	881a      	ldrh	r2, [r3, #0]
 800e43e:	8bfb      	ldrh	r3, [r7, #30]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	b29a      	uxth	r2, r3
 800e444:	4b08      	ldr	r3, [pc, #32]	; (800e468 <ip_reass_free_complete_datagram+0x140>)
 800e446:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e448:	8bfb      	ldrh	r3, [r7, #30]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3720      	adds	r7, #32
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	08012d1c 	.word	0x08012d1c
 800e458:	08012d58 	.word	0x08012d58
 800e45c:	08012d64 	.word	0x08012d64
 800e460:	08012d8c 	.word	0x08012d8c
 800e464:	08012da0 	.word	0x08012da0
 800e468:	20008aec 	.word	0x20008aec
 800e46c:	08012dc0 	.word	0x08012dc0

0800e470 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08a      	sub	sp, #40	; 0x28
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e47a:	2300      	movs	r3, #0
 800e47c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e482:	2300      	movs	r3, #0
 800e484:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e486:	2300      	movs	r3, #0
 800e488:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e48e:	4b28      	ldr	r3, [pc, #160]	; (800e530 <ip_reass_remove_oldest_datagram+0xc0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e494:	e030      	b.n	800e4f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	695a      	ldr	r2, [r3, #20]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d10c      	bne.n	800e4bc <ip_reass_remove_oldest_datagram+0x4c>
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d106      	bne.n	800e4bc <ip_reass_remove_oldest_datagram+0x4c>
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	899a      	ldrh	r2, [r3, #12]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	889b      	ldrh	r3, [r3, #4]
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d014      	beq.n	800e4e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d104      	bne.n	800e4d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	61bb      	str	r3, [r7, #24]
 800e4d0:	e009      	b.n	800e4e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	7fda      	ldrb	r2, [r3, #31]
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	7fdb      	ldrb	r3, [r3, #31]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d803      	bhi.n	800e4e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1cb      	bne.n	800e496 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d008      	beq.n	800e516 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e504:	69b9      	ldr	r1, [r7, #24]
 800e506:	6a38      	ldr	r0, [r7, #32]
 800e508:	f7ff ff0e 	bl	800e328 <ip_reass_free_complete_datagram>
 800e50c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4413      	add	r3, r2
 800e514:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	da02      	bge.n	800e524 <ip_reass_remove_oldest_datagram+0xb4>
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	2b01      	cmp	r3, #1
 800e522:	dcac      	bgt.n	800e47e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e524:	697b      	ldr	r3, [r7, #20]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3728      	adds	r7, #40	; 0x28
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20008ae8 	.word	0x20008ae8

0800e534 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e53e:	2004      	movs	r0, #4
 800e540:	f7f7 f8dc 	bl	80056fc <memp_malloc>
 800e544:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d110      	bne.n	800e56e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7ff ff8e 	bl	800e470 <ip_reass_remove_oldest_datagram>
 800e554:	4602      	mov	r2, r0
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	4293      	cmp	r3, r2
 800e55a:	dc03      	bgt.n	800e564 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e55c:	2004      	movs	r0, #4
 800e55e:	f7f7 f8cd 	bl	80056fc <memp_malloc>
 800e562:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e016      	b.n	800e59c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e56e:	2220      	movs	r2, #32
 800e570:	2100      	movs	r1, #0
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f000 fe1c 	bl	800f1b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	220f      	movs	r2, #15
 800e57c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e57e:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <ip_reass_enqueue_new_datagram+0x70>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e586:	4a07      	ldr	r2, [pc, #28]	; (800e5a4 <ip_reass_enqueue_new_datagram+0x70>)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3308      	adds	r3, #8
 800e590:	2214      	movs	r2, #20
 800e592:	6879      	ldr	r1, [r7, #4]
 800e594:	4618      	mov	r0, r3
 800e596:	f000 fde3 	bl	800f160 <memcpy>
  return ipr;
 800e59a:	68fb      	ldr	r3, [r7, #12]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20008ae8 	.word	0x20008ae8

0800e5a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e5b2:	4b10      	ldr	r3, [pc, #64]	; (800e5f4 <ip_reass_dequeue_datagram+0x4c>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d104      	bne.n	800e5c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0c      	ldr	r2, [pc, #48]	; (800e5f4 <ip_reass_dequeue_datagram+0x4c>)
 800e5c2:	6013      	str	r3, [r2, #0]
 800e5c4:	e00d      	b.n	800e5e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d106      	bne.n	800e5da <ip_reass_dequeue_datagram+0x32>
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	; (800e5f8 <ip_reass_dequeue_datagram+0x50>)
 800e5ce:	f240 1245 	movw	r2, #325	; 0x145
 800e5d2:	490a      	ldr	r1, [pc, #40]	; (800e5fc <ip_reass_dequeue_datagram+0x54>)
 800e5d4:	480a      	ldr	r0, [pc, #40]	; (800e600 <ip_reass_dequeue_datagram+0x58>)
 800e5d6:	f000 fdf3 	bl	800f1c0 <iprintf>
    prev->next = ipr->next;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	2004      	movs	r0, #4
 800e5e6:	f7f7 f8d5 	bl	8005794 <memp_free>
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20008ae8 	.word	0x20008ae8
 800e5f8:	08012d1c 	.word	0x08012d1c
 800e5fc:	08012de4 	.word	0x08012de4
 800e600:	08012d64 	.word	0x08012d64

0800e604 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08c      	sub	sp, #48	; 0x30
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e610:	2300      	movs	r3, #0
 800e612:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e614:	2301      	movs	r3, #1
 800e616:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	885b      	ldrh	r3, [r3, #2]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f7f6 fc13 	bl	8004e50 <lwip_htons>
 800e62a:	4603      	mov	r3, r0
 800e62c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	f003 030f 	and.w	r3, r3, #15
 800e636:	b2db      	uxtb	r3, r3
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e63c:	7e7b      	ldrb	r3, [r7, #25]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	8b7a      	ldrh	r2, [r7, #26]
 800e642:	429a      	cmp	r2, r3
 800e644:	d202      	bcs.n	800e64c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e646:	f04f 33ff 	mov.w	r3, #4294967295
 800e64a:	e135      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e64c:	7e7b      	ldrb	r3, [r7, #25]
 800e64e:	b29b      	uxth	r3, r3
 800e650:	8b7a      	ldrh	r2, [r7, #26]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	88db      	ldrh	r3, [r3, #6]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f6 fbf7 	bl	8004e50 <lwip_htons>
 800e662:	4603      	mov	r3, r0
 800e664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e668:	b29b      	uxth	r3, r3
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	2200      	movs	r2, #0
 800e678:	701a      	strb	r2, [r3, #0]
 800e67a:	2200      	movs	r2, #0
 800e67c:	705a      	strb	r2, [r3, #1]
 800e67e:	2200      	movs	r2, #0
 800e680:	709a      	strb	r2, [r3, #2]
 800e682:	2200      	movs	r2, #0
 800e684:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	8afa      	ldrh	r2, [r7, #22]
 800e68a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e68c:	8afa      	ldrh	r2, [r7, #22]
 800e68e:	8b7b      	ldrh	r3, [r7, #26]
 800e690:	4413      	add	r3, r2
 800e692:	b29a      	uxth	r2, r3
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	88db      	ldrh	r3, [r3, #6]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	8afa      	ldrh	r2, [r7, #22]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d902      	bls.n	800e6aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a8:	e106      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e6b0:	e068      	b.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	889b      	ldrh	r3, [r3, #4]
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	889b      	ldrh	r3, [r3, #4]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d235      	bcs.n	800e734 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d020      	beq.n	800e716 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	889b      	ldrh	r3, [r3, #4]
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	88db      	ldrh	r3, [r3, #6]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d307      	bcc.n	800e6f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	88db      	ldrh	r3, [r3, #6]
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	889b      	ldrh	r3, [r3, #4]
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d902      	bls.n	800e6fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f8:	e0de      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	88db      	ldrh	r3, [r3, #6]
 800e704:	b29a      	uxth	r2, r3
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	889b      	ldrh	r3, [r3, #4]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d03d      	beq.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e714:	e03a      	b.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	88db      	ldrh	r3, [r3, #6]
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	889b      	ldrh	r3, [r3, #4]
 800e720:	b29b      	uxth	r3, r3
 800e722:	429a      	cmp	r2, r3
 800e724:	d902      	bls.n	800e72c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e726:	f04f 33ff 	mov.w	r3, #4294967295
 800e72a:	e0c5      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	605a      	str	r2, [r3, #4]
      break;
 800e732:	e02b      	b.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	889b      	ldrh	r3, [r3, #4]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	889b      	ldrh	r3, [r3, #4]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	429a      	cmp	r2, r3
 800e742:	d102      	bne.n	800e74a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e744:	f04f 33ff 	mov.w	r3, #4294967295
 800e748:	e0b6      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	889b      	ldrh	r3, [r3, #4]
 800e74e:	b29a      	uxth	r2, r3
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	88db      	ldrh	r3, [r3, #6]
 800e754:	b29b      	uxth	r3, r3
 800e756:	429a      	cmp	r2, r3
 800e758:	d202      	bcs.n	800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e75a:	f04f 33ff 	mov.w	r3, #4294967295
 800e75e:	e0ab      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	d009      	beq.n	800e77a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	88db      	ldrh	r3, [r3, #6]
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	889b      	ldrh	r3, [r3, #4]
 800e770:	b29b      	uxth	r3, r3
 800e772:	429a      	cmp	r2, r3
 800e774:	d001      	beq.n	800e77a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	2b00      	cmp	r3, #0
 800e788:	d193      	bne.n	800e6b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e78a:	e000      	b.n	800e78e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e78c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	2b00      	cmp	r3, #0
 800e792:	d12d      	bne.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	2b00      	cmp	r3, #0
 800e798:	d01c      	beq.n	800e7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	88db      	ldrh	r3, [r3, #6]
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a2:	889b      	ldrh	r3, [r3, #4]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d906      	bls.n	800e7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e7aa:	4b45      	ldr	r3, [pc, #276]	; (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e7b0:	4944      	ldr	r1, [pc, #272]	; (800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e7b2:	4845      	ldr	r0, [pc, #276]	; (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7b4:	f000 fd04 	bl	800f1c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c0:	88db      	ldrh	r3, [r3, #6]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	889b      	ldrh	r3, [r3, #4]
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d010      	beq.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	623b      	str	r3, [r7, #32]
 800e7d2:	e00d      	b.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d006      	beq.n	800e7ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7dc:	4b38      	ldr	r3, [pc, #224]	; (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e7e2:	493a      	ldr	r1, [pc, #232]	; (800e8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7e4:	4838      	ldr	r0, [pc, #224]	; (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7e6:	f000 fceb 	bl	800f1c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d105      	bne.n	800e802 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	7f9b      	ldrb	r3, [r3, #30]
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d059      	beq.n	800e8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d04f      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d006      	beq.n	800e81e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	889b      	ldrh	r3, [r3, #4]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	623b      	str	r3, [r7, #32]
 800e822:	e041      	b.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e82e:	e012      	b.n	800e856 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	88db      	ldrh	r3, [r3, #6]
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	889b      	ldrh	r3, [r3, #4]
 800e840:	b29b      	uxth	r3, r3
 800e842:	429a      	cmp	r2, r3
 800e844:	d002      	beq.n	800e84c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e846:	2300      	movs	r3, #0
 800e848:	623b      	str	r3, [r7, #32]
            break;
 800e84a:	e007      	b.n	800e85c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1e9      	bne.n	800e830 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d022      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d106      	bne.n	800e878 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e86a:	4b15      	ldr	r3, [pc, #84]	; (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e86c:	f240 12df 	movw	r2, #479	; 0x1df
 800e870:	4917      	ldr	r1, [pc, #92]	; (800e8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e872:	4815      	ldr	r0, [pc, #84]	; (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e874:	f000 fca4 	bl	800f1c0 <iprintf>
          LWIP_ASSERT("sanity check",
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e880:	429a      	cmp	r2, r3
 800e882:	d106      	bne.n	800e892 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e884:	4b0e      	ldr	r3, [pc, #56]	; (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e886:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e88a:	4911      	ldr	r1, [pc, #68]	; (800e8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e88c:	480e      	ldr	r0, [pc, #56]	; (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e88e:	f000 fc97 	bl	800f1c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d006      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e89a:	4b09      	ldr	r3, [pc, #36]	; (800e8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e89c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e8a0:	490c      	ldr	r1, [pc, #48]	; (800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e8a2:	4809      	ldr	r0, [pc, #36]	; (800e8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8a4:	f000 fc8c 	bl	800f1c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	bf14      	ite	ne
 800e8ae:	2301      	movne	r3, #1
 800e8b0:	2300      	moveq	r3, #0
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	e000      	b.n	800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3730      	adds	r7, #48	; 0x30
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	08012d1c 	.word	0x08012d1c
 800e8c4:	08012e00 	.word	0x08012e00
 800e8c8:	08012d64 	.word	0x08012d64
 800e8cc:	08012e20 	.word	0x08012e20
 800e8d0:	08012e58 	.word	0x08012e58
 800e8d4:	08012e68 	.word	0x08012e68

0800e8d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 030f 	and.w	r3, r3, #15
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b14      	cmp	r3, #20
 800e8f6:	f040 8171 	bne.w	800ebdc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	88db      	ldrh	r3, [r3, #6]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4618      	mov	r0, r3
 800e902:	f7f6 faa5 	bl	8004e50 <lwip_htons>
 800e906:	4603      	mov	r3, r0
 800e908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	00db      	lsls	r3, r3, #3
 800e910:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	885b      	ldrh	r3, [r3, #2]
 800e916:	b29b      	uxth	r3, r3
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f6 fa99 	bl	8004e50 <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	f003 030f 	and.w	r3, r3, #15
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e936:	b29b      	uxth	r3, r3
 800e938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e93a:	429a      	cmp	r2, r3
 800e93c:	f0c0 8150 	bcc.w	800ebe0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e944:	b29b      	uxth	r3, r3
 800e946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7f7 fdbb 	bl	80064c8 <pbuf_clen>
 800e952:	4603      	mov	r3, r0
 800e954:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e956:	4b8c      	ldr	r3, [pc, #560]	; (800eb88 <ip4_reass+0x2b0>)
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	8c3b      	ldrh	r3, [r7, #32]
 800e95e:	4413      	add	r3, r2
 800e960:	2b0a      	cmp	r3, #10
 800e962:	dd10      	ble.n	800e986 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e964:	8c3b      	ldrh	r3, [r7, #32]
 800e966:	4619      	mov	r1, r3
 800e968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e96a:	f7ff fd81 	bl	800e470 <ip_reass_remove_oldest_datagram>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 8137 	beq.w	800ebe4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e976:	4b84      	ldr	r3, [pc, #528]	; (800eb88 <ip4_reass+0x2b0>)
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	461a      	mov	r2, r3
 800e97c:	8c3b      	ldrh	r3, [r7, #32]
 800e97e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e980:	2b0a      	cmp	r3, #10
 800e982:	f300 812f 	bgt.w	800ebe4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e986:	4b81      	ldr	r3, [pc, #516]	; (800eb8c <ip4_reass+0x2b4>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	633b      	str	r3, [r7, #48]	; 0x30
 800e98c:	e015      	b.n	800e9ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	695a      	ldr	r2, [r3, #20]
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	429a      	cmp	r2, r3
 800e998:	d10c      	bne.n	800e9b4 <ip4_reass+0xdc>
 800e99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d106      	bne.n	800e9b4 <ip4_reass+0xdc>
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	899a      	ldrh	r2, [r3, #12]
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	889b      	ldrh	r3, [r3, #4]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d006      	beq.n	800e9c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	633b      	str	r3, [r7, #48]	; 0x30
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1e6      	bne.n	800e98e <ip4_reass+0xb6>
 800e9c0:	e000      	b.n	800e9c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d109      	bne.n	800e9de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9ca:	8c3b      	ldrh	r3, [r7, #32]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d0:	f7ff fdb0 	bl	800e534 <ip_reass_enqueue_new_datagram>
 800e9d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d11c      	bne.n	800ea16 <ip4_reass+0x13e>
      goto nullreturn;
 800e9dc:	e105      	b.n	800ebea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	88db      	ldrh	r3, [r3, #6]
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7f6 fa33 	bl	8004e50 <lwip_htons>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d110      	bne.n	800ea16 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f6:	89db      	ldrh	r3, [r3, #14]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7f6 fa29 	bl	8004e50 <lwip_htons>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d006      	beq.n	800ea16 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	2214      	movs	r2, #20
 800ea0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 fba5 	bl	800f160 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea18:	88db      	ldrh	r3, [r3, #6]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	f003 0320 	and.w	r3, r3, #32
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bf0c      	ite	eq
 800ea24:	2301      	moveq	r3, #1
 800ea26:	2300      	movne	r3, #0
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00e      	beq.n	800ea50 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea36:	4413      	add	r3, r2
 800ea38:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea3a:	8b7a      	ldrh	r2, [r7, #26]
 800ea3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	f0c0 80a0 	bcc.w	800eb84 <ip4_reass+0x2ac>
 800ea44:	8b7b      	ldrh	r3, [r7, #26]
 800ea46:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	f200 809a 	bhi.w	800eb84 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea50:	69fa      	ldr	r2, [r7, #28]
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea56:	f7ff fdd5 	bl	800e604 <ip_reass_chain_frag_into_datagram_and_validate>
 800ea5a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea62:	f000 809b 	beq.w	800eb9c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea66:	4b48      	ldr	r3, [pc, #288]	; (800eb88 <ip4_reass+0x2b0>)
 800ea68:	881a      	ldrh	r2, [r3, #0]
 800ea6a:	8c3b      	ldrh	r3, [r7, #32]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	4b45      	ldr	r3, [pc, #276]	; (800eb88 <ip4_reass+0x2b0>)
 800ea72:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00d      	beq.n	800ea96 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea7e:	4413      	add	r3, r2
 800ea80:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	8a7a      	ldrh	r2, [r7, #18]
 800ea86:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	7f9b      	ldrb	r3, [r3, #30]
 800ea8c:	f043 0301 	orr.w	r3, r3, #1
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d171      	bne.n	800eb80 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	8b9b      	ldrh	r3, [r3, #28]
 800eaa0:	3314      	adds	r3, #20
 800eaa2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	3308      	adds	r3, #8
 800eaba:	2214      	movs	r2, #20
 800eabc:	4619      	mov	r1, r3
 800eabe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eac0:	f000 fb4e 	bl	800f160 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eac4:	8a3b      	ldrh	r3, [r7, #16]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7f6 f9c2 	bl	8004e50 <lwip_htons>
 800eacc:	4603      	mov	r3, r0
 800eace:	461a      	mov	r2, r3
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	2200      	movs	r2, #0
 800ead8:	719a      	strb	r2, [r3, #6]
 800eada:	2200      	movs	r2, #0
 800eadc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	2200      	movs	r2, #0
 800eae2:	729a      	strb	r2, [r3, #10]
 800eae4:	2200      	movs	r2, #0
 800eae6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eaee:	e00d      	b.n	800eb0c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eaf6:	2114      	movs	r1, #20
 800eaf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eafa:	f7f7 fbd7 	bl	80062ac <pbuf_remove_header>
      pbuf_cat(p, r);
 800eafe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7f7 fd1b 	bl	800653c <pbuf_cat>
      r = iprh->next_pbuf;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1ee      	bne.n	800eaf0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb12:	4b1e      	ldr	r3, [pc, #120]	; (800eb8c <ip4_reass+0x2b4>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d102      	bne.n	800eb22 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb20:	e010      	b.n	800eb44 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb22:	4b1a      	ldr	r3, [pc, #104]	; (800eb8c <ip4_reass+0x2b4>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb28:	e007      	b.n	800eb3a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d006      	beq.n	800eb42 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1f4      	bne.n	800eb2a <ip4_reass+0x252>
 800eb40:	e000      	b.n	800eb44 <ip4_reass+0x26c>
          break;
 800eb42:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb48:	f7ff fd2e 	bl	800e5a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7f7 fcbb 	bl	80064c8 <pbuf_clen>
 800eb52:	4603      	mov	r3, r0
 800eb54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb56:	4b0c      	ldr	r3, [pc, #48]	; (800eb88 <ip4_reass+0x2b0>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	8c3a      	ldrh	r2, [r7, #32]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d906      	bls.n	800eb6e <ip4_reass+0x296>
 800eb60:	4b0b      	ldr	r3, [pc, #44]	; (800eb90 <ip4_reass+0x2b8>)
 800eb62:	f240 229b 	movw	r2, #667	; 0x29b
 800eb66:	490b      	ldr	r1, [pc, #44]	; (800eb94 <ip4_reass+0x2bc>)
 800eb68:	480b      	ldr	r0, [pc, #44]	; (800eb98 <ip4_reass+0x2c0>)
 800eb6a:	f000 fb29 	bl	800f1c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb6e:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <ip4_reass+0x2b0>)
 800eb70:	881a      	ldrh	r2, [r3, #0]
 800eb72:	8c3b      	ldrh	r3, [r7, #32]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	4b03      	ldr	r3, [pc, #12]	; (800eb88 <ip4_reass+0x2b0>)
 800eb7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	e038      	b.n	800ebf2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	e036      	b.n	800ebf2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb84:	bf00      	nop
 800eb86:	e00a      	b.n	800eb9e <ip4_reass+0x2c6>
 800eb88:	20008aec 	.word	0x20008aec
 800eb8c:	20008ae8 	.word	0x20008ae8
 800eb90:	08012d1c 	.word	0x08012d1c
 800eb94:	08012e8c 	.word	0x08012e8c
 800eb98:	08012d64 	.word	0x08012d64
    goto nullreturn_ipr;
 800eb9c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d106      	bne.n	800ebb2 <ip4_reass+0x2da>
 800eba4:	4b15      	ldr	r3, [pc, #84]	; (800ebfc <ip4_reass+0x324>)
 800eba6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ebaa:	4915      	ldr	r1, [pc, #84]	; (800ec00 <ip4_reass+0x328>)
 800ebac:	4815      	ldr	r0, [pc, #84]	; (800ec04 <ip4_reass+0x32c>)
 800ebae:	f000 fb07 	bl	800f1c0 <iprintf>
  if (ipr->p == NULL) {
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d116      	bne.n	800ebe8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ebba:	4b13      	ldr	r3, [pc, #76]	; (800ec08 <ip4_reass+0x330>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d006      	beq.n	800ebd2 <ip4_reass+0x2fa>
 800ebc4:	4b0d      	ldr	r3, [pc, #52]	; (800ebfc <ip4_reass+0x324>)
 800ebc6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ebca:	4910      	ldr	r1, [pc, #64]	; (800ec0c <ip4_reass+0x334>)
 800ebcc:	480d      	ldr	r0, [pc, #52]	; (800ec04 <ip4_reass+0x32c>)
 800ebce:	f000 faf7 	bl	800f1c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebd6:	f7ff fce7 	bl	800e5a8 <ip_reass_dequeue_datagram>
 800ebda:	e006      	b.n	800ebea <ip4_reass+0x312>
    goto nullreturn;
 800ebdc:	bf00      	nop
 800ebde:	e004      	b.n	800ebea <ip4_reass+0x312>
    goto nullreturn;
 800ebe0:	bf00      	nop
 800ebe2:	e002      	b.n	800ebea <ip4_reass+0x312>
      goto nullreturn;
 800ebe4:	bf00      	nop
 800ebe6:	e000      	b.n	800ebea <ip4_reass+0x312>
  }

nullreturn:
 800ebe8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7f7 fbe4 	bl	80063b8 <pbuf_free>
  return NULL;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3738      	adds	r7, #56	; 0x38
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08012d1c 	.word	0x08012d1c
 800ec00:	08012ea8 	.word	0x08012ea8
 800ec04:	08012d64 	.word	0x08012d64
 800ec08:	20008ae8 	.word	0x20008ae8
 800ec0c:	08012eb4 	.word	0x08012eb4

0800ec10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec14:	2005      	movs	r0, #5
 800ec16:	f7f6 fd71 	bl	80056fc <memp_malloc>
 800ec1a:	4603      	mov	r3, r0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d106      	bne.n	800ec3c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec2e:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec30:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec34:	4906      	ldr	r1, [pc, #24]	; (800ec50 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec36:	4807      	ldr	r0, [pc, #28]	; (800ec54 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec38:	f000 fac2 	bl	800f1c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	2005      	movs	r0, #5
 800ec40:	f7f6 fda8 	bl	8005794 <memp_free>
}
 800ec44:	bf00      	nop
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	08012d1c 	.word	0x08012d1c
 800ec50:	08012ed4 	.word	0x08012ed4
 800ec54:	08012d64 	.word	0x08012d64

0800ec58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <ipfrag_free_pbuf_custom+0x20>
 800ec6a:	4b11      	ldr	r3, [pc, #68]	; (800ecb0 <ipfrag_free_pbuf_custom+0x58>)
 800ec6c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ec70:	4910      	ldr	r1, [pc, #64]	; (800ecb4 <ipfrag_free_pbuf_custom+0x5c>)
 800ec72:	4811      	ldr	r0, [pc, #68]	; (800ecb8 <ipfrag_free_pbuf_custom+0x60>)
 800ec74:	f000 faa4 	bl	800f1c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d006      	beq.n	800ec8e <ipfrag_free_pbuf_custom+0x36>
 800ec80:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <ipfrag_free_pbuf_custom+0x58>)
 800ec82:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ec86:	490d      	ldr	r1, [pc, #52]	; (800ecbc <ipfrag_free_pbuf_custom+0x64>)
 800ec88:	480b      	ldr	r0, [pc, #44]	; (800ecb8 <ipfrag_free_pbuf_custom+0x60>)
 800ec8a:	f000 fa99 	bl	800f1c0 <iprintf>
  if (pcr->original != NULL) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d004      	beq.n	800eca0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7f7 fb8c 	bl	80063b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff ffbd 	bl	800ec20 <ip_frag_free_pbuf_custom_ref>
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08012d1c 	.word	0x08012d1c
 800ecb4:	08012ee0 	.word	0x08012ee0
 800ecb8:	08012d64 	.word	0x08012d64
 800ecbc:	08012eec 	.word	0x08012eec

0800ecc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b094      	sub	sp, #80	; 0x50
 800ecc4:	af02      	add	r7, sp, #8
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecd6:	3b14      	subs	r3, #20
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	da00      	bge.n	800ecde <ip4_frag+0x1e>
 800ecdc:	3307      	adds	r3, #7
 800ecde:	10db      	asrs	r3, r3, #3
 800ece0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ece2:	2314      	movs	r3, #20
 800ece4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ecec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	f003 030f 	and.w	r3, r3, #15
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b14      	cmp	r3, #20
 800ed00:	d002      	beq.n	800ed08 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ed02:	f06f 0305 	mvn.w	r3, #5
 800ed06:	e110      	b.n	800ef2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	2b13      	cmp	r3, #19
 800ed0e:	d809      	bhi.n	800ed24 <ip4_frag+0x64>
 800ed10:	4b88      	ldr	r3, [pc, #544]	; (800ef34 <ip4_frag+0x274>)
 800ed12:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ed16:	4988      	ldr	r1, [pc, #544]	; (800ef38 <ip4_frag+0x278>)
 800ed18:	4888      	ldr	r0, [pc, #544]	; (800ef3c <ip4_frag+0x27c>)
 800ed1a:	f000 fa51 	bl	800f1c0 <iprintf>
 800ed1e:	f06f 0305 	mvn.w	r3, #5
 800ed22:	e102      	b.n	800ef2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed26:	88db      	ldrh	r3, [r3, #6]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7f6 f890 	bl	8004e50 <lwip_htons>
 800ed30:	4603      	mov	r3, r0
 800ed32:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed44:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	3b14      	subs	r3, #20
 800ed4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed50:	e0e1      	b.n	800ef16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	bf28      	it	cs
 800ed60:	4613      	movcs	r3, r2
 800ed62:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed68:	2114      	movs	r1, #20
 800ed6a:	200e      	movs	r0, #14
 800ed6c:	f7f7 f840 	bl	8005df0 <pbuf_alloc>
 800ed70:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f000 80d5 	beq.w	800ef24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7c:	895b      	ldrh	r3, [r3, #10]
 800ed7e:	2b13      	cmp	r3, #19
 800ed80:	d806      	bhi.n	800ed90 <ip4_frag+0xd0>
 800ed82:	4b6c      	ldr	r3, [pc, #432]	; (800ef34 <ip4_frag+0x274>)
 800ed84:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ed88:	496d      	ldr	r1, [pc, #436]	; (800ef40 <ip4_frag+0x280>)
 800ed8a:	486c      	ldr	r0, [pc, #432]	; (800ef3c <ip4_frag+0x27c>)
 800ed8c:	f000 fa18 	bl	800f1c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	2214      	movs	r2, #20
 800ed96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 f9e1 	bl	800f160 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eda4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eda6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800edaa:	e064      	b.n	800ee76 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	895a      	ldrh	r2, [r3, #10]
 800edb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	895b      	ldrh	r3, [r3, #10]
 800edba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d906      	bls.n	800edce <ip4_frag+0x10e>
 800edc0:	4b5c      	ldr	r3, [pc, #368]	; (800ef34 <ip4_frag+0x274>)
 800edc2:	f240 322d 	movw	r2, #813	; 0x32d
 800edc6:	495f      	ldr	r1, [pc, #380]	; (800ef44 <ip4_frag+0x284>)
 800edc8:	485c      	ldr	r0, [pc, #368]	; (800ef3c <ip4_frag+0x27c>)
 800edca:	f000 f9f9 	bl	800f1c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edce:	8bfa      	ldrh	r2, [r7, #30]
 800edd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800edd4:	4293      	cmp	r3, r2
 800edd6:	bf28      	it	cs
 800edd8:	4613      	movcs	r3, r2
 800edda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d105      	bne.n	800edf2 <ip4_frag+0x132>
        poff = 0;
 800ede6:	2300      	movs	r3, #0
 800ede8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	60fb      	str	r3, [r7, #12]
        continue;
 800edf0:	e041      	b.n	800ee76 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edf2:	f7ff ff0d 	bl	800ec10 <ip_frag_alloc_pbuf_custom_ref>
 800edf6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d103      	bne.n	800ee06 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800edfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee00:	f7f7 fada 	bl	80063b8 <pbuf_free>
        goto memerr;
 800ee04:	e08f      	b.n	800ef26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee06:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee0e:	4413      	add	r3, r2
 800ee10:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ee14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee18:	9201      	str	r2, [sp, #4]
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2241      	movs	r2, #65	; 0x41
 800ee20:	2000      	movs	r0, #0
 800ee22:	f7f7 f90f 	bl	8006044 <pbuf_alloced_custom>
 800ee26:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee2e:	69b8      	ldr	r0, [r7, #24]
 800ee30:	f7ff fef6 	bl	800ec20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee36:	f7f7 fabf 	bl	80063b8 <pbuf_free>
        goto memerr;
 800ee3a:	e074      	b.n	800ef26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f7f7 fb5b 	bl	80064f8 <pbuf_ref>
      pcr->original = p;
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	4a3f      	ldr	r2, [pc, #252]	; (800ef48 <ip4_frag+0x288>)
 800ee4c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee4e:	6979      	ldr	r1, [r7, #20]
 800ee50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee52:	f7f7 fb73 	bl	800653c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ee64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d004      	beq.n	800ee76 <ip4_frag+0x1b6>
        poff = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d196      	bne.n	800edac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee84:	4413      	add	r3, r2
 800ee86:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee8c:	f1a3 0213 	sub.w	r2, r3, #19
 800ee90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee94:	429a      	cmp	r2, r3
 800ee96:	bfcc      	ite	gt
 800ee98:	2301      	movgt	r3, #1
 800ee9a:	2300      	movle	r3, #0
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eea0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eea8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d002      	beq.n	800eeb6 <ip4_frag+0x1f6>
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d003      	beq.n	800eebe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eeb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eeb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eebc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eebe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f5 ffc5 	bl	8004e50 <lwip_htons>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461a      	mov	r2, r3
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eed0:	3314      	adds	r3, #20
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7f5 ffbb 	bl	8004e50 <lwip_htons>
 800eeda:	4603      	mov	r3, r0
 800eedc:	461a      	mov	r2, r3
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	2200      	movs	r2, #0
 800eee6:	729a      	strb	r2, [r3, #10]
 800eee8:	2200      	movs	r2, #0
 800eeea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	695b      	ldr	r3, [r3, #20]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eef4:	68b8      	ldr	r0, [r7, #8]
 800eef6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eefa:	f7f7 fa5d 	bl	80063b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eefe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef04:	1ad3      	subs	r3, r2, r3
 800ef06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ef0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef10:	4413      	add	r3, r2
 800ef12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ef16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f47f af19 	bne.w	800ed52 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e002      	b.n	800ef2a <ip4_frag+0x26a>
      goto memerr;
 800ef24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3748      	adds	r7, #72	; 0x48
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	08012d1c 	.word	0x08012d1c
 800ef38:	08012ef8 	.word	0x08012ef8
 800ef3c:	08012d64 	.word	0x08012d64
 800ef40:	08012f14 	.word	0x08012f14
 800ef44:	08012f34 	.word	0x08012f34
 800ef48:	0800ec59 	.word	0x0800ec59

0800ef4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef56:	230e      	movs	r3, #14
 800ef58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	895b      	ldrh	r3, [r3, #10]
 800ef5e:	2b0e      	cmp	r3, #14
 800ef60:	d96e      	bls.n	800f040 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7bdb      	ldrb	r3, [r3, #15]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d106      	bne.n	800ef78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef70:	3301      	adds	r3, #1
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	7b1a      	ldrb	r2, [r3, #12]
 800ef82:	7b5b      	ldrb	r3, [r3, #13]
 800ef84:	021b      	lsls	r3, r3, #8
 800ef86:	4313      	orrs	r3, r2
 800ef88:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	f003 0301 	and.w	r3, r3, #1
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d023      	beq.n	800efde <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d10f      	bne.n	800efbe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	785b      	ldrb	r3, [r3, #1]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d11b      	bne.n	800efde <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efaa:	2b5e      	cmp	r3, #94	; 0x5e
 800efac:	d117      	bne.n	800efde <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	7b5b      	ldrb	r3, [r3, #13]
 800efb2:	f043 0310 	orr.w	r3, r3, #16
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	735a      	strb	r2, [r3, #13]
 800efbc:	e00f      	b.n	800efde <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	2206      	movs	r2, #6
 800efc2:	4928      	ldr	r1, [pc, #160]	; (800f064 <ethernet_input+0x118>)
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 f8bb 	bl	800f140 <memcmp>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d106      	bne.n	800efde <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7b5b      	ldrb	r3, [r3, #13]
 800efd4:	f043 0308 	orr.w	r3, r3, #8
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efde:	89fb      	ldrh	r3, [r7, #14]
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d003      	beq.n	800efec <ethernet_input+0xa0>
 800efe4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800efe8:	d014      	beq.n	800f014 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efea:	e032      	b.n	800f052 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eff2:	f003 0308 	and.w	r3, r3, #8
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d024      	beq.n	800f044 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800effa:	8afb      	ldrh	r3, [r7, #22]
 800effc:	4619      	mov	r1, r3
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f7f7 f954 	bl	80062ac <pbuf_remove_header>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d11e      	bne.n	800f048 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7fe fe91 	bl	800dd34 <ip4_input>
      break;
 800f012:	e013      	b.n	800f03c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f01a:	f003 0308 	and.w	r3, r3, #8
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d014      	beq.n	800f04c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f022:	8afb      	ldrh	r3, [r7, #22]
 800f024:	4619      	mov	r1, r3
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7f7 f940 	bl	80062ac <pbuf_remove_header>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10e      	bne.n	800f050 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7fe f831 	bl	800d09c <etharp_input>
      break;
 800f03a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	e00c      	b.n	800f05a <ethernet_input+0x10e>
    goto free_and_return;
 800f040:	bf00      	nop
 800f042:	e006      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f044:	bf00      	nop
 800f046:	e004      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f048:	bf00      	nop
 800f04a:	e002      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f04c:	bf00      	nop
 800f04e:	e000      	b.n	800f052 <ethernet_input+0x106>
        goto free_and_return;
 800f050:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7f7 f9b0 	bl	80063b8 <pbuf_free>
  return ERR_OK;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3718      	adds	r7, #24
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	080130c4 	.word	0x080130c4

0800f068 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f076:	8c3b      	ldrh	r3, [r7, #32]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7f5 fee9 	bl	8004e50 <lwip_htons>
 800f07e:	4603      	mov	r3, r0
 800f080:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f082:	210e      	movs	r1, #14
 800f084:	68b8      	ldr	r0, [r7, #8]
 800f086:	f7f7 f901 	bl	800628c <pbuf_add_header>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d125      	bne.n	800f0dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	8afa      	ldrh	r2, [r7, #22]
 800f09a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	2206      	movs	r2, #6
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 f85c 	bl	800f160 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	3306      	adds	r3, #6
 800f0ac:	2206      	movs	r2, #6
 800f0ae:	6879      	ldr	r1, [r7, #4]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 f855 	bl	800f160 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0bc:	2b06      	cmp	r3, #6
 800f0be:	d006      	beq.n	800f0ce <ethernet_output+0x66>
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	; (800f0ec <ethernet_output+0x84>)
 800f0c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f0c6:	490a      	ldr	r1, [pc, #40]	; (800f0f0 <ethernet_output+0x88>)
 800f0c8:	480a      	ldr	r0, [pc, #40]	; (800f0f4 <ethernet_output+0x8c>)
 800f0ca:	f000 f879 	bl	800f1c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	699b      	ldr	r3, [r3, #24]
 800f0d2:	68b9      	ldr	r1, [r7, #8]
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	4798      	blx	r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	e002      	b.n	800f0e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0de:	f06f 0301 	mvn.w	r3, #1
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	08012f44 	.word	0x08012f44
 800f0f0:	08012f7c 	.word	0x08012f7c
 800f0f4:	08012fb0 	.word	0x08012fb0

0800f0f8 <__libc_init_array>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	4d0d      	ldr	r5, [pc, #52]	; (800f130 <__libc_init_array+0x38>)
 800f0fc:	4c0d      	ldr	r4, [pc, #52]	; (800f134 <__libc_init_array+0x3c>)
 800f0fe:	1b64      	subs	r4, r4, r5
 800f100:	10a4      	asrs	r4, r4, #2
 800f102:	2600      	movs	r6, #0
 800f104:	42a6      	cmp	r6, r4
 800f106:	d109      	bne.n	800f11c <__libc_init_array+0x24>
 800f108:	4d0b      	ldr	r5, [pc, #44]	; (800f138 <__libc_init_array+0x40>)
 800f10a:	4c0c      	ldr	r4, [pc, #48]	; (800f13c <__libc_init_array+0x44>)
 800f10c:	f001 fa5c 	bl	80105c8 <_init>
 800f110:	1b64      	subs	r4, r4, r5
 800f112:	10a4      	asrs	r4, r4, #2
 800f114:	2600      	movs	r6, #0
 800f116:	42a6      	cmp	r6, r4
 800f118:	d105      	bne.n	800f126 <__libc_init_array+0x2e>
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
 800f11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f120:	4798      	blx	r3
 800f122:	3601      	adds	r6, #1
 800f124:	e7ee      	b.n	800f104 <__libc_init_array+0xc>
 800f126:	f855 3b04 	ldr.w	r3, [r5], #4
 800f12a:	4798      	blx	r3
 800f12c:	3601      	adds	r6, #1
 800f12e:	e7f2      	b.n	800f116 <__libc_init_array+0x1e>
 800f130:	08013224 	.word	0x08013224
 800f134:	08013224 	.word	0x08013224
 800f138:	08013224 	.word	0x08013224
 800f13c:	08013228 	.word	0x08013228

0800f140 <memcmp>:
 800f140:	b510      	push	{r4, lr}
 800f142:	3901      	subs	r1, #1
 800f144:	4402      	add	r2, r0
 800f146:	4290      	cmp	r0, r2
 800f148:	d101      	bne.n	800f14e <memcmp+0xe>
 800f14a:	2000      	movs	r0, #0
 800f14c:	e005      	b.n	800f15a <memcmp+0x1a>
 800f14e:	7803      	ldrb	r3, [r0, #0]
 800f150:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f154:	42a3      	cmp	r3, r4
 800f156:	d001      	beq.n	800f15c <memcmp+0x1c>
 800f158:	1b18      	subs	r0, r3, r4
 800f15a:	bd10      	pop	{r4, pc}
 800f15c:	3001      	adds	r0, #1
 800f15e:	e7f2      	b.n	800f146 <memcmp+0x6>

0800f160 <memcpy>:
 800f160:	440a      	add	r2, r1
 800f162:	4291      	cmp	r1, r2
 800f164:	f100 33ff 	add.w	r3, r0, #4294967295
 800f168:	d100      	bne.n	800f16c <memcpy+0xc>
 800f16a:	4770      	bx	lr
 800f16c:	b510      	push	{r4, lr}
 800f16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f176:	4291      	cmp	r1, r2
 800f178:	d1f9      	bne.n	800f16e <memcpy+0xe>
 800f17a:	bd10      	pop	{r4, pc}

0800f17c <memmove>:
 800f17c:	4288      	cmp	r0, r1
 800f17e:	b510      	push	{r4, lr}
 800f180:	eb01 0402 	add.w	r4, r1, r2
 800f184:	d902      	bls.n	800f18c <memmove+0x10>
 800f186:	4284      	cmp	r4, r0
 800f188:	4623      	mov	r3, r4
 800f18a:	d807      	bhi.n	800f19c <memmove+0x20>
 800f18c:	1e43      	subs	r3, r0, #1
 800f18e:	42a1      	cmp	r1, r4
 800f190:	d008      	beq.n	800f1a4 <memmove+0x28>
 800f192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f19a:	e7f8      	b.n	800f18e <memmove+0x12>
 800f19c:	4402      	add	r2, r0
 800f19e:	4601      	mov	r1, r0
 800f1a0:	428a      	cmp	r2, r1
 800f1a2:	d100      	bne.n	800f1a6 <memmove+0x2a>
 800f1a4:	bd10      	pop	{r4, pc}
 800f1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1ae:	e7f7      	b.n	800f1a0 <memmove+0x24>

0800f1b0 <memset>:
 800f1b0:	4402      	add	r2, r0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d100      	bne.n	800f1ba <memset+0xa>
 800f1b8:	4770      	bx	lr
 800f1ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f1be:	e7f9      	b.n	800f1b4 <memset+0x4>

0800f1c0 <iprintf>:
 800f1c0:	b40f      	push	{r0, r1, r2, r3}
 800f1c2:	4b0a      	ldr	r3, [pc, #40]	; (800f1ec <iprintf+0x2c>)
 800f1c4:	b513      	push	{r0, r1, r4, lr}
 800f1c6:	681c      	ldr	r4, [r3, #0]
 800f1c8:	b124      	cbz	r4, 800f1d4 <iprintf+0x14>
 800f1ca:	69a3      	ldr	r3, [r4, #24]
 800f1cc:	b913      	cbnz	r3, 800f1d4 <iprintf+0x14>
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f000 f8e2 	bl	800f398 <__sinit>
 800f1d4:	ab05      	add	r3, sp, #20
 800f1d6:	9a04      	ldr	r2, [sp, #16]
 800f1d8:	68a1      	ldr	r1, [r4, #8]
 800f1da:	9301      	str	r3, [sp, #4]
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fbfb 	bl	800f9d8 <_vfiprintf_r>
 800f1e2:	b002      	add	sp, #8
 800f1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e8:	b004      	add	sp, #16
 800f1ea:	4770      	bx	lr
 800f1ec:	20000014 	.word	0x20000014

0800f1f0 <rand>:
 800f1f0:	4b16      	ldr	r3, [pc, #88]	; (800f24c <rand+0x5c>)
 800f1f2:	b510      	push	{r4, lr}
 800f1f4:	681c      	ldr	r4, [r3, #0]
 800f1f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1f8:	b9b3      	cbnz	r3, 800f228 <rand+0x38>
 800f1fa:	2018      	movs	r0, #24
 800f1fc:	f000 f97e 	bl	800f4fc <malloc>
 800f200:	63a0      	str	r0, [r4, #56]	; 0x38
 800f202:	b928      	cbnz	r0, 800f210 <rand+0x20>
 800f204:	4602      	mov	r2, r0
 800f206:	4b12      	ldr	r3, [pc, #72]	; (800f250 <rand+0x60>)
 800f208:	4812      	ldr	r0, [pc, #72]	; (800f254 <rand+0x64>)
 800f20a:	214e      	movs	r1, #78	; 0x4e
 800f20c:	f000 f84e 	bl	800f2ac <__assert_func>
 800f210:	4a11      	ldr	r2, [pc, #68]	; (800f258 <rand+0x68>)
 800f212:	4b12      	ldr	r3, [pc, #72]	; (800f25c <rand+0x6c>)
 800f214:	e9c0 2300 	strd	r2, r3, [r0]
 800f218:	4b11      	ldr	r3, [pc, #68]	; (800f260 <rand+0x70>)
 800f21a:	6083      	str	r3, [r0, #8]
 800f21c:	230b      	movs	r3, #11
 800f21e:	8183      	strh	r3, [r0, #12]
 800f220:	2201      	movs	r2, #1
 800f222:	2300      	movs	r3, #0
 800f224:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f228:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f22a:	4a0e      	ldr	r2, [pc, #56]	; (800f264 <rand+0x74>)
 800f22c:	6920      	ldr	r0, [r4, #16]
 800f22e:	6963      	ldr	r3, [r4, #20]
 800f230:	490d      	ldr	r1, [pc, #52]	; (800f268 <rand+0x78>)
 800f232:	4342      	muls	r2, r0
 800f234:	fb01 2203 	mla	r2, r1, r3, r2
 800f238:	fba0 0101 	umull	r0, r1, r0, r1
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	eb42 0001 	adc.w	r0, r2, r1
 800f242:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f246:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f24a:	bd10      	pop	{r4, pc}
 800f24c:	20000014 	.word	0x20000014
 800f250:	080130d8 	.word	0x080130d8
 800f254:	080130ef 	.word	0x080130ef
 800f258:	abcd330e 	.word	0xabcd330e
 800f25c:	e66d1234 	.word	0xe66d1234
 800f260:	0005deec 	.word	0x0005deec
 800f264:	5851f42d 	.word	0x5851f42d
 800f268:	4c957f2d 	.word	0x4c957f2d

0800f26c <siprintf>:
 800f26c:	b40e      	push	{r1, r2, r3}
 800f26e:	b500      	push	{lr}
 800f270:	b09c      	sub	sp, #112	; 0x70
 800f272:	ab1d      	add	r3, sp, #116	; 0x74
 800f274:	9002      	str	r0, [sp, #8]
 800f276:	9006      	str	r0, [sp, #24]
 800f278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f27c:	4809      	ldr	r0, [pc, #36]	; (800f2a4 <siprintf+0x38>)
 800f27e:	9107      	str	r1, [sp, #28]
 800f280:	9104      	str	r1, [sp, #16]
 800f282:	4909      	ldr	r1, [pc, #36]	; (800f2a8 <siprintf+0x3c>)
 800f284:	f853 2b04 	ldr.w	r2, [r3], #4
 800f288:	9105      	str	r1, [sp, #20]
 800f28a:	6800      	ldr	r0, [r0, #0]
 800f28c:	9301      	str	r3, [sp, #4]
 800f28e:	a902      	add	r1, sp, #8
 800f290:	f000 fa78 	bl	800f784 <_svfiprintf_r>
 800f294:	9b02      	ldr	r3, [sp, #8]
 800f296:	2200      	movs	r2, #0
 800f298:	701a      	strb	r2, [r3, #0]
 800f29a:	b01c      	add	sp, #112	; 0x70
 800f29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2a0:	b003      	add	sp, #12
 800f2a2:	4770      	bx	lr
 800f2a4:	20000014 	.word	0x20000014
 800f2a8:	ffff0208 	.word	0xffff0208

0800f2ac <__assert_func>:
 800f2ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ae:	4614      	mov	r4, r2
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	4b09      	ldr	r3, [pc, #36]	; (800f2d8 <__assert_func+0x2c>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	68d8      	ldr	r0, [r3, #12]
 800f2ba:	b14c      	cbz	r4, 800f2d0 <__assert_func+0x24>
 800f2bc:	4b07      	ldr	r3, [pc, #28]	; (800f2dc <__assert_func+0x30>)
 800f2be:	9100      	str	r1, [sp, #0]
 800f2c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2c4:	4906      	ldr	r1, [pc, #24]	; (800f2e0 <__assert_func+0x34>)
 800f2c6:	462b      	mov	r3, r5
 800f2c8:	f000 f8e4 	bl	800f494 <fiprintf>
 800f2cc:	f000 ff6e 	bl	80101ac <abort>
 800f2d0:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <__assert_func+0x38>)
 800f2d2:	461c      	mov	r4, r3
 800f2d4:	e7f3      	b.n	800f2be <__assert_func+0x12>
 800f2d6:	bf00      	nop
 800f2d8:	20000014 	.word	0x20000014
 800f2dc:	0801314a 	.word	0x0801314a
 800f2e0:	08013157 	.word	0x08013157
 800f2e4:	08013185 	.word	0x08013185

0800f2e8 <std>:
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800f2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2f6:	6083      	str	r3, [r0, #8]
 800f2f8:	8181      	strh	r1, [r0, #12]
 800f2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800f2fc:	81c2      	strh	r2, [r0, #14]
 800f2fe:	6183      	str	r3, [r0, #24]
 800f300:	4619      	mov	r1, r3
 800f302:	2208      	movs	r2, #8
 800f304:	305c      	adds	r0, #92	; 0x5c
 800f306:	f7ff ff53 	bl	800f1b0 <memset>
 800f30a:	4b05      	ldr	r3, [pc, #20]	; (800f320 <std+0x38>)
 800f30c:	6263      	str	r3, [r4, #36]	; 0x24
 800f30e:	4b05      	ldr	r3, [pc, #20]	; (800f324 <std+0x3c>)
 800f310:	62a3      	str	r3, [r4, #40]	; 0x28
 800f312:	4b05      	ldr	r3, [pc, #20]	; (800f328 <std+0x40>)
 800f314:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f316:	4b05      	ldr	r3, [pc, #20]	; (800f32c <std+0x44>)
 800f318:	6224      	str	r4, [r4, #32]
 800f31a:	6323      	str	r3, [r4, #48]	; 0x30
 800f31c:	bd10      	pop	{r4, pc}
 800f31e:	bf00      	nop
 800f320:	0800ff81 	.word	0x0800ff81
 800f324:	0800ffa3 	.word	0x0800ffa3
 800f328:	0800ffdb 	.word	0x0800ffdb
 800f32c:	0800ffff 	.word	0x0800ffff

0800f330 <_cleanup_r>:
 800f330:	4901      	ldr	r1, [pc, #4]	; (800f338 <_cleanup_r+0x8>)
 800f332:	f000 b8c1 	b.w	800f4b8 <_fwalk_reent>
 800f336:	bf00      	nop
 800f338:	080102e9 	.word	0x080102e9

0800f33c <__sfmoreglue>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	2268      	movs	r2, #104	; 0x68
 800f340:	1e4d      	subs	r5, r1, #1
 800f342:	4355      	muls	r5, r2
 800f344:	460e      	mov	r6, r1
 800f346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f34a:	f000 f94b 	bl	800f5e4 <_malloc_r>
 800f34e:	4604      	mov	r4, r0
 800f350:	b140      	cbz	r0, 800f364 <__sfmoreglue+0x28>
 800f352:	2100      	movs	r1, #0
 800f354:	e9c0 1600 	strd	r1, r6, [r0]
 800f358:	300c      	adds	r0, #12
 800f35a:	60a0      	str	r0, [r4, #8]
 800f35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f360:	f7ff ff26 	bl	800f1b0 <memset>
 800f364:	4620      	mov	r0, r4
 800f366:	bd70      	pop	{r4, r5, r6, pc}

0800f368 <__sfp_lock_acquire>:
 800f368:	4801      	ldr	r0, [pc, #4]	; (800f370 <__sfp_lock_acquire+0x8>)
 800f36a:	f000 b8c5 	b.w	800f4f8 <__retarget_lock_acquire_recursive>
 800f36e:	bf00      	nop
 800f370:	20008af5 	.word	0x20008af5

0800f374 <__sfp_lock_release>:
 800f374:	4801      	ldr	r0, [pc, #4]	; (800f37c <__sfp_lock_release+0x8>)
 800f376:	f000 b8c0 	b.w	800f4fa <__retarget_lock_release_recursive>
 800f37a:	bf00      	nop
 800f37c:	20008af5 	.word	0x20008af5

0800f380 <__sinit_lock_acquire>:
 800f380:	4801      	ldr	r0, [pc, #4]	; (800f388 <__sinit_lock_acquire+0x8>)
 800f382:	f000 b8b9 	b.w	800f4f8 <__retarget_lock_acquire_recursive>
 800f386:	bf00      	nop
 800f388:	20008af6 	.word	0x20008af6

0800f38c <__sinit_lock_release>:
 800f38c:	4801      	ldr	r0, [pc, #4]	; (800f394 <__sinit_lock_release+0x8>)
 800f38e:	f000 b8b4 	b.w	800f4fa <__retarget_lock_release_recursive>
 800f392:	bf00      	nop
 800f394:	20008af6 	.word	0x20008af6

0800f398 <__sinit>:
 800f398:	b510      	push	{r4, lr}
 800f39a:	4604      	mov	r4, r0
 800f39c:	f7ff fff0 	bl	800f380 <__sinit_lock_acquire>
 800f3a0:	69a3      	ldr	r3, [r4, #24]
 800f3a2:	b11b      	cbz	r3, 800f3ac <__sinit+0x14>
 800f3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3a8:	f7ff bff0 	b.w	800f38c <__sinit_lock_release>
 800f3ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800f3b2:	4b13      	ldr	r3, [pc, #76]	; (800f400 <__sinit+0x68>)
 800f3b4:	4a13      	ldr	r2, [pc, #76]	; (800f404 <__sinit+0x6c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	bf04      	itt	eq
 800f3be:	2301      	moveq	r3, #1
 800f3c0:	61a3      	streq	r3, [r4, #24]
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f000 f820 	bl	800f408 <__sfp>
 800f3c8:	6060      	str	r0, [r4, #4]
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 f81c 	bl	800f408 <__sfp>
 800f3d0:	60a0      	str	r0, [r4, #8]
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f818 	bl	800f408 <__sfp>
 800f3d8:	2200      	movs	r2, #0
 800f3da:	60e0      	str	r0, [r4, #12]
 800f3dc:	2104      	movs	r1, #4
 800f3de:	6860      	ldr	r0, [r4, #4]
 800f3e0:	f7ff ff82 	bl	800f2e8 <std>
 800f3e4:	68a0      	ldr	r0, [r4, #8]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	2109      	movs	r1, #9
 800f3ea:	f7ff ff7d 	bl	800f2e8 <std>
 800f3ee:	68e0      	ldr	r0, [r4, #12]
 800f3f0:	2202      	movs	r2, #2
 800f3f2:	2112      	movs	r1, #18
 800f3f4:	f7ff ff78 	bl	800f2e8 <std>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	61a3      	str	r3, [r4, #24]
 800f3fc:	e7d2      	b.n	800f3a4 <__sinit+0xc>
 800f3fe:	bf00      	nop
 800f400:	080130d4 	.word	0x080130d4
 800f404:	0800f331 	.word	0x0800f331

0800f408 <__sfp>:
 800f408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40a:	4607      	mov	r7, r0
 800f40c:	f7ff ffac 	bl	800f368 <__sfp_lock_acquire>
 800f410:	4b1e      	ldr	r3, [pc, #120]	; (800f48c <__sfp+0x84>)
 800f412:	681e      	ldr	r6, [r3, #0]
 800f414:	69b3      	ldr	r3, [r6, #24]
 800f416:	b913      	cbnz	r3, 800f41e <__sfp+0x16>
 800f418:	4630      	mov	r0, r6
 800f41a:	f7ff ffbd 	bl	800f398 <__sinit>
 800f41e:	3648      	adds	r6, #72	; 0x48
 800f420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f424:	3b01      	subs	r3, #1
 800f426:	d503      	bpl.n	800f430 <__sfp+0x28>
 800f428:	6833      	ldr	r3, [r6, #0]
 800f42a:	b30b      	cbz	r3, 800f470 <__sfp+0x68>
 800f42c:	6836      	ldr	r6, [r6, #0]
 800f42e:	e7f7      	b.n	800f420 <__sfp+0x18>
 800f430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f434:	b9d5      	cbnz	r5, 800f46c <__sfp+0x64>
 800f436:	4b16      	ldr	r3, [pc, #88]	; (800f490 <__sfp+0x88>)
 800f438:	60e3      	str	r3, [r4, #12]
 800f43a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f43e:	6665      	str	r5, [r4, #100]	; 0x64
 800f440:	f000 f859 	bl	800f4f6 <__retarget_lock_init_recursive>
 800f444:	f7ff ff96 	bl	800f374 <__sfp_lock_release>
 800f448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f44c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f450:	6025      	str	r5, [r4, #0]
 800f452:	61a5      	str	r5, [r4, #24]
 800f454:	2208      	movs	r2, #8
 800f456:	4629      	mov	r1, r5
 800f458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f45c:	f7ff fea8 	bl	800f1b0 <memset>
 800f460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f468:	4620      	mov	r0, r4
 800f46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f46c:	3468      	adds	r4, #104	; 0x68
 800f46e:	e7d9      	b.n	800f424 <__sfp+0x1c>
 800f470:	2104      	movs	r1, #4
 800f472:	4638      	mov	r0, r7
 800f474:	f7ff ff62 	bl	800f33c <__sfmoreglue>
 800f478:	4604      	mov	r4, r0
 800f47a:	6030      	str	r0, [r6, #0]
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d1d5      	bne.n	800f42c <__sfp+0x24>
 800f480:	f7ff ff78 	bl	800f374 <__sfp_lock_release>
 800f484:	230c      	movs	r3, #12
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	e7ee      	b.n	800f468 <__sfp+0x60>
 800f48a:	bf00      	nop
 800f48c:	080130d4 	.word	0x080130d4
 800f490:	ffff0001 	.word	0xffff0001

0800f494 <fiprintf>:
 800f494:	b40e      	push	{r1, r2, r3}
 800f496:	b503      	push	{r0, r1, lr}
 800f498:	4601      	mov	r1, r0
 800f49a:	ab03      	add	r3, sp, #12
 800f49c:	4805      	ldr	r0, [pc, #20]	; (800f4b4 <fiprintf+0x20>)
 800f49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4a2:	6800      	ldr	r0, [r0, #0]
 800f4a4:	9301      	str	r3, [sp, #4]
 800f4a6:	f000 fa97 	bl	800f9d8 <_vfiprintf_r>
 800f4aa:	b002      	add	sp, #8
 800f4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4b0:	b003      	add	sp, #12
 800f4b2:	4770      	bx	lr
 800f4b4:	20000014 	.word	0x20000014

0800f4b8 <_fwalk_reent>:
 800f4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4bc:	4606      	mov	r6, r0
 800f4be:	4688      	mov	r8, r1
 800f4c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4c4:	2700      	movs	r7, #0
 800f4c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4ca:	f1b9 0901 	subs.w	r9, r9, #1
 800f4ce:	d505      	bpl.n	800f4dc <_fwalk_reent+0x24>
 800f4d0:	6824      	ldr	r4, [r4, #0]
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	d1f7      	bne.n	800f4c6 <_fwalk_reent+0xe>
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4dc:	89ab      	ldrh	r3, [r5, #12]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d907      	bls.n	800f4f2 <_fwalk_reent+0x3a>
 800f4e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	d003      	beq.n	800f4f2 <_fwalk_reent+0x3a>
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	47c0      	blx	r8
 800f4f0:	4307      	orrs	r7, r0
 800f4f2:	3568      	adds	r5, #104	; 0x68
 800f4f4:	e7e9      	b.n	800f4ca <_fwalk_reent+0x12>

0800f4f6 <__retarget_lock_init_recursive>:
 800f4f6:	4770      	bx	lr

0800f4f8 <__retarget_lock_acquire_recursive>:
 800f4f8:	4770      	bx	lr

0800f4fa <__retarget_lock_release_recursive>:
 800f4fa:	4770      	bx	lr

0800f4fc <malloc>:
 800f4fc:	4b02      	ldr	r3, [pc, #8]	; (800f508 <malloc+0xc>)
 800f4fe:	4601      	mov	r1, r0
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	f000 b86f 	b.w	800f5e4 <_malloc_r>
 800f506:	bf00      	nop
 800f508:	20000014 	.word	0x20000014

0800f50c <_free_r>:
 800f50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f50e:	2900      	cmp	r1, #0
 800f510:	d044      	beq.n	800f59c <_free_r+0x90>
 800f512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f516:	9001      	str	r0, [sp, #4]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f1a1 0404 	sub.w	r4, r1, #4
 800f51e:	bfb8      	it	lt
 800f520:	18e4      	addlt	r4, r4, r3
 800f522:	f000 ff95 	bl	8010450 <__malloc_lock>
 800f526:	4a1e      	ldr	r2, [pc, #120]	; (800f5a0 <_free_r+0x94>)
 800f528:	9801      	ldr	r0, [sp, #4]
 800f52a:	6813      	ldr	r3, [r2, #0]
 800f52c:	b933      	cbnz	r3, 800f53c <_free_r+0x30>
 800f52e:	6063      	str	r3, [r4, #4]
 800f530:	6014      	str	r4, [r2, #0]
 800f532:	b003      	add	sp, #12
 800f534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f538:	f000 bf90 	b.w	801045c <__malloc_unlock>
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	d908      	bls.n	800f552 <_free_r+0x46>
 800f540:	6825      	ldr	r5, [r4, #0]
 800f542:	1961      	adds	r1, r4, r5
 800f544:	428b      	cmp	r3, r1
 800f546:	bf01      	itttt	eq
 800f548:	6819      	ldreq	r1, [r3, #0]
 800f54a:	685b      	ldreq	r3, [r3, #4]
 800f54c:	1949      	addeq	r1, r1, r5
 800f54e:	6021      	streq	r1, [r4, #0]
 800f550:	e7ed      	b.n	800f52e <_free_r+0x22>
 800f552:	461a      	mov	r2, r3
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	b10b      	cbz	r3, 800f55c <_free_r+0x50>
 800f558:	42a3      	cmp	r3, r4
 800f55a:	d9fa      	bls.n	800f552 <_free_r+0x46>
 800f55c:	6811      	ldr	r1, [r2, #0]
 800f55e:	1855      	adds	r5, r2, r1
 800f560:	42a5      	cmp	r5, r4
 800f562:	d10b      	bne.n	800f57c <_free_r+0x70>
 800f564:	6824      	ldr	r4, [r4, #0]
 800f566:	4421      	add	r1, r4
 800f568:	1854      	adds	r4, r2, r1
 800f56a:	42a3      	cmp	r3, r4
 800f56c:	6011      	str	r1, [r2, #0]
 800f56e:	d1e0      	bne.n	800f532 <_free_r+0x26>
 800f570:	681c      	ldr	r4, [r3, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	6053      	str	r3, [r2, #4]
 800f576:	4421      	add	r1, r4
 800f578:	6011      	str	r1, [r2, #0]
 800f57a:	e7da      	b.n	800f532 <_free_r+0x26>
 800f57c:	d902      	bls.n	800f584 <_free_r+0x78>
 800f57e:	230c      	movs	r3, #12
 800f580:	6003      	str	r3, [r0, #0]
 800f582:	e7d6      	b.n	800f532 <_free_r+0x26>
 800f584:	6825      	ldr	r5, [r4, #0]
 800f586:	1961      	adds	r1, r4, r5
 800f588:	428b      	cmp	r3, r1
 800f58a:	bf04      	itt	eq
 800f58c:	6819      	ldreq	r1, [r3, #0]
 800f58e:	685b      	ldreq	r3, [r3, #4]
 800f590:	6063      	str	r3, [r4, #4]
 800f592:	bf04      	itt	eq
 800f594:	1949      	addeq	r1, r1, r5
 800f596:	6021      	streq	r1, [r4, #0]
 800f598:	6054      	str	r4, [r2, #4]
 800f59a:	e7ca      	b.n	800f532 <_free_r+0x26>
 800f59c:	b003      	add	sp, #12
 800f59e:	bd30      	pop	{r4, r5, pc}
 800f5a0:	20008af8 	.word	0x20008af8

0800f5a4 <sbrk_aligned>:
 800f5a4:	b570      	push	{r4, r5, r6, lr}
 800f5a6:	4e0e      	ldr	r6, [pc, #56]	; (800f5e0 <sbrk_aligned+0x3c>)
 800f5a8:	460c      	mov	r4, r1
 800f5aa:	6831      	ldr	r1, [r6, #0]
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	b911      	cbnz	r1, 800f5b6 <sbrk_aligned+0x12>
 800f5b0:	f000 fcd6 	bl	800ff60 <_sbrk_r>
 800f5b4:	6030      	str	r0, [r6, #0]
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f000 fcd1 	bl	800ff60 <_sbrk_r>
 800f5be:	1c43      	adds	r3, r0, #1
 800f5c0:	d00a      	beq.n	800f5d8 <sbrk_aligned+0x34>
 800f5c2:	1cc4      	adds	r4, r0, #3
 800f5c4:	f024 0403 	bic.w	r4, r4, #3
 800f5c8:	42a0      	cmp	r0, r4
 800f5ca:	d007      	beq.n	800f5dc <sbrk_aligned+0x38>
 800f5cc:	1a21      	subs	r1, r4, r0
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	f000 fcc6 	bl	800ff60 <_sbrk_r>
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	d101      	bne.n	800f5dc <sbrk_aligned+0x38>
 800f5d8:	f04f 34ff 	mov.w	r4, #4294967295
 800f5dc:	4620      	mov	r0, r4
 800f5de:	bd70      	pop	{r4, r5, r6, pc}
 800f5e0:	20008afc 	.word	0x20008afc

0800f5e4 <_malloc_r>:
 800f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	1ccd      	adds	r5, r1, #3
 800f5ea:	f025 0503 	bic.w	r5, r5, #3
 800f5ee:	3508      	adds	r5, #8
 800f5f0:	2d0c      	cmp	r5, #12
 800f5f2:	bf38      	it	cc
 800f5f4:	250c      	movcc	r5, #12
 800f5f6:	2d00      	cmp	r5, #0
 800f5f8:	4607      	mov	r7, r0
 800f5fa:	db01      	blt.n	800f600 <_malloc_r+0x1c>
 800f5fc:	42a9      	cmp	r1, r5
 800f5fe:	d905      	bls.n	800f60c <_malloc_r+0x28>
 800f600:	230c      	movs	r3, #12
 800f602:	603b      	str	r3, [r7, #0]
 800f604:	2600      	movs	r6, #0
 800f606:	4630      	mov	r0, r6
 800f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f60c:	4e2e      	ldr	r6, [pc, #184]	; (800f6c8 <_malloc_r+0xe4>)
 800f60e:	f000 ff1f 	bl	8010450 <__malloc_lock>
 800f612:	6833      	ldr	r3, [r6, #0]
 800f614:	461c      	mov	r4, r3
 800f616:	bb34      	cbnz	r4, 800f666 <_malloc_r+0x82>
 800f618:	4629      	mov	r1, r5
 800f61a:	4638      	mov	r0, r7
 800f61c:	f7ff ffc2 	bl	800f5a4 <sbrk_aligned>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	4604      	mov	r4, r0
 800f624:	d14d      	bne.n	800f6c2 <_malloc_r+0xde>
 800f626:	6834      	ldr	r4, [r6, #0]
 800f628:	4626      	mov	r6, r4
 800f62a:	2e00      	cmp	r6, #0
 800f62c:	d140      	bne.n	800f6b0 <_malloc_r+0xcc>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	4631      	mov	r1, r6
 800f632:	4638      	mov	r0, r7
 800f634:	eb04 0803 	add.w	r8, r4, r3
 800f638:	f000 fc92 	bl	800ff60 <_sbrk_r>
 800f63c:	4580      	cmp	r8, r0
 800f63e:	d13a      	bne.n	800f6b6 <_malloc_r+0xd2>
 800f640:	6821      	ldr	r1, [r4, #0]
 800f642:	3503      	adds	r5, #3
 800f644:	1a6d      	subs	r5, r5, r1
 800f646:	f025 0503 	bic.w	r5, r5, #3
 800f64a:	3508      	adds	r5, #8
 800f64c:	2d0c      	cmp	r5, #12
 800f64e:	bf38      	it	cc
 800f650:	250c      	movcc	r5, #12
 800f652:	4629      	mov	r1, r5
 800f654:	4638      	mov	r0, r7
 800f656:	f7ff ffa5 	bl	800f5a4 <sbrk_aligned>
 800f65a:	3001      	adds	r0, #1
 800f65c:	d02b      	beq.n	800f6b6 <_malloc_r+0xd2>
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	442b      	add	r3, r5
 800f662:	6023      	str	r3, [r4, #0]
 800f664:	e00e      	b.n	800f684 <_malloc_r+0xa0>
 800f666:	6822      	ldr	r2, [r4, #0]
 800f668:	1b52      	subs	r2, r2, r5
 800f66a:	d41e      	bmi.n	800f6aa <_malloc_r+0xc6>
 800f66c:	2a0b      	cmp	r2, #11
 800f66e:	d916      	bls.n	800f69e <_malloc_r+0xba>
 800f670:	1961      	adds	r1, r4, r5
 800f672:	42a3      	cmp	r3, r4
 800f674:	6025      	str	r5, [r4, #0]
 800f676:	bf18      	it	ne
 800f678:	6059      	strne	r1, [r3, #4]
 800f67a:	6863      	ldr	r3, [r4, #4]
 800f67c:	bf08      	it	eq
 800f67e:	6031      	streq	r1, [r6, #0]
 800f680:	5162      	str	r2, [r4, r5]
 800f682:	604b      	str	r3, [r1, #4]
 800f684:	4638      	mov	r0, r7
 800f686:	f104 060b 	add.w	r6, r4, #11
 800f68a:	f000 fee7 	bl	801045c <__malloc_unlock>
 800f68e:	f026 0607 	bic.w	r6, r6, #7
 800f692:	1d23      	adds	r3, r4, #4
 800f694:	1af2      	subs	r2, r6, r3
 800f696:	d0b6      	beq.n	800f606 <_malloc_r+0x22>
 800f698:	1b9b      	subs	r3, r3, r6
 800f69a:	50a3      	str	r3, [r4, r2]
 800f69c:	e7b3      	b.n	800f606 <_malloc_r+0x22>
 800f69e:	6862      	ldr	r2, [r4, #4]
 800f6a0:	42a3      	cmp	r3, r4
 800f6a2:	bf0c      	ite	eq
 800f6a4:	6032      	streq	r2, [r6, #0]
 800f6a6:	605a      	strne	r2, [r3, #4]
 800f6a8:	e7ec      	b.n	800f684 <_malloc_r+0xa0>
 800f6aa:	4623      	mov	r3, r4
 800f6ac:	6864      	ldr	r4, [r4, #4]
 800f6ae:	e7b2      	b.n	800f616 <_malloc_r+0x32>
 800f6b0:	4634      	mov	r4, r6
 800f6b2:	6876      	ldr	r6, [r6, #4]
 800f6b4:	e7b9      	b.n	800f62a <_malloc_r+0x46>
 800f6b6:	230c      	movs	r3, #12
 800f6b8:	603b      	str	r3, [r7, #0]
 800f6ba:	4638      	mov	r0, r7
 800f6bc:	f000 fece 	bl	801045c <__malloc_unlock>
 800f6c0:	e7a1      	b.n	800f606 <_malloc_r+0x22>
 800f6c2:	6025      	str	r5, [r4, #0]
 800f6c4:	e7de      	b.n	800f684 <_malloc_r+0xa0>
 800f6c6:	bf00      	nop
 800f6c8:	20008af8 	.word	0x20008af8

0800f6cc <__ssputs_r>:
 800f6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d0:	688e      	ldr	r6, [r1, #8]
 800f6d2:	429e      	cmp	r6, r3
 800f6d4:	4682      	mov	sl, r0
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	4690      	mov	r8, r2
 800f6da:	461f      	mov	r7, r3
 800f6dc:	d838      	bhi.n	800f750 <__ssputs_r+0x84>
 800f6de:	898a      	ldrh	r2, [r1, #12]
 800f6e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6e4:	d032      	beq.n	800f74c <__ssputs_r+0x80>
 800f6e6:	6825      	ldr	r5, [r4, #0]
 800f6e8:	6909      	ldr	r1, [r1, #16]
 800f6ea:	eba5 0901 	sub.w	r9, r5, r1
 800f6ee:	6965      	ldr	r5, [r4, #20]
 800f6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	444b      	add	r3, r9
 800f6fc:	106d      	asrs	r5, r5, #1
 800f6fe:	429d      	cmp	r5, r3
 800f700:	bf38      	it	cc
 800f702:	461d      	movcc	r5, r3
 800f704:	0553      	lsls	r3, r2, #21
 800f706:	d531      	bpl.n	800f76c <__ssputs_r+0xa0>
 800f708:	4629      	mov	r1, r5
 800f70a:	f7ff ff6b 	bl	800f5e4 <_malloc_r>
 800f70e:	4606      	mov	r6, r0
 800f710:	b950      	cbnz	r0, 800f728 <__ssputs_r+0x5c>
 800f712:	230c      	movs	r3, #12
 800f714:	f8ca 3000 	str.w	r3, [sl]
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f71e:	81a3      	strh	r3, [r4, #12]
 800f720:	f04f 30ff 	mov.w	r0, #4294967295
 800f724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f728:	6921      	ldr	r1, [r4, #16]
 800f72a:	464a      	mov	r2, r9
 800f72c:	f7ff fd18 	bl	800f160 <memcpy>
 800f730:	89a3      	ldrh	r3, [r4, #12]
 800f732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f73a:	81a3      	strh	r3, [r4, #12]
 800f73c:	6126      	str	r6, [r4, #16]
 800f73e:	6165      	str	r5, [r4, #20]
 800f740:	444e      	add	r6, r9
 800f742:	eba5 0509 	sub.w	r5, r5, r9
 800f746:	6026      	str	r6, [r4, #0]
 800f748:	60a5      	str	r5, [r4, #8]
 800f74a:	463e      	mov	r6, r7
 800f74c:	42be      	cmp	r6, r7
 800f74e:	d900      	bls.n	800f752 <__ssputs_r+0x86>
 800f750:	463e      	mov	r6, r7
 800f752:	6820      	ldr	r0, [r4, #0]
 800f754:	4632      	mov	r2, r6
 800f756:	4641      	mov	r1, r8
 800f758:	f7ff fd10 	bl	800f17c <memmove>
 800f75c:	68a3      	ldr	r3, [r4, #8]
 800f75e:	1b9b      	subs	r3, r3, r6
 800f760:	60a3      	str	r3, [r4, #8]
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	4433      	add	r3, r6
 800f766:	6023      	str	r3, [r4, #0]
 800f768:	2000      	movs	r0, #0
 800f76a:	e7db      	b.n	800f724 <__ssputs_r+0x58>
 800f76c:	462a      	mov	r2, r5
 800f76e:	f000 fe7b 	bl	8010468 <_realloc_r>
 800f772:	4606      	mov	r6, r0
 800f774:	2800      	cmp	r0, #0
 800f776:	d1e1      	bne.n	800f73c <__ssputs_r+0x70>
 800f778:	6921      	ldr	r1, [r4, #16]
 800f77a:	4650      	mov	r0, sl
 800f77c:	f7ff fec6 	bl	800f50c <_free_r>
 800f780:	e7c7      	b.n	800f712 <__ssputs_r+0x46>
	...

0800f784 <_svfiprintf_r>:
 800f784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f788:	4698      	mov	r8, r3
 800f78a:	898b      	ldrh	r3, [r1, #12]
 800f78c:	061b      	lsls	r3, r3, #24
 800f78e:	b09d      	sub	sp, #116	; 0x74
 800f790:	4607      	mov	r7, r0
 800f792:	460d      	mov	r5, r1
 800f794:	4614      	mov	r4, r2
 800f796:	d50e      	bpl.n	800f7b6 <_svfiprintf_r+0x32>
 800f798:	690b      	ldr	r3, [r1, #16]
 800f79a:	b963      	cbnz	r3, 800f7b6 <_svfiprintf_r+0x32>
 800f79c:	2140      	movs	r1, #64	; 0x40
 800f79e:	f7ff ff21 	bl	800f5e4 <_malloc_r>
 800f7a2:	6028      	str	r0, [r5, #0]
 800f7a4:	6128      	str	r0, [r5, #16]
 800f7a6:	b920      	cbnz	r0, 800f7b2 <_svfiprintf_r+0x2e>
 800f7a8:	230c      	movs	r3, #12
 800f7aa:	603b      	str	r3, [r7, #0]
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b0:	e0d1      	b.n	800f956 <_svfiprintf_r+0x1d2>
 800f7b2:	2340      	movs	r3, #64	; 0x40
 800f7b4:	616b      	str	r3, [r5, #20]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ba:	2320      	movs	r3, #32
 800f7bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7c4:	2330      	movs	r3, #48	; 0x30
 800f7c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f970 <_svfiprintf_r+0x1ec>
 800f7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7ce:	f04f 0901 	mov.w	r9, #1
 800f7d2:	4623      	mov	r3, r4
 800f7d4:	469a      	mov	sl, r3
 800f7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7da:	b10a      	cbz	r2, 800f7e0 <_svfiprintf_r+0x5c>
 800f7dc:	2a25      	cmp	r2, #37	; 0x25
 800f7de:	d1f9      	bne.n	800f7d4 <_svfiprintf_r+0x50>
 800f7e0:	ebba 0b04 	subs.w	fp, sl, r4
 800f7e4:	d00b      	beq.n	800f7fe <_svfiprintf_r+0x7a>
 800f7e6:	465b      	mov	r3, fp
 800f7e8:	4622      	mov	r2, r4
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	f7ff ff6d 	bl	800f6cc <__ssputs_r>
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	f000 80aa 	beq.w	800f94c <_svfiprintf_r+0x1c8>
 800f7f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7fa:	445a      	add	r2, fp
 800f7fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800f802:	2b00      	cmp	r3, #0
 800f804:	f000 80a2 	beq.w	800f94c <_svfiprintf_r+0x1c8>
 800f808:	2300      	movs	r3, #0
 800f80a:	f04f 32ff 	mov.w	r2, #4294967295
 800f80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f812:	f10a 0a01 	add.w	sl, sl, #1
 800f816:	9304      	str	r3, [sp, #16]
 800f818:	9307      	str	r3, [sp, #28]
 800f81a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f81e:	931a      	str	r3, [sp, #104]	; 0x68
 800f820:	4654      	mov	r4, sl
 800f822:	2205      	movs	r2, #5
 800f824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f828:	4851      	ldr	r0, [pc, #324]	; (800f970 <_svfiprintf_r+0x1ec>)
 800f82a:	f7f0 fd09 	bl	8000240 <memchr>
 800f82e:	9a04      	ldr	r2, [sp, #16]
 800f830:	b9d8      	cbnz	r0, 800f86a <_svfiprintf_r+0xe6>
 800f832:	06d0      	lsls	r0, r2, #27
 800f834:	bf44      	itt	mi
 800f836:	2320      	movmi	r3, #32
 800f838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f83c:	0711      	lsls	r1, r2, #28
 800f83e:	bf44      	itt	mi
 800f840:	232b      	movmi	r3, #43	; 0x2b
 800f842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f846:	f89a 3000 	ldrb.w	r3, [sl]
 800f84a:	2b2a      	cmp	r3, #42	; 0x2a
 800f84c:	d015      	beq.n	800f87a <_svfiprintf_r+0xf6>
 800f84e:	9a07      	ldr	r2, [sp, #28]
 800f850:	4654      	mov	r4, sl
 800f852:	2000      	movs	r0, #0
 800f854:	f04f 0c0a 	mov.w	ip, #10
 800f858:	4621      	mov	r1, r4
 800f85a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f85e:	3b30      	subs	r3, #48	; 0x30
 800f860:	2b09      	cmp	r3, #9
 800f862:	d94e      	bls.n	800f902 <_svfiprintf_r+0x17e>
 800f864:	b1b0      	cbz	r0, 800f894 <_svfiprintf_r+0x110>
 800f866:	9207      	str	r2, [sp, #28]
 800f868:	e014      	b.n	800f894 <_svfiprintf_r+0x110>
 800f86a:	eba0 0308 	sub.w	r3, r0, r8
 800f86e:	fa09 f303 	lsl.w	r3, r9, r3
 800f872:	4313      	orrs	r3, r2
 800f874:	9304      	str	r3, [sp, #16]
 800f876:	46a2      	mov	sl, r4
 800f878:	e7d2      	b.n	800f820 <_svfiprintf_r+0x9c>
 800f87a:	9b03      	ldr	r3, [sp, #12]
 800f87c:	1d19      	adds	r1, r3, #4
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	9103      	str	r1, [sp, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	bfbb      	ittet	lt
 800f886:	425b      	neglt	r3, r3
 800f888:	f042 0202 	orrlt.w	r2, r2, #2
 800f88c:	9307      	strge	r3, [sp, #28]
 800f88e:	9307      	strlt	r3, [sp, #28]
 800f890:	bfb8      	it	lt
 800f892:	9204      	strlt	r2, [sp, #16]
 800f894:	7823      	ldrb	r3, [r4, #0]
 800f896:	2b2e      	cmp	r3, #46	; 0x2e
 800f898:	d10c      	bne.n	800f8b4 <_svfiprintf_r+0x130>
 800f89a:	7863      	ldrb	r3, [r4, #1]
 800f89c:	2b2a      	cmp	r3, #42	; 0x2a
 800f89e:	d135      	bne.n	800f90c <_svfiprintf_r+0x188>
 800f8a0:	9b03      	ldr	r3, [sp, #12]
 800f8a2:	1d1a      	adds	r2, r3, #4
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	9203      	str	r2, [sp, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	bfb8      	it	lt
 800f8ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8b0:	3402      	adds	r4, #2
 800f8b2:	9305      	str	r3, [sp, #20]
 800f8b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f980 <_svfiprintf_r+0x1fc>
 800f8b8:	7821      	ldrb	r1, [r4, #0]
 800f8ba:	2203      	movs	r2, #3
 800f8bc:	4650      	mov	r0, sl
 800f8be:	f7f0 fcbf 	bl	8000240 <memchr>
 800f8c2:	b140      	cbz	r0, 800f8d6 <_svfiprintf_r+0x152>
 800f8c4:	2340      	movs	r3, #64	; 0x40
 800f8c6:	eba0 000a 	sub.w	r0, r0, sl
 800f8ca:	fa03 f000 	lsl.w	r0, r3, r0
 800f8ce:	9b04      	ldr	r3, [sp, #16]
 800f8d0:	4303      	orrs	r3, r0
 800f8d2:	3401      	adds	r4, #1
 800f8d4:	9304      	str	r3, [sp, #16]
 800f8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8da:	4826      	ldr	r0, [pc, #152]	; (800f974 <_svfiprintf_r+0x1f0>)
 800f8dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8e0:	2206      	movs	r2, #6
 800f8e2:	f7f0 fcad 	bl	8000240 <memchr>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d038      	beq.n	800f95c <_svfiprintf_r+0x1d8>
 800f8ea:	4b23      	ldr	r3, [pc, #140]	; (800f978 <_svfiprintf_r+0x1f4>)
 800f8ec:	bb1b      	cbnz	r3, 800f936 <_svfiprintf_r+0x1b2>
 800f8ee:	9b03      	ldr	r3, [sp, #12]
 800f8f0:	3307      	adds	r3, #7
 800f8f2:	f023 0307 	bic.w	r3, r3, #7
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	9303      	str	r3, [sp, #12]
 800f8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8fc:	4433      	add	r3, r6
 800f8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f900:	e767      	b.n	800f7d2 <_svfiprintf_r+0x4e>
 800f902:	fb0c 3202 	mla	r2, ip, r2, r3
 800f906:	460c      	mov	r4, r1
 800f908:	2001      	movs	r0, #1
 800f90a:	e7a5      	b.n	800f858 <_svfiprintf_r+0xd4>
 800f90c:	2300      	movs	r3, #0
 800f90e:	3401      	adds	r4, #1
 800f910:	9305      	str	r3, [sp, #20]
 800f912:	4619      	mov	r1, r3
 800f914:	f04f 0c0a 	mov.w	ip, #10
 800f918:	4620      	mov	r0, r4
 800f91a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f91e:	3a30      	subs	r2, #48	; 0x30
 800f920:	2a09      	cmp	r2, #9
 800f922:	d903      	bls.n	800f92c <_svfiprintf_r+0x1a8>
 800f924:	2b00      	cmp	r3, #0
 800f926:	d0c5      	beq.n	800f8b4 <_svfiprintf_r+0x130>
 800f928:	9105      	str	r1, [sp, #20]
 800f92a:	e7c3      	b.n	800f8b4 <_svfiprintf_r+0x130>
 800f92c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f930:	4604      	mov	r4, r0
 800f932:	2301      	movs	r3, #1
 800f934:	e7f0      	b.n	800f918 <_svfiprintf_r+0x194>
 800f936:	ab03      	add	r3, sp, #12
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	462a      	mov	r2, r5
 800f93c:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <_svfiprintf_r+0x1f8>)
 800f93e:	a904      	add	r1, sp, #16
 800f940:	4638      	mov	r0, r7
 800f942:	f3af 8000 	nop.w
 800f946:	1c42      	adds	r2, r0, #1
 800f948:	4606      	mov	r6, r0
 800f94a:	d1d6      	bne.n	800f8fa <_svfiprintf_r+0x176>
 800f94c:	89ab      	ldrh	r3, [r5, #12]
 800f94e:	065b      	lsls	r3, r3, #25
 800f950:	f53f af2c 	bmi.w	800f7ac <_svfiprintf_r+0x28>
 800f954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f956:	b01d      	add	sp, #116	; 0x74
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95c:	ab03      	add	r3, sp, #12
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	462a      	mov	r2, r5
 800f962:	4b06      	ldr	r3, [pc, #24]	; (800f97c <_svfiprintf_r+0x1f8>)
 800f964:	a904      	add	r1, sp, #16
 800f966:	4638      	mov	r0, r7
 800f968:	f000 f9d4 	bl	800fd14 <_printf_i>
 800f96c:	e7eb      	b.n	800f946 <_svfiprintf_r+0x1c2>
 800f96e:	bf00      	nop
 800f970:	080131e8 	.word	0x080131e8
 800f974:	080131f2 	.word	0x080131f2
 800f978:	00000000 	.word	0x00000000
 800f97c:	0800f6cd 	.word	0x0800f6cd
 800f980:	080131ee 	.word	0x080131ee

0800f984 <__sfputc_r>:
 800f984:	6893      	ldr	r3, [r2, #8]
 800f986:	3b01      	subs	r3, #1
 800f988:	2b00      	cmp	r3, #0
 800f98a:	b410      	push	{r4}
 800f98c:	6093      	str	r3, [r2, #8]
 800f98e:	da08      	bge.n	800f9a2 <__sfputc_r+0x1e>
 800f990:	6994      	ldr	r4, [r2, #24]
 800f992:	42a3      	cmp	r3, r4
 800f994:	db01      	blt.n	800f99a <__sfputc_r+0x16>
 800f996:	290a      	cmp	r1, #10
 800f998:	d103      	bne.n	800f9a2 <__sfputc_r+0x1e>
 800f99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f99e:	f000 bb33 	b.w	8010008 <__swbuf_r>
 800f9a2:	6813      	ldr	r3, [r2, #0]
 800f9a4:	1c58      	adds	r0, r3, #1
 800f9a6:	6010      	str	r0, [r2, #0]
 800f9a8:	7019      	strb	r1, [r3, #0]
 800f9aa:	4608      	mov	r0, r1
 800f9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <__sfputs_r>:
 800f9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	460f      	mov	r7, r1
 800f9b8:	4614      	mov	r4, r2
 800f9ba:	18d5      	adds	r5, r2, r3
 800f9bc:	42ac      	cmp	r4, r5
 800f9be:	d101      	bne.n	800f9c4 <__sfputs_r+0x12>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	e007      	b.n	800f9d4 <__sfputs_r+0x22>
 800f9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c8:	463a      	mov	r2, r7
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7ff ffda 	bl	800f984 <__sfputc_r>
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	d1f3      	bne.n	800f9bc <__sfputs_r+0xa>
 800f9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9d8 <_vfiprintf_r>:
 800f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	460d      	mov	r5, r1
 800f9de:	b09d      	sub	sp, #116	; 0x74
 800f9e0:	4614      	mov	r4, r2
 800f9e2:	4698      	mov	r8, r3
 800f9e4:	4606      	mov	r6, r0
 800f9e6:	b118      	cbz	r0, 800f9f0 <_vfiprintf_r+0x18>
 800f9e8:	6983      	ldr	r3, [r0, #24]
 800f9ea:	b90b      	cbnz	r3, 800f9f0 <_vfiprintf_r+0x18>
 800f9ec:	f7ff fcd4 	bl	800f398 <__sinit>
 800f9f0:	4b89      	ldr	r3, [pc, #548]	; (800fc18 <_vfiprintf_r+0x240>)
 800f9f2:	429d      	cmp	r5, r3
 800f9f4:	d11b      	bne.n	800fa2e <_vfiprintf_r+0x56>
 800f9f6:	6875      	ldr	r5, [r6, #4]
 800f9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9fa:	07d9      	lsls	r1, r3, #31
 800f9fc:	d405      	bmi.n	800fa0a <_vfiprintf_r+0x32>
 800f9fe:	89ab      	ldrh	r3, [r5, #12]
 800fa00:	059a      	lsls	r2, r3, #22
 800fa02:	d402      	bmi.n	800fa0a <_vfiprintf_r+0x32>
 800fa04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa06:	f7ff fd77 	bl	800f4f8 <__retarget_lock_acquire_recursive>
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	071b      	lsls	r3, r3, #28
 800fa0e:	d501      	bpl.n	800fa14 <_vfiprintf_r+0x3c>
 800fa10:	692b      	ldr	r3, [r5, #16]
 800fa12:	b9eb      	cbnz	r3, 800fa50 <_vfiprintf_r+0x78>
 800fa14:	4629      	mov	r1, r5
 800fa16:	4630      	mov	r0, r6
 800fa18:	f000 fb5a 	bl	80100d0 <__swsetup_r>
 800fa1c:	b1c0      	cbz	r0, 800fa50 <_vfiprintf_r+0x78>
 800fa1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa20:	07dc      	lsls	r4, r3, #31
 800fa22:	d50e      	bpl.n	800fa42 <_vfiprintf_r+0x6a>
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295
 800fa28:	b01d      	add	sp, #116	; 0x74
 800fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	4b7b      	ldr	r3, [pc, #492]	; (800fc1c <_vfiprintf_r+0x244>)
 800fa30:	429d      	cmp	r5, r3
 800fa32:	d101      	bne.n	800fa38 <_vfiprintf_r+0x60>
 800fa34:	68b5      	ldr	r5, [r6, #8]
 800fa36:	e7df      	b.n	800f9f8 <_vfiprintf_r+0x20>
 800fa38:	4b79      	ldr	r3, [pc, #484]	; (800fc20 <_vfiprintf_r+0x248>)
 800fa3a:	429d      	cmp	r5, r3
 800fa3c:	bf08      	it	eq
 800fa3e:	68f5      	ldreq	r5, [r6, #12]
 800fa40:	e7da      	b.n	800f9f8 <_vfiprintf_r+0x20>
 800fa42:	89ab      	ldrh	r3, [r5, #12]
 800fa44:	0598      	lsls	r0, r3, #22
 800fa46:	d4ed      	bmi.n	800fa24 <_vfiprintf_r+0x4c>
 800fa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa4a:	f7ff fd56 	bl	800f4fa <__retarget_lock_release_recursive>
 800fa4e:	e7e9      	b.n	800fa24 <_vfiprintf_r+0x4c>
 800fa50:	2300      	movs	r3, #0
 800fa52:	9309      	str	r3, [sp, #36]	; 0x24
 800fa54:	2320      	movs	r3, #32
 800fa56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa5e:	2330      	movs	r3, #48	; 0x30
 800fa60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc24 <_vfiprintf_r+0x24c>
 800fa64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa68:	f04f 0901 	mov.w	r9, #1
 800fa6c:	4623      	mov	r3, r4
 800fa6e:	469a      	mov	sl, r3
 800fa70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa74:	b10a      	cbz	r2, 800fa7a <_vfiprintf_r+0xa2>
 800fa76:	2a25      	cmp	r2, #37	; 0x25
 800fa78:	d1f9      	bne.n	800fa6e <_vfiprintf_r+0x96>
 800fa7a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa7e:	d00b      	beq.n	800fa98 <_vfiprintf_r+0xc0>
 800fa80:	465b      	mov	r3, fp
 800fa82:	4622      	mov	r2, r4
 800fa84:	4629      	mov	r1, r5
 800fa86:	4630      	mov	r0, r6
 800fa88:	f7ff ff93 	bl	800f9b2 <__sfputs_r>
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	f000 80aa 	beq.w	800fbe6 <_vfiprintf_r+0x20e>
 800fa92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa94:	445a      	add	r2, fp
 800fa96:	9209      	str	r2, [sp, #36]	; 0x24
 800fa98:	f89a 3000 	ldrb.w	r3, [sl]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f000 80a2 	beq.w	800fbe6 <_vfiprintf_r+0x20e>
 800faa2:	2300      	movs	r3, #0
 800faa4:	f04f 32ff 	mov.w	r2, #4294967295
 800faa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faac:	f10a 0a01 	add.w	sl, sl, #1
 800fab0:	9304      	str	r3, [sp, #16]
 800fab2:	9307      	str	r3, [sp, #28]
 800fab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fab8:	931a      	str	r3, [sp, #104]	; 0x68
 800faba:	4654      	mov	r4, sl
 800fabc:	2205      	movs	r2, #5
 800fabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac2:	4858      	ldr	r0, [pc, #352]	; (800fc24 <_vfiprintf_r+0x24c>)
 800fac4:	f7f0 fbbc 	bl	8000240 <memchr>
 800fac8:	9a04      	ldr	r2, [sp, #16]
 800faca:	b9d8      	cbnz	r0, 800fb04 <_vfiprintf_r+0x12c>
 800facc:	06d1      	lsls	r1, r2, #27
 800face:	bf44      	itt	mi
 800fad0:	2320      	movmi	r3, #32
 800fad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fad6:	0713      	lsls	r3, r2, #28
 800fad8:	bf44      	itt	mi
 800fada:	232b      	movmi	r3, #43	; 0x2b
 800fadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fae0:	f89a 3000 	ldrb.w	r3, [sl]
 800fae4:	2b2a      	cmp	r3, #42	; 0x2a
 800fae6:	d015      	beq.n	800fb14 <_vfiprintf_r+0x13c>
 800fae8:	9a07      	ldr	r2, [sp, #28]
 800faea:	4654      	mov	r4, sl
 800faec:	2000      	movs	r0, #0
 800faee:	f04f 0c0a 	mov.w	ip, #10
 800faf2:	4621      	mov	r1, r4
 800faf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faf8:	3b30      	subs	r3, #48	; 0x30
 800fafa:	2b09      	cmp	r3, #9
 800fafc:	d94e      	bls.n	800fb9c <_vfiprintf_r+0x1c4>
 800fafe:	b1b0      	cbz	r0, 800fb2e <_vfiprintf_r+0x156>
 800fb00:	9207      	str	r2, [sp, #28]
 800fb02:	e014      	b.n	800fb2e <_vfiprintf_r+0x156>
 800fb04:	eba0 0308 	sub.w	r3, r0, r8
 800fb08:	fa09 f303 	lsl.w	r3, r9, r3
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	9304      	str	r3, [sp, #16]
 800fb10:	46a2      	mov	sl, r4
 800fb12:	e7d2      	b.n	800faba <_vfiprintf_r+0xe2>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	1d19      	adds	r1, r3, #4
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	9103      	str	r1, [sp, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bfbb      	ittet	lt
 800fb20:	425b      	neglt	r3, r3
 800fb22:	f042 0202 	orrlt.w	r2, r2, #2
 800fb26:	9307      	strge	r3, [sp, #28]
 800fb28:	9307      	strlt	r3, [sp, #28]
 800fb2a:	bfb8      	it	lt
 800fb2c:	9204      	strlt	r2, [sp, #16]
 800fb2e:	7823      	ldrb	r3, [r4, #0]
 800fb30:	2b2e      	cmp	r3, #46	; 0x2e
 800fb32:	d10c      	bne.n	800fb4e <_vfiprintf_r+0x176>
 800fb34:	7863      	ldrb	r3, [r4, #1]
 800fb36:	2b2a      	cmp	r3, #42	; 0x2a
 800fb38:	d135      	bne.n	800fba6 <_vfiprintf_r+0x1ce>
 800fb3a:	9b03      	ldr	r3, [sp, #12]
 800fb3c:	1d1a      	adds	r2, r3, #4
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	9203      	str	r2, [sp, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bfb8      	it	lt
 800fb46:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb4a:	3402      	adds	r4, #2
 800fb4c:	9305      	str	r3, [sp, #20]
 800fb4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc34 <_vfiprintf_r+0x25c>
 800fb52:	7821      	ldrb	r1, [r4, #0]
 800fb54:	2203      	movs	r2, #3
 800fb56:	4650      	mov	r0, sl
 800fb58:	f7f0 fb72 	bl	8000240 <memchr>
 800fb5c:	b140      	cbz	r0, 800fb70 <_vfiprintf_r+0x198>
 800fb5e:	2340      	movs	r3, #64	; 0x40
 800fb60:	eba0 000a 	sub.w	r0, r0, sl
 800fb64:	fa03 f000 	lsl.w	r0, r3, r0
 800fb68:	9b04      	ldr	r3, [sp, #16]
 800fb6a:	4303      	orrs	r3, r0
 800fb6c:	3401      	adds	r4, #1
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb74:	482c      	ldr	r0, [pc, #176]	; (800fc28 <_vfiprintf_r+0x250>)
 800fb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb7a:	2206      	movs	r2, #6
 800fb7c:	f7f0 fb60 	bl	8000240 <memchr>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d03f      	beq.n	800fc04 <_vfiprintf_r+0x22c>
 800fb84:	4b29      	ldr	r3, [pc, #164]	; (800fc2c <_vfiprintf_r+0x254>)
 800fb86:	bb1b      	cbnz	r3, 800fbd0 <_vfiprintf_r+0x1f8>
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	3307      	adds	r3, #7
 800fb8c:	f023 0307 	bic.w	r3, r3, #7
 800fb90:	3308      	adds	r3, #8
 800fb92:	9303      	str	r3, [sp, #12]
 800fb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb96:	443b      	add	r3, r7
 800fb98:	9309      	str	r3, [sp, #36]	; 0x24
 800fb9a:	e767      	b.n	800fa6c <_vfiprintf_r+0x94>
 800fb9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fba0:	460c      	mov	r4, r1
 800fba2:	2001      	movs	r0, #1
 800fba4:	e7a5      	b.n	800faf2 <_vfiprintf_r+0x11a>
 800fba6:	2300      	movs	r3, #0
 800fba8:	3401      	adds	r4, #1
 800fbaa:	9305      	str	r3, [sp, #20]
 800fbac:	4619      	mov	r1, r3
 800fbae:	f04f 0c0a 	mov.w	ip, #10
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbb8:	3a30      	subs	r2, #48	; 0x30
 800fbba:	2a09      	cmp	r2, #9
 800fbbc:	d903      	bls.n	800fbc6 <_vfiprintf_r+0x1ee>
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d0c5      	beq.n	800fb4e <_vfiprintf_r+0x176>
 800fbc2:	9105      	str	r1, [sp, #20]
 800fbc4:	e7c3      	b.n	800fb4e <_vfiprintf_r+0x176>
 800fbc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbca:	4604      	mov	r4, r0
 800fbcc:	2301      	movs	r3, #1
 800fbce:	e7f0      	b.n	800fbb2 <_vfiprintf_r+0x1da>
 800fbd0:	ab03      	add	r3, sp, #12
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	4b16      	ldr	r3, [pc, #88]	; (800fc30 <_vfiprintf_r+0x258>)
 800fbd8:	a904      	add	r1, sp, #16
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f3af 8000 	nop.w
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	1c78      	adds	r0, r7, #1
 800fbe4:	d1d6      	bne.n	800fb94 <_vfiprintf_r+0x1bc>
 800fbe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbe8:	07d9      	lsls	r1, r3, #31
 800fbea:	d405      	bmi.n	800fbf8 <_vfiprintf_r+0x220>
 800fbec:	89ab      	ldrh	r3, [r5, #12]
 800fbee:	059a      	lsls	r2, r3, #22
 800fbf0:	d402      	bmi.n	800fbf8 <_vfiprintf_r+0x220>
 800fbf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbf4:	f7ff fc81 	bl	800f4fa <__retarget_lock_release_recursive>
 800fbf8:	89ab      	ldrh	r3, [r5, #12]
 800fbfa:	065b      	lsls	r3, r3, #25
 800fbfc:	f53f af12 	bmi.w	800fa24 <_vfiprintf_r+0x4c>
 800fc00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc02:	e711      	b.n	800fa28 <_vfiprintf_r+0x50>
 800fc04:	ab03      	add	r3, sp, #12
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	462a      	mov	r2, r5
 800fc0a:	4b09      	ldr	r3, [pc, #36]	; (800fc30 <_vfiprintf_r+0x258>)
 800fc0c:	a904      	add	r1, sp, #16
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f000 f880 	bl	800fd14 <_printf_i>
 800fc14:	e7e4      	b.n	800fbe0 <_vfiprintf_r+0x208>
 800fc16:	bf00      	nop
 800fc18:	080131a8 	.word	0x080131a8
 800fc1c:	080131c8 	.word	0x080131c8
 800fc20:	08013188 	.word	0x08013188
 800fc24:	080131e8 	.word	0x080131e8
 800fc28:	080131f2 	.word	0x080131f2
 800fc2c:	00000000 	.word	0x00000000
 800fc30:	0800f9b3 	.word	0x0800f9b3
 800fc34:	080131ee 	.word	0x080131ee

0800fc38 <_printf_common>:
 800fc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc3c:	4616      	mov	r6, r2
 800fc3e:	4699      	mov	r9, r3
 800fc40:	688a      	ldr	r2, [r1, #8]
 800fc42:	690b      	ldr	r3, [r1, #16]
 800fc44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	bfb8      	it	lt
 800fc4c:	4613      	movlt	r3, r2
 800fc4e:	6033      	str	r3, [r6, #0]
 800fc50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc54:	4607      	mov	r7, r0
 800fc56:	460c      	mov	r4, r1
 800fc58:	b10a      	cbz	r2, 800fc5e <_printf_common+0x26>
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	6033      	str	r3, [r6, #0]
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	0699      	lsls	r1, r3, #26
 800fc62:	bf42      	ittt	mi
 800fc64:	6833      	ldrmi	r3, [r6, #0]
 800fc66:	3302      	addmi	r3, #2
 800fc68:	6033      	strmi	r3, [r6, #0]
 800fc6a:	6825      	ldr	r5, [r4, #0]
 800fc6c:	f015 0506 	ands.w	r5, r5, #6
 800fc70:	d106      	bne.n	800fc80 <_printf_common+0x48>
 800fc72:	f104 0a19 	add.w	sl, r4, #25
 800fc76:	68e3      	ldr	r3, [r4, #12]
 800fc78:	6832      	ldr	r2, [r6, #0]
 800fc7a:	1a9b      	subs	r3, r3, r2
 800fc7c:	42ab      	cmp	r3, r5
 800fc7e:	dc26      	bgt.n	800fcce <_printf_common+0x96>
 800fc80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc84:	1e13      	subs	r3, r2, #0
 800fc86:	6822      	ldr	r2, [r4, #0]
 800fc88:	bf18      	it	ne
 800fc8a:	2301      	movne	r3, #1
 800fc8c:	0692      	lsls	r2, r2, #26
 800fc8e:	d42b      	bmi.n	800fce8 <_printf_common+0xb0>
 800fc90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc94:	4649      	mov	r1, r9
 800fc96:	4638      	mov	r0, r7
 800fc98:	47c0      	blx	r8
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	d01e      	beq.n	800fcdc <_printf_common+0xa4>
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	68e5      	ldr	r5, [r4, #12]
 800fca2:	6832      	ldr	r2, [r6, #0]
 800fca4:	f003 0306 	and.w	r3, r3, #6
 800fca8:	2b04      	cmp	r3, #4
 800fcaa:	bf08      	it	eq
 800fcac:	1aad      	subeq	r5, r5, r2
 800fcae:	68a3      	ldr	r3, [r4, #8]
 800fcb0:	6922      	ldr	r2, [r4, #16]
 800fcb2:	bf0c      	ite	eq
 800fcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcb8:	2500      	movne	r5, #0
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	bfc4      	itt	gt
 800fcbe:	1a9b      	subgt	r3, r3, r2
 800fcc0:	18ed      	addgt	r5, r5, r3
 800fcc2:	2600      	movs	r6, #0
 800fcc4:	341a      	adds	r4, #26
 800fcc6:	42b5      	cmp	r5, r6
 800fcc8:	d11a      	bne.n	800fd00 <_printf_common+0xc8>
 800fcca:	2000      	movs	r0, #0
 800fccc:	e008      	b.n	800fce0 <_printf_common+0xa8>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	4652      	mov	r2, sl
 800fcd2:	4649      	mov	r1, r9
 800fcd4:	4638      	mov	r0, r7
 800fcd6:	47c0      	blx	r8
 800fcd8:	3001      	adds	r0, #1
 800fcda:	d103      	bne.n	800fce4 <_printf_common+0xac>
 800fcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800fce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce4:	3501      	adds	r5, #1
 800fce6:	e7c6      	b.n	800fc76 <_printf_common+0x3e>
 800fce8:	18e1      	adds	r1, r4, r3
 800fcea:	1c5a      	adds	r2, r3, #1
 800fcec:	2030      	movs	r0, #48	; 0x30
 800fcee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcf2:	4422      	add	r2, r4
 800fcf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fcfc:	3302      	adds	r3, #2
 800fcfe:	e7c7      	b.n	800fc90 <_printf_common+0x58>
 800fd00:	2301      	movs	r3, #1
 800fd02:	4622      	mov	r2, r4
 800fd04:	4649      	mov	r1, r9
 800fd06:	4638      	mov	r0, r7
 800fd08:	47c0      	blx	r8
 800fd0a:	3001      	adds	r0, #1
 800fd0c:	d0e6      	beq.n	800fcdc <_printf_common+0xa4>
 800fd0e:	3601      	adds	r6, #1
 800fd10:	e7d9      	b.n	800fcc6 <_printf_common+0x8e>
	...

0800fd14 <_printf_i>:
 800fd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd18:	7e0f      	ldrb	r7, [r1, #24]
 800fd1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd1c:	2f78      	cmp	r7, #120	; 0x78
 800fd1e:	4691      	mov	r9, r2
 800fd20:	4680      	mov	r8, r0
 800fd22:	460c      	mov	r4, r1
 800fd24:	469a      	mov	sl, r3
 800fd26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd2a:	d807      	bhi.n	800fd3c <_printf_i+0x28>
 800fd2c:	2f62      	cmp	r7, #98	; 0x62
 800fd2e:	d80a      	bhi.n	800fd46 <_printf_i+0x32>
 800fd30:	2f00      	cmp	r7, #0
 800fd32:	f000 80d8 	beq.w	800fee6 <_printf_i+0x1d2>
 800fd36:	2f58      	cmp	r7, #88	; 0x58
 800fd38:	f000 80a3 	beq.w	800fe82 <_printf_i+0x16e>
 800fd3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd44:	e03a      	b.n	800fdbc <_printf_i+0xa8>
 800fd46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd4a:	2b15      	cmp	r3, #21
 800fd4c:	d8f6      	bhi.n	800fd3c <_printf_i+0x28>
 800fd4e:	a101      	add	r1, pc, #4	; (adr r1, 800fd54 <_printf_i+0x40>)
 800fd50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd54:	0800fdad 	.word	0x0800fdad
 800fd58:	0800fdc1 	.word	0x0800fdc1
 800fd5c:	0800fd3d 	.word	0x0800fd3d
 800fd60:	0800fd3d 	.word	0x0800fd3d
 800fd64:	0800fd3d 	.word	0x0800fd3d
 800fd68:	0800fd3d 	.word	0x0800fd3d
 800fd6c:	0800fdc1 	.word	0x0800fdc1
 800fd70:	0800fd3d 	.word	0x0800fd3d
 800fd74:	0800fd3d 	.word	0x0800fd3d
 800fd78:	0800fd3d 	.word	0x0800fd3d
 800fd7c:	0800fd3d 	.word	0x0800fd3d
 800fd80:	0800fecd 	.word	0x0800fecd
 800fd84:	0800fdf1 	.word	0x0800fdf1
 800fd88:	0800feaf 	.word	0x0800feaf
 800fd8c:	0800fd3d 	.word	0x0800fd3d
 800fd90:	0800fd3d 	.word	0x0800fd3d
 800fd94:	0800feef 	.word	0x0800feef
 800fd98:	0800fd3d 	.word	0x0800fd3d
 800fd9c:	0800fdf1 	.word	0x0800fdf1
 800fda0:	0800fd3d 	.word	0x0800fd3d
 800fda4:	0800fd3d 	.word	0x0800fd3d
 800fda8:	0800feb7 	.word	0x0800feb7
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	1d1a      	adds	r2, r3, #4
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	602a      	str	r2, [r5, #0]
 800fdb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e0a3      	b.n	800ff08 <_printf_i+0x1f4>
 800fdc0:	6820      	ldr	r0, [r4, #0]
 800fdc2:	6829      	ldr	r1, [r5, #0]
 800fdc4:	0606      	lsls	r6, r0, #24
 800fdc6:	f101 0304 	add.w	r3, r1, #4
 800fdca:	d50a      	bpl.n	800fde2 <_printf_i+0xce>
 800fdcc:	680e      	ldr	r6, [r1, #0]
 800fdce:	602b      	str	r3, [r5, #0]
 800fdd0:	2e00      	cmp	r6, #0
 800fdd2:	da03      	bge.n	800fddc <_printf_i+0xc8>
 800fdd4:	232d      	movs	r3, #45	; 0x2d
 800fdd6:	4276      	negs	r6, r6
 800fdd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fddc:	485e      	ldr	r0, [pc, #376]	; (800ff58 <_printf_i+0x244>)
 800fdde:	230a      	movs	r3, #10
 800fde0:	e019      	b.n	800fe16 <_printf_i+0x102>
 800fde2:	680e      	ldr	r6, [r1, #0]
 800fde4:	602b      	str	r3, [r5, #0]
 800fde6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fdea:	bf18      	it	ne
 800fdec:	b236      	sxthne	r6, r6
 800fdee:	e7ef      	b.n	800fdd0 <_printf_i+0xbc>
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	6820      	ldr	r0, [r4, #0]
 800fdf4:	1d19      	adds	r1, r3, #4
 800fdf6:	6029      	str	r1, [r5, #0]
 800fdf8:	0601      	lsls	r1, r0, #24
 800fdfa:	d501      	bpl.n	800fe00 <_printf_i+0xec>
 800fdfc:	681e      	ldr	r6, [r3, #0]
 800fdfe:	e002      	b.n	800fe06 <_printf_i+0xf2>
 800fe00:	0646      	lsls	r6, r0, #25
 800fe02:	d5fb      	bpl.n	800fdfc <_printf_i+0xe8>
 800fe04:	881e      	ldrh	r6, [r3, #0]
 800fe06:	4854      	ldr	r0, [pc, #336]	; (800ff58 <_printf_i+0x244>)
 800fe08:	2f6f      	cmp	r7, #111	; 0x6f
 800fe0a:	bf0c      	ite	eq
 800fe0c:	2308      	moveq	r3, #8
 800fe0e:	230a      	movne	r3, #10
 800fe10:	2100      	movs	r1, #0
 800fe12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe16:	6865      	ldr	r5, [r4, #4]
 800fe18:	60a5      	str	r5, [r4, #8]
 800fe1a:	2d00      	cmp	r5, #0
 800fe1c:	bfa2      	ittt	ge
 800fe1e:	6821      	ldrge	r1, [r4, #0]
 800fe20:	f021 0104 	bicge.w	r1, r1, #4
 800fe24:	6021      	strge	r1, [r4, #0]
 800fe26:	b90e      	cbnz	r6, 800fe2c <_printf_i+0x118>
 800fe28:	2d00      	cmp	r5, #0
 800fe2a:	d04d      	beq.n	800fec8 <_printf_i+0x1b4>
 800fe2c:	4615      	mov	r5, r2
 800fe2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe32:	fb03 6711 	mls	r7, r3, r1, r6
 800fe36:	5dc7      	ldrb	r7, [r0, r7]
 800fe38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe3c:	4637      	mov	r7, r6
 800fe3e:	42bb      	cmp	r3, r7
 800fe40:	460e      	mov	r6, r1
 800fe42:	d9f4      	bls.n	800fe2e <_printf_i+0x11a>
 800fe44:	2b08      	cmp	r3, #8
 800fe46:	d10b      	bne.n	800fe60 <_printf_i+0x14c>
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	07de      	lsls	r6, r3, #31
 800fe4c:	d508      	bpl.n	800fe60 <_printf_i+0x14c>
 800fe4e:	6923      	ldr	r3, [r4, #16]
 800fe50:	6861      	ldr	r1, [r4, #4]
 800fe52:	4299      	cmp	r1, r3
 800fe54:	bfde      	ittt	le
 800fe56:	2330      	movle	r3, #48	; 0x30
 800fe58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe60:	1b52      	subs	r2, r2, r5
 800fe62:	6122      	str	r2, [r4, #16]
 800fe64:	f8cd a000 	str.w	sl, [sp]
 800fe68:	464b      	mov	r3, r9
 800fe6a:	aa03      	add	r2, sp, #12
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f7ff fee2 	bl	800fc38 <_printf_common>
 800fe74:	3001      	adds	r0, #1
 800fe76:	d14c      	bne.n	800ff12 <_printf_i+0x1fe>
 800fe78:	f04f 30ff 	mov.w	r0, #4294967295
 800fe7c:	b004      	add	sp, #16
 800fe7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe82:	4835      	ldr	r0, [pc, #212]	; (800ff58 <_printf_i+0x244>)
 800fe84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fe88:	6829      	ldr	r1, [r5, #0]
 800fe8a:	6823      	ldr	r3, [r4, #0]
 800fe8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe90:	6029      	str	r1, [r5, #0]
 800fe92:	061d      	lsls	r5, r3, #24
 800fe94:	d514      	bpl.n	800fec0 <_printf_i+0x1ac>
 800fe96:	07df      	lsls	r7, r3, #31
 800fe98:	bf44      	itt	mi
 800fe9a:	f043 0320 	orrmi.w	r3, r3, #32
 800fe9e:	6023      	strmi	r3, [r4, #0]
 800fea0:	b91e      	cbnz	r6, 800feaa <_printf_i+0x196>
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	f023 0320 	bic.w	r3, r3, #32
 800fea8:	6023      	str	r3, [r4, #0]
 800feaa:	2310      	movs	r3, #16
 800feac:	e7b0      	b.n	800fe10 <_printf_i+0xfc>
 800feae:	6823      	ldr	r3, [r4, #0]
 800feb0:	f043 0320 	orr.w	r3, r3, #32
 800feb4:	6023      	str	r3, [r4, #0]
 800feb6:	2378      	movs	r3, #120	; 0x78
 800feb8:	4828      	ldr	r0, [pc, #160]	; (800ff5c <_printf_i+0x248>)
 800feba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800febe:	e7e3      	b.n	800fe88 <_printf_i+0x174>
 800fec0:	0659      	lsls	r1, r3, #25
 800fec2:	bf48      	it	mi
 800fec4:	b2b6      	uxthmi	r6, r6
 800fec6:	e7e6      	b.n	800fe96 <_printf_i+0x182>
 800fec8:	4615      	mov	r5, r2
 800feca:	e7bb      	b.n	800fe44 <_printf_i+0x130>
 800fecc:	682b      	ldr	r3, [r5, #0]
 800fece:	6826      	ldr	r6, [r4, #0]
 800fed0:	6961      	ldr	r1, [r4, #20]
 800fed2:	1d18      	adds	r0, r3, #4
 800fed4:	6028      	str	r0, [r5, #0]
 800fed6:	0635      	lsls	r5, r6, #24
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	d501      	bpl.n	800fee0 <_printf_i+0x1cc>
 800fedc:	6019      	str	r1, [r3, #0]
 800fede:	e002      	b.n	800fee6 <_printf_i+0x1d2>
 800fee0:	0670      	lsls	r0, r6, #25
 800fee2:	d5fb      	bpl.n	800fedc <_printf_i+0x1c8>
 800fee4:	8019      	strh	r1, [r3, #0]
 800fee6:	2300      	movs	r3, #0
 800fee8:	6123      	str	r3, [r4, #16]
 800feea:	4615      	mov	r5, r2
 800feec:	e7ba      	b.n	800fe64 <_printf_i+0x150>
 800feee:	682b      	ldr	r3, [r5, #0]
 800fef0:	1d1a      	adds	r2, r3, #4
 800fef2:	602a      	str	r2, [r5, #0]
 800fef4:	681d      	ldr	r5, [r3, #0]
 800fef6:	6862      	ldr	r2, [r4, #4]
 800fef8:	2100      	movs	r1, #0
 800fefa:	4628      	mov	r0, r5
 800fefc:	f7f0 f9a0 	bl	8000240 <memchr>
 800ff00:	b108      	cbz	r0, 800ff06 <_printf_i+0x1f2>
 800ff02:	1b40      	subs	r0, r0, r5
 800ff04:	6060      	str	r0, [r4, #4]
 800ff06:	6863      	ldr	r3, [r4, #4]
 800ff08:	6123      	str	r3, [r4, #16]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff10:	e7a8      	b.n	800fe64 <_printf_i+0x150>
 800ff12:	6923      	ldr	r3, [r4, #16]
 800ff14:	462a      	mov	r2, r5
 800ff16:	4649      	mov	r1, r9
 800ff18:	4640      	mov	r0, r8
 800ff1a:	47d0      	blx	sl
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	d0ab      	beq.n	800fe78 <_printf_i+0x164>
 800ff20:	6823      	ldr	r3, [r4, #0]
 800ff22:	079b      	lsls	r3, r3, #30
 800ff24:	d413      	bmi.n	800ff4e <_printf_i+0x23a>
 800ff26:	68e0      	ldr	r0, [r4, #12]
 800ff28:	9b03      	ldr	r3, [sp, #12]
 800ff2a:	4298      	cmp	r0, r3
 800ff2c:	bfb8      	it	lt
 800ff2e:	4618      	movlt	r0, r3
 800ff30:	e7a4      	b.n	800fe7c <_printf_i+0x168>
 800ff32:	2301      	movs	r3, #1
 800ff34:	4632      	mov	r2, r6
 800ff36:	4649      	mov	r1, r9
 800ff38:	4640      	mov	r0, r8
 800ff3a:	47d0      	blx	sl
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	d09b      	beq.n	800fe78 <_printf_i+0x164>
 800ff40:	3501      	adds	r5, #1
 800ff42:	68e3      	ldr	r3, [r4, #12]
 800ff44:	9903      	ldr	r1, [sp, #12]
 800ff46:	1a5b      	subs	r3, r3, r1
 800ff48:	42ab      	cmp	r3, r5
 800ff4a:	dcf2      	bgt.n	800ff32 <_printf_i+0x21e>
 800ff4c:	e7eb      	b.n	800ff26 <_printf_i+0x212>
 800ff4e:	2500      	movs	r5, #0
 800ff50:	f104 0619 	add.w	r6, r4, #25
 800ff54:	e7f5      	b.n	800ff42 <_printf_i+0x22e>
 800ff56:	bf00      	nop
 800ff58:	080131f9 	.word	0x080131f9
 800ff5c:	0801320a 	.word	0x0801320a

0800ff60 <_sbrk_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d06      	ldr	r5, [pc, #24]	; (800ff7c <_sbrk_r+0x1c>)
 800ff64:	2300      	movs	r3, #0
 800ff66:	4604      	mov	r4, r0
 800ff68:	4608      	mov	r0, r1
 800ff6a:	602b      	str	r3, [r5, #0]
 800ff6c:	f7f0 fde0 	bl	8000b30 <_sbrk>
 800ff70:	1c43      	adds	r3, r0, #1
 800ff72:	d102      	bne.n	800ff7a <_sbrk_r+0x1a>
 800ff74:	682b      	ldr	r3, [r5, #0]
 800ff76:	b103      	cbz	r3, 800ff7a <_sbrk_r+0x1a>
 800ff78:	6023      	str	r3, [r4, #0]
 800ff7a:	bd38      	pop	{r3, r4, r5, pc}
 800ff7c:	20008af0 	.word	0x20008af0

0800ff80 <__sread>:
 800ff80:	b510      	push	{r4, lr}
 800ff82:	460c      	mov	r4, r1
 800ff84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff88:	f000 fa9e 	bl	80104c8 <_read_r>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	bfab      	itete	ge
 800ff90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff92:	89a3      	ldrhlt	r3, [r4, #12]
 800ff94:	181b      	addge	r3, r3, r0
 800ff96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff9a:	bfac      	ite	ge
 800ff9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff9e:	81a3      	strhlt	r3, [r4, #12]
 800ffa0:	bd10      	pop	{r4, pc}

0800ffa2 <__swrite>:
 800ffa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa6:	461f      	mov	r7, r3
 800ffa8:	898b      	ldrh	r3, [r1, #12]
 800ffaa:	05db      	lsls	r3, r3, #23
 800ffac:	4605      	mov	r5, r0
 800ffae:	460c      	mov	r4, r1
 800ffb0:	4616      	mov	r6, r2
 800ffb2:	d505      	bpl.n	800ffc0 <__swrite+0x1e>
 800ffb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb8:	2302      	movs	r3, #2
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f000 f9d0 	bl	8010360 <_lseek_r>
 800ffc0:	89a3      	ldrh	r3, [r4, #12]
 800ffc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffca:	81a3      	strh	r3, [r4, #12]
 800ffcc:	4632      	mov	r2, r6
 800ffce:	463b      	mov	r3, r7
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd6:	f000 b869 	b.w	80100ac <_write_r>

0800ffda <__sseek>:
 800ffda:	b510      	push	{r4, lr}
 800ffdc:	460c      	mov	r4, r1
 800ffde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe2:	f000 f9bd 	bl	8010360 <_lseek_r>
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	89a3      	ldrh	r3, [r4, #12]
 800ffea:	bf15      	itete	ne
 800ffec:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fff6:	81a3      	strheq	r3, [r4, #12]
 800fff8:	bf18      	it	ne
 800fffa:	81a3      	strhne	r3, [r4, #12]
 800fffc:	bd10      	pop	{r4, pc}

0800fffe <__sclose>:
 800fffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010002:	f000 b8db 	b.w	80101bc <_close_r>
	...

08010008 <__swbuf_r>:
 8010008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801000a:	460e      	mov	r6, r1
 801000c:	4614      	mov	r4, r2
 801000e:	4605      	mov	r5, r0
 8010010:	b118      	cbz	r0, 801001a <__swbuf_r+0x12>
 8010012:	6983      	ldr	r3, [r0, #24]
 8010014:	b90b      	cbnz	r3, 801001a <__swbuf_r+0x12>
 8010016:	f7ff f9bf 	bl	800f398 <__sinit>
 801001a:	4b21      	ldr	r3, [pc, #132]	; (80100a0 <__swbuf_r+0x98>)
 801001c:	429c      	cmp	r4, r3
 801001e:	d12b      	bne.n	8010078 <__swbuf_r+0x70>
 8010020:	686c      	ldr	r4, [r5, #4]
 8010022:	69a3      	ldr	r3, [r4, #24]
 8010024:	60a3      	str	r3, [r4, #8]
 8010026:	89a3      	ldrh	r3, [r4, #12]
 8010028:	071a      	lsls	r2, r3, #28
 801002a:	d52f      	bpl.n	801008c <__swbuf_r+0x84>
 801002c:	6923      	ldr	r3, [r4, #16]
 801002e:	b36b      	cbz	r3, 801008c <__swbuf_r+0x84>
 8010030:	6923      	ldr	r3, [r4, #16]
 8010032:	6820      	ldr	r0, [r4, #0]
 8010034:	1ac0      	subs	r0, r0, r3
 8010036:	6963      	ldr	r3, [r4, #20]
 8010038:	b2f6      	uxtb	r6, r6
 801003a:	4283      	cmp	r3, r0
 801003c:	4637      	mov	r7, r6
 801003e:	dc04      	bgt.n	801004a <__swbuf_r+0x42>
 8010040:	4621      	mov	r1, r4
 8010042:	4628      	mov	r0, r5
 8010044:	f000 f950 	bl	80102e8 <_fflush_r>
 8010048:	bb30      	cbnz	r0, 8010098 <__swbuf_r+0x90>
 801004a:	68a3      	ldr	r3, [r4, #8]
 801004c:	3b01      	subs	r3, #1
 801004e:	60a3      	str	r3, [r4, #8]
 8010050:	6823      	ldr	r3, [r4, #0]
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	6022      	str	r2, [r4, #0]
 8010056:	701e      	strb	r6, [r3, #0]
 8010058:	6963      	ldr	r3, [r4, #20]
 801005a:	3001      	adds	r0, #1
 801005c:	4283      	cmp	r3, r0
 801005e:	d004      	beq.n	801006a <__swbuf_r+0x62>
 8010060:	89a3      	ldrh	r3, [r4, #12]
 8010062:	07db      	lsls	r3, r3, #31
 8010064:	d506      	bpl.n	8010074 <__swbuf_r+0x6c>
 8010066:	2e0a      	cmp	r6, #10
 8010068:	d104      	bne.n	8010074 <__swbuf_r+0x6c>
 801006a:	4621      	mov	r1, r4
 801006c:	4628      	mov	r0, r5
 801006e:	f000 f93b 	bl	80102e8 <_fflush_r>
 8010072:	b988      	cbnz	r0, 8010098 <__swbuf_r+0x90>
 8010074:	4638      	mov	r0, r7
 8010076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010078:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <__swbuf_r+0x9c>)
 801007a:	429c      	cmp	r4, r3
 801007c:	d101      	bne.n	8010082 <__swbuf_r+0x7a>
 801007e:	68ac      	ldr	r4, [r5, #8]
 8010080:	e7cf      	b.n	8010022 <__swbuf_r+0x1a>
 8010082:	4b09      	ldr	r3, [pc, #36]	; (80100a8 <__swbuf_r+0xa0>)
 8010084:	429c      	cmp	r4, r3
 8010086:	bf08      	it	eq
 8010088:	68ec      	ldreq	r4, [r5, #12]
 801008a:	e7ca      	b.n	8010022 <__swbuf_r+0x1a>
 801008c:	4621      	mov	r1, r4
 801008e:	4628      	mov	r0, r5
 8010090:	f000 f81e 	bl	80100d0 <__swsetup_r>
 8010094:	2800      	cmp	r0, #0
 8010096:	d0cb      	beq.n	8010030 <__swbuf_r+0x28>
 8010098:	f04f 37ff 	mov.w	r7, #4294967295
 801009c:	e7ea      	b.n	8010074 <__swbuf_r+0x6c>
 801009e:	bf00      	nop
 80100a0:	080131a8 	.word	0x080131a8
 80100a4:	080131c8 	.word	0x080131c8
 80100a8:	08013188 	.word	0x08013188

080100ac <_write_r>:
 80100ac:	b538      	push	{r3, r4, r5, lr}
 80100ae:	4d07      	ldr	r5, [pc, #28]	; (80100cc <_write_r+0x20>)
 80100b0:	4604      	mov	r4, r0
 80100b2:	4608      	mov	r0, r1
 80100b4:	4611      	mov	r1, r2
 80100b6:	2200      	movs	r2, #0
 80100b8:	602a      	str	r2, [r5, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	f7f0 fce7 	bl	8000a8e <_write>
 80100c0:	1c43      	adds	r3, r0, #1
 80100c2:	d102      	bne.n	80100ca <_write_r+0x1e>
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	b103      	cbz	r3, 80100ca <_write_r+0x1e>
 80100c8:	6023      	str	r3, [r4, #0]
 80100ca:	bd38      	pop	{r3, r4, r5, pc}
 80100cc:	20008af0 	.word	0x20008af0

080100d0 <__swsetup_r>:
 80100d0:	4b32      	ldr	r3, [pc, #200]	; (801019c <__swsetup_r+0xcc>)
 80100d2:	b570      	push	{r4, r5, r6, lr}
 80100d4:	681d      	ldr	r5, [r3, #0]
 80100d6:	4606      	mov	r6, r0
 80100d8:	460c      	mov	r4, r1
 80100da:	b125      	cbz	r5, 80100e6 <__swsetup_r+0x16>
 80100dc:	69ab      	ldr	r3, [r5, #24]
 80100de:	b913      	cbnz	r3, 80100e6 <__swsetup_r+0x16>
 80100e0:	4628      	mov	r0, r5
 80100e2:	f7ff f959 	bl	800f398 <__sinit>
 80100e6:	4b2e      	ldr	r3, [pc, #184]	; (80101a0 <__swsetup_r+0xd0>)
 80100e8:	429c      	cmp	r4, r3
 80100ea:	d10f      	bne.n	801010c <__swsetup_r+0x3c>
 80100ec:	686c      	ldr	r4, [r5, #4]
 80100ee:	89a3      	ldrh	r3, [r4, #12]
 80100f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100f4:	0719      	lsls	r1, r3, #28
 80100f6:	d42c      	bmi.n	8010152 <__swsetup_r+0x82>
 80100f8:	06dd      	lsls	r5, r3, #27
 80100fa:	d411      	bmi.n	8010120 <__swsetup_r+0x50>
 80100fc:	2309      	movs	r3, #9
 80100fe:	6033      	str	r3, [r6, #0]
 8010100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010104:	81a3      	strh	r3, [r4, #12]
 8010106:	f04f 30ff 	mov.w	r0, #4294967295
 801010a:	e03e      	b.n	801018a <__swsetup_r+0xba>
 801010c:	4b25      	ldr	r3, [pc, #148]	; (80101a4 <__swsetup_r+0xd4>)
 801010e:	429c      	cmp	r4, r3
 8010110:	d101      	bne.n	8010116 <__swsetup_r+0x46>
 8010112:	68ac      	ldr	r4, [r5, #8]
 8010114:	e7eb      	b.n	80100ee <__swsetup_r+0x1e>
 8010116:	4b24      	ldr	r3, [pc, #144]	; (80101a8 <__swsetup_r+0xd8>)
 8010118:	429c      	cmp	r4, r3
 801011a:	bf08      	it	eq
 801011c:	68ec      	ldreq	r4, [r5, #12]
 801011e:	e7e6      	b.n	80100ee <__swsetup_r+0x1e>
 8010120:	0758      	lsls	r0, r3, #29
 8010122:	d512      	bpl.n	801014a <__swsetup_r+0x7a>
 8010124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010126:	b141      	cbz	r1, 801013a <__swsetup_r+0x6a>
 8010128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801012c:	4299      	cmp	r1, r3
 801012e:	d002      	beq.n	8010136 <__swsetup_r+0x66>
 8010130:	4630      	mov	r0, r6
 8010132:	f7ff f9eb 	bl	800f50c <_free_r>
 8010136:	2300      	movs	r3, #0
 8010138:	6363      	str	r3, [r4, #52]	; 0x34
 801013a:	89a3      	ldrh	r3, [r4, #12]
 801013c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010140:	81a3      	strh	r3, [r4, #12]
 8010142:	2300      	movs	r3, #0
 8010144:	6063      	str	r3, [r4, #4]
 8010146:	6923      	ldr	r3, [r4, #16]
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	f043 0308 	orr.w	r3, r3, #8
 8010150:	81a3      	strh	r3, [r4, #12]
 8010152:	6923      	ldr	r3, [r4, #16]
 8010154:	b94b      	cbnz	r3, 801016a <__swsetup_r+0x9a>
 8010156:	89a3      	ldrh	r3, [r4, #12]
 8010158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801015c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010160:	d003      	beq.n	801016a <__swsetup_r+0x9a>
 8010162:	4621      	mov	r1, r4
 8010164:	4630      	mov	r0, r6
 8010166:	f000 f933 	bl	80103d0 <__smakebuf_r>
 801016a:	89a0      	ldrh	r0, [r4, #12]
 801016c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010170:	f010 0301 	ands.w	r3, r0, #1
 8010174:	d00a      	beq.n	801018c <__swsetup_r+0xbc>
 8010176:	2300      	movs	r3, #0
 8010178:	60a3      	str	r3, [r4, #8]
 801017a:	6963      	ldr	r3, [r4, #20]
 801017c:	425b      	negs	r3, r3
 801017e:	61a3      	str	r3, [r4, #24]
 8010180:	6923      	ldr	r3, [r4, #16]
 8010182:	b943      	cbnz	r3, 8010196 <__swsetup_r+0xc6>
 8010184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010188:	d1ba      	bne.n	8010100 <__swsetup_r+0x30>
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	0781      	lsls	r1, r0, #30
 801018e:	bf58      	it	pl
 8010190:	6963      	ldrpl	r3, [r4, #20]
 8010192:	60a3      	str	r3, [r4, #8]
 8010194:	e7f4      	b.n	8010180 <__swsetup_r+0xb0>
 8010196:	2000      	movs	r0, #0
 8010198:	e7f7      	b.n	801018a <__swsetup_r+0xba>
 801019a:	bf00      	nop
 801019c:	20000014 	.word	0x20000014
 80101a0:	080131a8 	.word	0x080131a8
 80101a4:	080131c8 	.word	0x080131c8
 80101a8:	08013188 	.word	0x08013188

080101ac <abort>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	2006      	movs	r0, #6
 80101b0:	f000 f9c4 	bl	801053c <raise>
 80101b4:	2001      	movs	r0, #1
 80101b6:	f7f0 fc43 	bl	8000a40 <_exit>
	...

080101bc <_close_r>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	4d06      	ldr	r5, [pc, #24]	; (80101d8 <_close_r+0x1c>)
 80101c0:	2300      	movs	r3, #0
 80101c2:	4604      	mov	r4, r0
 80101c4:	4608      	mov	r0, r1
 80101c6:	602b      	str	r3, [r5, #0]
 80101c8:	f7f0 fc7d 	bl	8000ac6 <_close>
 80101cc:	1c43      	adds	r3, r0, #1
 80101ce:	d102      	bne.n	80101d6 <_close_r+0x1a>
 80101d0:	682b      	ldr	r3, [r5, #0]
 80101d2:	b103      	cbz	r3, 80101d6 <_close_r+0x1a>
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	bd38      	pop	{r3, r4, r5, pc}
 80101d8:	20008af0 	.word	0x20008af0

080101dc <__sflush_r>:
 80101dc:	898a      	ldrh	r2, [r1, #12]
 80101de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e2:	4605      	mov	r5, r0
 80101e4:	0710      	lsls	r0, r2, #28
 80101e6:	460c      	mov	r4, r1
 80101e8:	d458      	bmi.n	801029c <__sflush_r+0xc0>
 80101ea:	684b      	ldr	r3, [r1, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	dc05      	bgt.n	80101fc <__sflush_r+0x20>
 80101f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	dc02      	bgt.n	80101fc <__sflush_r+0x20>
 80101f6:	2000      	movs	r0, #0
 80101f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101fe:	2e00      	cmp	r6, #0
 8010200:	d0f9      	beq.n	80101f6 <__sflush_r+0x1a>
 8010202:	2300      	movs	r3, #0
 8010204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010208:	682f      	ldr	r7, [r5, #0]
 801020a:	602b      	str	r3, [r5, #0]
 801020c:	d032      	beq.n	8010274 <__sflush_r+0x98>
 801020e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	075a      	lsls	r2, r3, #29
 8010214:	d505      	bpl.n	8010222 <__sflush_r+0x46>
 8010216:	6863      	ldr	r3, [r4, #4]
 8010218:	1ac0      	subs	r0, r0, r3
 801021a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801021c:	b10b      	cbz	r3, 8010222 <__sflush_r+0x46>
 801021e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010220:	1ac0      	subs	r0, r0, r3
 8010222:	2300      	movs	r3, #0
 8010224:	4602      	mov	r2, r0
 8010226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010228:	6a21      	ldr	r1, [r4, #32]
 801022a:	4628      	mov	r0, r5
 801022c:	47b0      	blx	r6
 801022e:	1c43      	adds	r3, r0, #1
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	d106      	bne.n	8010242 <__sflush_r+0x66>
 8010234:	6829      	ldr	r1, [r5, #0]
 8010236:	291d      	cmp	r1, #29
 8010238:	d82c      	bhi.n	8010294 <__sflush_r+0xb8>
 801023a:	4a2a      	ldr	r2, [pc, #168]	; (80102e4 <__sflush_r+0x108>)
 801023c:	40ca      	lsrs	r2, r1
 801023e:	07d6      	lsls	r6, r2, #31
 8010240:	d528      	bpl.n	8010294 <__sflush_r+0xb8>
 8010242:	2200      	movs	r2, #0
 8010244:	6062      	str	r2, [r4, #4]
 8010246:	04d9      	lsls	r1, r3, #19
 8010248:	6922      	ldr	r2, [r4, #16]
 801024a:	6022      	str	r2, [r4, #0]
 801024c:	d504      	bpl.n	8010258 <__sflush_r+0x7c>
 801024e:	1c42      	adds	r2, r0, #1
 8010250:	d101      	bne.n	8010256 <__sflush_r+0x7a>
 8010252:	682b      	ldr	r3, [r5, #0]
 8010254:	b903      	cbnz	r3, 8010258 <__sflush_r+0x7c>
 8010256:	6560      	str	r0, [r4, #84]	; 0x54
 8010258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801025a:	602f      	str	r7, [r5, #0]
 801025c:	2900      	cmp	r1, #0
 801025e:	d0ca      	beq.n	80101f6 <__sflush_r+0x1a>
 8010260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010264:	4299      	cmp	r1, r3
 8010266:	d002      	beq.n	801026e <__sflush_r+0x92>
 8010268:	4628      	mov	r0, r5
 801026a:	f7ff f94f 	bl	800f50c <_free_r>
 801026e:	2000      	movs	r0, #0
 8010270:	6360      	str	r0, [r4, #52]	; 0x34
 8010272:	e7c1      	b.n	80101f8 <__sflush_r+0x1c>
 8010274:	6a21      	ldr	r1, [r4, #32]
 8010276:	2301      	movs	r3, #1
 8010278:	4628      	mov	r0, r5
 801027a:	47b0      	blx	r6
 801027c:	1c41      	adds	r1, r0, #1
 801027e:	d1c7      	bne.n	8010210 <__sflush_r+0x34>
 8010280:	682b      	ldr	r3, [r5, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d0c4      	beq.n	8010210 <__sflush_r+0x34>
 8010286:	2b1d      	cmp	r3, #29
 8010288:	d001      	beq.n	801028e <__sflush_r+0xb2>
 801028a:	2b16      	cmp	r3, #22
 801028c:	d101      	bne.n	8010292 <__sflush_r+0xb6>
 801028e:	602f      	str	r7, [r5, #0]
 8010290:	e7b1      	b.n	80101f6 <__sflush_r+0x1a>
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010298:	81a3      	strh	r3, [r4, #12]
 801029a:	e7ad      	b.n	80101f8 <__sflush_r+0x1c>
 801029c:	690f      	ldr	r7, [r1, #16]
 801029e:	2f00      	cmp	r7, #0
 80102a0:	d0a9      	beq.n	80101f6 <__sflush_r+0x1a>
 80102a2:	0793      	lsls	r3, r2, #30
 80102a4:	680e      	ldr	r6, [r1, #0]
 80102a6:	bf08      	it	eq
 80102a8:	694b      	ldreq	r3, [r1, #20]
 80102aa:	600f      	str	r7, [r1, #0]
 80102ac:	bf18      	it	ne
 80102ae:	2300      	movne	r3, #0
 80102b0:	eba6 0807 	sub.w	r8, r6, r7
 80102b4:	608b      	str	r3, [r1, #8]
 80102b6:	f1b8 0f00 	cmp.w	r8, #0
 80102ba:	dd9c      	ble.n	80101f6 <__sflush_r+0x1a>
 80102bc:	6a21      	ldr	r1, [r4, #32]
 80102be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102c0:	4643      	mov	r3, r8
 80102c2:	463a      	mov	r2, r7
 80102c4:	4628      	mov	r0, r5
 80102c6:	47b0      	blx	r6
 80102c8:	2800      	cmp	r0, #0
 80102ca:	dc06      	bgt.n	80102da <__sflush_r+0xfe>
 80102cc:	89a3      	ldrh	r3, [r4, #12]
 80102ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102d2:	81a3      	strh	r3, [r4, #12]
 80102d4:	f04f 30ff 	mov.w	r0, #4294967295
 80102d8:	e78e      	b.n	80101f8 <__sflush_r+0x1c>
 80102da:	4407      	add	r7, r0
 80102dc:	eba8 0800 	sub.w	r8, r8, r0
 80102e0:	e7e9      	b.n	80102b6 <__sflush_r+0xda>
 80102e2:	bf00      	nop
 80102e4:	20400001 	.word	0x20400001

080102e8 <_fflush_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	690b      	ldr	r3, [r1, #16]
 80102ec:	4605      	mov	r5, r0
 80102ee:	460c      	mov	r4, r1
 80102f0:	b913      	cbnz	r3, 80102f8 <_fflush_r+0x10>
 80102f2:	2500      	movs	r5, #0
 80102f4:	4628      	mov	r0, r5
 80102f6:	bd38      	pop	{r3, r4, r5, pc}
 80102f8:	b118      	cbz	r0, 8010302 <_fflush_r+0x1a>
 80102fa:	6983      	ldr	r3, [r0, #24]
 80102fc:	b90b      	cbnz	r3, 8010302 <_fflush_r+0x1a>
 80102fe:	f7ff f84b 	bl	800f398 <__sinit>
 8010302:	4b14      	ldr	r3, [pc, #80]	; (8010354 <_fflush_r+0x6c>)
 8010304:	429c      	cmp	r4, r3
 8010306:	d11b      	bne.n	8010340 <_fflush_r+0x58>
 8010308:	686c      	ldr	r4, [r5, #4]
 801030a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0ef      	beq.n	80102f2 <_fflush_r+0xa>
 8010312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010314:	07d0      	lsls	r0, r2, #31
 8010316:	d404      	bmi.n	8010322 <_fflush_r+0x3a>
 8010318:	0599      	lsls	r1, r3, #22
 801031a:	d402      	bmi.n	8010322 <_fflush_r+0x3a>
 801031c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801031e:	f7ff f8eb 	bl	800f4f8 <__retarget_lock_acquire_recursive>
 8010322:	4628      	mov	r0, r5
 8010324:	4621      	mov	r1, r4
 8010326:	f7ff ff59 	bl	80101dc <__sflush_r>
 801032a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801032c:	07da      	lsls	r2, r3, #31
 801032e:	4605      	mov	r5, r0
 8010330:	d4e0      	bmi.n	80102f4 <_fflush_r+0xc>
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	059b      	lsls	r3, r3, #22
 8010336:	d4dd      	bmi.n	80102f4 <_fflush_r+0xc>
 8010338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801033a:	f7ff f8de 	bl	800f4fa <__retarget_lock_release_recursive>
 801033e:	e7d9      	b.n	80102f4 <_fflush_r+0xc>
 8010340:	4b05      	ldr	r3, [pc, #20]	; (8010358 <_fflush_r+0x70>)
 8010342:	429c      	cmp	r4, r3
 8010344:	d101      	bne.n	801034a <_fflush_r+0x62>
 8010346:	68ac      	ldr	r4, [r5, #8]
 8010348:	e7df      	b.n	801030a <_fflush_r+0x22>
 801034a:	4b04      	ldr	r3, [pc, #16]	; (801035c <_fflush_r+0x74>)
 801034c:	429c      	cmp	r4, r3
 801034e:	bf08      	it	eq
 8010350:	68ec      	ldreq	r4, [r5, #12]
 8010352:	e7da      	b.n	801030a <_fflush_r+0x22>
 8010354:	080131a8 	.word	0x080131a8
 8010358:	080131c8 	.word	0x080131c8
 801035c:	08013188 	.word	0x08013188

08010360 <_lseek_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d07      	ldr	r5, [pc, #28]	; (8010380 <_lseek_r+0x20>)
 8010364:	4604      	mov	r4, r0
 8010366:	4608      	mov	r0, r1
 8010368:	4611      	mov	r1, r2
 801036a:	2200      	movs	r2, #0
 801036c:	602a      	str	r2, [r5, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	f7f0 fbd0 	bl	8000b14 <_lseek>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_lseek_r+0x1e>
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	b103      	cbz	r3, 801037e <_lseek_r+0x1e>
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	20008af0 	.word	0x20008af0

08010384 <__swhatbuf_r>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	460e      	mov	r6, r1
 8010388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801038c:	2900      	cmp	r1, #0
 801038e:	b096      	sub	sp, #88	; 0x58
 8010390:	4614      	mov	r4, r2
 8010392:	461d      	mov	r5, r3
 8010394:	da08      	bge.n	80103a8 <__swhatbuf_r+0x24>
 8010396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	602a      	str	r2, [r5, #0]
 801039e:	061a      	lsls	r2, r3, #24
 80103a0:	d410      	bmi.n	80103c4 <__swhatbuf_r+0x40>
 80103a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103a6:	e00e      	b.n	80103c6 <__swhatbuf_r+0x42>
 80103a8:	466a      	mov	r2, sp
 80103aa:	f000 f8e3 	bl	8010574 <_fstat_r>
 80103ae:	2800      	cmp	r0, #0
 80103b0:	dbf1      	blt.n	8010396 <__swhatbuf_r+0x12>
 80103b2:	9a01      	ldr	r2, [sp, #4]
 80103b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103bc:	425a      	negs	r2, r3
 80103be:	415a      	adcs	r2, r3
 80103c0:	602a      	str	r2, [r5, #0]
 80103c2:	e7ee      	b.n	80103a2 <__swhatbuf_r+0x1e>
 80103c4:	2340      	movs	r3, #64	; 0x40
 80103c6:	2000      	movs	r0, #0
 80103c8:	6023      	str	r3, [r4, #0]
 80103ca:	b016      	add	sp, #88	; 0x58
 80103cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080103d0 <__smakebuf_r>:
 80103d0:	898b      	ldrh	r3, [r1, #12]
 80103d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103d4:	079d      	lsls	r5, r3, #30
 80103d6:	4606      	mov	r6, r0
 80103d8:	460c      	mov	r4, r1
 80103da:	d507      	bpl.n	80103ec <__smakebuf_r+0x1c>
 80103dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	6123      	str	r3, [r4, #16]
 80103e4:	2301      	movs	r3, #1
 80103e6:	6163      	str	r3, [r4, #20]
 80103e8:	b002      	add	sp, #8
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	ab01      	add	r3, sp, #4
 80103ee:	466a      	mov	r2, sp
 80103f0:	f7ff ffc8 	bl	8010384 <__swhatbuf_r>
 80103f4:	9900      	ldr	r1, [sp, #0]
 80103f6:	4605      	mov	r5, r0
 80103f8:	4630      	mov	r0, r6
 80103fa:	f7ff f8f3 	bl	800f5e4 <_malloc_r>
 80103fe:	b948      	cbnz	r0, 8010414 <__smakebuf_r+0x44>
 8010400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010404:	059a      	lsls	r2, r3, #22
 8010406:	d4ef      	bmi.n	80103e8 <__smakebuf_r+0x18>
 8010408:	f023 0303 	bic.w	r3, r3, #3
 801040c:	f043 0302 	orr.w	r3, r3, #2
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	e7e3      	b.n	80103dc <__smakebuf_r+0xc>
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <__smakebuf_r+0x7c>)
 8010416:	62b3      	str	r3, [r6, #40]	; 0x28
 8010418:	89a3      	ldrh	r3, [r4, #12]
 801041a:	6020      	str	r0, [r4, #0]
 801041c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010420:	81a3      	strh	r3, [r4, #12]
 8010422:	9b00      	ldr	r3, [sp, #0]
 8010424:	6163      	str	r3, [r4, #20]
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	6120      	str	r0, [r4, #16]
 801042a:	b15b      	cbz	r3, 8010444 <__smakebuf_r+0x74>
 801042c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010430:	4630      	mov	r0, r6
 8010432:	f000 f8b1 	bl	8010598 <_isatty_r>
 8010436:	b128      	cbz	r0, 8010444 <__smakebuf_r+0x74>
 8010438:	89a3      	ldrh	r3, [r4, #12]
 801043a:	f023 0303 	bic.w	r3, r3, #3
 801043e:	f043 0301 	orr.w	r3, r3, #1
 8010442:	81a3      	strh	r3, [r4, #12]
 8010444:	89a0      	ldrh	r0, [r4, #12]
 8010446:	4305      	orrs	r5, r0
 8010448:	81a5      	strh	r5, [r4, #12]
 801044a:	e7cd      	b.n	80103e8 <__smakebuf_r+0x18>
 801044c:	0800f331 	.word	0x0800f331

08010450 <__malloc_lock>:
 8010450:	4801      	ldr	r0, [pc, #4]	; (8010458 <__malloc_lock+0x8>)
 8010452:	f7ff b851 	b.w	800f4f8 <__retarget_lock_acquire_recursive>
 8010456:	bf00      	nop
 8010458:	20008af4 	.word	0x20008af4

0801045c <__malloc_unlock>:
 801045c:	4801      	ldr	r0, [pc, #4]	; (8010464 <__malloc_unlock+0x8>)
 801045e:	f7ff b84c 	b.w	800f4fa <__retarget_lock_release_recursive>
 8010462:	bf00      	nop
 8010464:	20008af4 	.word	0x20008af4

08010468 <_realloc_r>:
 8010468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	4680      	mov	r8, r0
 801046e:	4614      	mov	r4, r2
 8010470:	460e      	mov	r6, r1
 8010472:	b921      	cbnz	r1, 801047e <_realloc_r+0x16>
 8010474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010478:	4611      	mov	r1, r2
 801047a:	f7ff b8b3 	b.w	800f5e4 <_malloc_r>
 801047e:	b92a      	cbnz	r2, 801048c <_realloc_r+0x24>
 8010480:	f7ff f844 	bl	800f50c <_free_r>
 8010484:	4625      	mov	r5, r4
 8010486:	4628      	mov	r0, r5
 8010488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048c:	f000 f894 	bl	80105b8 <_malloc_usable_size_r>
 8010490:	4284      	cmp	r4, r0
 8010492:	4607      	mov	r7, r0
 8010494:	d802      	bhi.n	801049c <_realloc_r+0x34>
 8010496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801049a:	d812      	bhi.n	80104c2 <_realloc_r+0x5a>
 801049c:	4621      	mov	r1, r4
 801049e:	4640      	mov	r0, r8
 80104a0:	f7ff f8a0 	bl	800f5e4 <_malloc_r>
 80104a4:	4605      	mov	r5, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d0ed      	beq.n	8010486 <_realloc_r+0x1e>
 80104aa:	42bc      	cmp	r4, r7
 80104ac:	4622      	mov	r2, r4
 80104ae:	4631      	mov	r1, r6
 80104b0:	bf28      	it	cs
 80104b2:	463a      	movcs	r2, r7
 80104b4:	f7fe fe54 	bl	800f160 <memcpy>
 80104b8:	4631      	mov	r1, r6
 80104ba:	4640      	mov	r0, r8
 80104bc:	f7ff f826 	bl	800f50c <_free_r>
 80104c0:	e7e1      	b.n	8010486 <_realloc_r+0x1e>
 80104c2:	4635      	mov	r5, r6
 80104c4:	e7df      	b.n	8010486 <_realloc_r+0x1e>
	...

080104c8 <_read_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4d07      	ldr	r5, [pc, #28]	; (80104e8 <_read_r+0x20>)
 80104cc:	4604      	mov	r4, r0
 80104ce:	4608      	mov	r0, r1
 80104d0:	4611      	mov	r1, r2
 80104d2:	2200      	movs	r2, #0
 80104d4:	602a      	str	r2, [r5, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	f7f0 fabc 	bl	8000a54 <_read>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d102      	bne.n	80104e6 <_read_r+0x1e>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	b103      	cbz	r3, 80104e6 <_read_r+0x1e>
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	20008af0 	.word	0x20008af0

080104ec <_raise_r>:
 80104ec:	291f      	cmp	r1, #31
 80104ee:	b538      	push	{r3, r4, r5, lr}
 80104f0:	4604      	mov	r4, r0
 80104f2:	460d      	mov	r5, r1
 80104f4:	d904      	bls.n	8010500 <_raise_r+0x14>
 80104f6:	2316      	movs	r3, #22
 80104f8:	6003      	str	r3, [r0, #0]
 80104fa:	f04f 30ff 	mov.w	r0, #4294967295
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010502:	b112      	cbz	r2, 801050a <_raise_r+0x1e>
 8010504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010508:	b94b      	cbnz	r3, 801051e <_raise_r+0x32>
 801050a:	4620      	mov	r0, r4
 801050c:	f000 f830 	bl	8010570 <_getpid_r>
 8010510:	462a      	mov	r2, r5
 8010512:	4601      	mov	r1, r0
 8010514:	4620      	mov	r0, r4
 8010516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801051a:	f000 b817 	b.w	801054c <_kill_r>
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00a      	beq.n	8010538 <_raise_r+0x4c>
 8010522:	1c59      	adds	r1, r3, #1
 8010524:	d103      	bne.n	801052e <_raise_r+0x42>
 8010526:	2316      	movs	r3, #22
 8010528:	6003      	str	r3, [r0, #0]
 801052a:	2001      	movs	r0, #1
 801052c:	e7e7      	b.n	80104fe <_raise_r+0x12>
 801052e:	2400      	movs	r4, #0
 8010530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010534:	4628      	mov	r0, r5
 8010536:	4798      	blx	r3
 8010538:	2000      	movs	r0, #0
 801053a:	e7e0      	b.n	80104fe <_raise_r+0x12>

0801053c <raise>:
 801053c:	4b02      	ldr	r3, [pc, #8]	; (8010548 <raise+0xc>)
 801053e:	4601      	mov	r1, r0
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	f7ff bfd3 	b.w	80104ec <_raise_r>
 8010546:	bf00      	nop
 8010548:	20000014 	.word	0x20000014

0801054c <_kill_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d07      	ldr	r5, [pc, #28]	; (801056c <_kill_r+0x20>)
 8010550:	2300      	movs	r3, #0
 8010552:	4604      	mov	r4, r0
 8010554:	4608      	mov	r0, r1
 8010556:	4611      	mov	r1, r2
 8010558:	602b      	str	r3, [r5, #0]
 801055a:	f7f0 fa5f 	bl	8000a1c <_kill>
 801055e:	1c43      	adds	r3, r0, #1
 8010560:	d102      	bne.n	8010568 <_kill_r+0x1c>
 8010562:	682b      	ldr	r3, [r5, #0]
 8010564:	b103      	cbz	r3, 8010568 <_kill_r+0x1c>
 8010566:	6023      	str	r3, [r4, #0]
 8010568:	bd38      	pop	{r3, r4, r5, pc}
 801056a:	bf00      	nop
 801056c:	20008af0 	.word	0x20008af0

08010570 <_getpid_r>:
 8010570:	f7f0 ba4c 	b.w	8000a0c <_getpid>

08010574 <_fstat_r>:
 8010574:	b538      	push	{r3, r4, r5, lr}
 8010576:	4d07      	ldr	r5, [pc, #28]	; (8010594 <_fstat_r+0x20>)
 8010578:	2300      	movs	r3, #0
 801057a:	4604      	mov	r4, r0
 801057c:	4608      	mov	r0, r1
 801057e:	4611      	mov	r1, r2
 8010580:	602b      	str	r3, [r5, #0]
 8010582:	f7f0 faac 	bl	8000ade <_fstat>
 8010586:	1c43      	adds	r3, r0, #1
 8010588:	d102      	bne.n	8010590 <_fstat_r+0x1c>
 801058a:	682b      	ldr	r3, [r5, #0]
 801058c:	b103      	cbz	r3, 8010590 <_fstat_r+0x1c>
 801058e:	6023      	str	r3, [r4, #0]
 8010590:	bd38      	pop	{r3, r4, r5, pc}
 8010592:	bf00      	nop
 8010594:	20008af0 	.word	0x20008af0

08010598 <_isatty_r>:
 8010598:	b538      	push	{r3, r4, r5, lr}
 801059a:	4d06      	ldr	r5, [pc, #24]	; (80105b4 <_isatty_r+0x1c>)
 801059c:	2300      	movs	r3, #0
 801059e:	4604      	mov	r4, r0
 80105a0:	4608      	mov	r0, r1
 80105a2:	602b      	str	r3, [r5, #0]
 80105a4:	f7f0 faab 	bl	8000afe <_isatty>
 80105a8:	1c43      	adds	r3, r0, #1
 80105aa:	d102      	bne.n	80105b2 <_isatty_r+0x1a>
 80105ac:	682b      	ldr	r3, [r5, #0]
 80105ae:	b103      	cbz	r3, 80105b2 <_isatty_r+0x1a>
 80105b0:	6023      	str	r3, [r4, #0]
 80105b2:	bd38      	pop	{r3, r4, r5, pc}
 80105b4:	20008af0 	.word	0x20008af0

080105b8 <_malloc_usable_size_r>:
 80105b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105bc:	1f18      	subs	r0, r3, #4
 80105be:	2b00      	cmp	r3, #0
 80105c0:	bfbc      	itt	lt
 80105c2:	580b      	ldrlt	r3, [r1, r0]
 80105c4:	18c0      	addlt	r0, r0, r3
 80105c6:	4770      	bx	lr

080105c8 <_init>:
 80105c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ca:	bf00      	nop
 80105cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ce:	bc08      	pop	{r3}
 80105d0:	469e      	mov	lr, r3
 80105d2:	4770      	bx	lr

080105d4 <_fini>:
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	bf00      	nop
 80105d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105da:	bc08      	pop	{r3}
 80105dc:	469e      	mov	lr, r3
 80105de:	4770      	bx	lr
